(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,i,s=e[0],l=e[1],c=e[2],p=0,d=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&d.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(u&&u(e);d.length;)d.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==o[l]&&(r=!1)}r&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},o={1:0},a=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"75e49976",3:"d35e0266",4:"d87e94ad",5:"ba910c58",6:"2f4d28ba",7:"ab99c927",8:"e7b71753",9:"128aac65",10:"efee02f4",11:"8177dcdb",12:"2d3eb3ab",13:"26dfd414",14:"0444ce56",15:"475db5c0",16:"c2b1323e",17:"ede964ed",18:"6a682c50"}[n]+".js"}(n);var l=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+a+")",l.name="ChunkLoadError",l.type=r,l.request=a,t[1](l)}o[n]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;a.push([104,0]),t()}([function(n,e,t){"use strict";var r=function(n){return n&&n.Math===Math&&n};n.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";var r="object"==typeof document&&document.all;n.exports=void 0===r&&void 0!==r?function(n){return"function"==typeof n||n===r}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var r=t(26),o=Function.prototype,a=o.call,i=r&&o.bind.bind(a,a);n.exports=r?i:function(n){return function(){return a.apply(n,arguments)}}},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){"use strict";var r=t(1);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(68),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();n.exports=a},function(n,e,t){"use strict";function r(n,e,t,r,o,a,i,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),o=t(31),a=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(o(n),e)}},function(n,e,t){var r=t(163),o=t(166);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return h})),t.d(e,"d",(function(){return v})),t.d(e,"k",(function(){return g})),t.d(e,"n",(function(){return y})),t.d(e,"a",(function(){return x}));t(16);const r=/#.*$/,o=/\.(md|html)$/,a=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function l(n){return i.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",o=s(n);return a.test(o)?n:o+".html"+t}function d(n,e){const t=n.hash,o=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(o&&t!==o)return!1;return s(n.path)===s(e)}function m(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const o=e.split("/");t&&o[o.length-1]||o.pop();const a=n.replace(/^\//,"").split("/");for(let n=0;n<a.length;n++){const e=a[n];".."===e?o.pop():"."!==e&&o.push(e)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function h(n,e,t,r){const{pages:o,themeConfig:a}=t,i=r&&a.locales&&a.locales[r]||a;if("auto"===(n.frontmatter.sidebar||i.sidebar||a.sidebar))return f(n);const s=i.sidebar||a.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?f(n):r?r.map(n=>function n(e,t,r,o=1){if("string"==typeof e)return m(t,e,r);if(Array.isArray(e))return Object.assign(m(t,e[0],r),{title:e[1]});{o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const a=e.children||[];return 0===a.length&&e.path?Object.assign(m(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map(e=>n(e,t,r,o+1)),collapsable:!1!==e.collapsable}}}(n,o,t)):[]}return[]}function f(n){const e=v(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function v(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function g(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function y(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function b(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return b(e)-b(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),o=t(148),a=t(149),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?o(n):a(n)}},function(n,e,t){"use strict";var r=t(4),o=t(17),a=t(34);n.exports=r?function(n,e,t){return o.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(7).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(25),o=t(31),a=t(32),i=t(142),s=t(144);r({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=o(this),t=a(e),r=arguments.length;s(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return i(e,t),t}})},function(n,e,t){"use strict";var r=t(4),o=t(63),a=t(99),i=t(47),s=t(54),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=r?a?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=u(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(i(n),e=s(e),i(t),o)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";var r=t(2),o=r({}.toString),a=r("".slice);n.exports=function(n){return a(o(n),8,-1)}},function(n,e,t){var r=t(153),o=t(154),a=t(155),i=t(156),s=t(157);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(70);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(175);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),u=r.speed,p=r.easing;return l.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,o}(n,u,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,i=e.querySelector(r.barSelector),l=n?"-100":a(t.status||0),u=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&d(o),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+a)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,a=arguments;if(2==a.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,a[1],a[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){"use strict";var r=t(0),o=t(52).f,a=t(14),i=t(95),s=t(37),l=t(64),c=t(123);n.exports=function(n,e){var t,u,p,d,m,h=n.target,f=n.global,v=n.stat;if(t=f?r:v?r[h]||s(h,{}):r[h]&&r[h].prototype)for(u in e){if(d=e[u],p=n.dontCallGetSet?(m=o(t,u))&&m.value:t[u],!c(f?u:h+(v?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(n.sham||p&&p.sham)&&a(d,"sham",!0),i(t,u,d,n)}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";var r=t(48),o=t(35);n.exports=function(n){return r(o(n))}},function(n,e,t){"use strict";var r=t(0),o=t(1),a=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(1),o=t(110),a=TypeError;n.exports=function(n){if(r(n))return n;throw new a(o(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(0),o=t(60),a=t(9),i=t(62),s=t(58),l=t(57),c=r.Symbol,u=o("wks"),p=l?c.for||c:c&&c.withoutSetter||i;n.exports=function(n){return a(u,n)||(u[n]=s&&a(c,n)?c[n]:p("Symbol."+n)),u[n]}},function(n,e,t){"use strict";var r=t(35),o=Object;n.exports=function(n){return o(r(n))}},function(n,e,t){"use strict";var r=t(121);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(26),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(53),o=TypeError;n.exports=function(n){if(r(n))throw new o("Can't call method on "+n);return n}},function(n,e,t){"use strict";var r=t(61),o=t(0),a=t(37),i=n.exports=o["__core-js_shared__"]||a("__core-js_shared__",{});(i.versions||(i.versions=[])).push({version:"3.37.1",mode:r?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.37.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";var r=t(0),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(147),o=t(12),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return o(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(10)(t(7),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(167),o=t(174),a=t(176),i=t(177),s=t(178);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(5),o=t(45),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),o=t(12);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(6),o=String,a=TypeError;n.exports=function(n){if(r(n))return n;throw new a(o(n)+" is not an object")}},function(n,e,t){"use strict";var r=t(2),o=t(3),a=t(18),i=Object,s=r("".split);n.exports=o((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"===a(n)?s(n,""):i(n)}:i},function(n,e,t){"use strict";n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,m=function(){return c.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function f(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||a.test(n)?i(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,a,i,s,l,c=0,u=!1,v=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function y(e){var t=r,a=o;return r=o=void 0,c=e,i=n.apply(a,t)}function b(n){return c=n,s=setTimeout(w,e),u?y(n):i}function x(n){var t=n-l;return void 0===l||t>=e||t<0||v&&n-c>=a}function w(){var n=m();if(x(n))return _(n);s=setTimeout(w,function(n){var t=e-(n-l);return v?d(t,a-(n-c)):t}(n))}function _(n){return s=void 0,g&&r?y(n):(r=o=void 0,i)}function k(){var n=m(),t=x(n);if(r=arguments,o=this,l=n,t){if(void 0===s)return b(l);if(v)return s=setTimeout(w,e),y(l)}return void 0===s&&(s=setTimeout(w,e)),i}return e=f(e)||0,h(t)&&(u=!!t.leading,a=(v="maxWait"in t)?p(f(t.maxWait)||0,e):a,g="trailing"in t?!!t.trailing:g),k.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=o=s=void 0},k.flush=function(){return void 0===s?i:_(m())},k}},function(n,e,t){"use strict";var r=t(4),o=t(33),a=t(106),i=t(34),s=t(27),l=t(54),c=t(9),u=t(63),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=l(e),u)try{return p(n,e)}catch(n){}if(c(n,e))return i(!o(a.f,n,e),n[e])}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var r=t(107),o=t(55);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e,t){"use strict";var r=t(28),o=t(1),a=t(56),i=t(57),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return o(e)&&a(e.prototype,s(n))}},function(n,e,t){"use strict";var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){"use strict";var r=t(58);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var r=t(59),o=t(3),a=t(0).String;n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol("symbol detection");return!a(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){"use strict";var r,o,a=t(0),i=t(108),s=a.process,l=a.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(o=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){"use strict";var r=t(36);n.exports=function(n,e){return r[n]||(r[n]=e||{})}},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var r=t(2),o=0,a=Math.random(),i=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++o+a,36)}},function(n,e,t){"use strict";var r=t(4),o=t(3),a=t(98);n.exports=!r&&!o((function(){return 7!==Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var r=t(9),o=t(116),a=t(52),i=t(17);n.exports=function(n,e,t){for(var s=o(e),l=i.f,c=a.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||l(n,p,c(e,p))}}},function(n,e,t){"use strict";var r=t(120);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){"use strict";var r=t(130),o=t(6),a=t(35),i=t(131);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),o(t)?(e?n(t,r):t.__proto__=r,t):t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(19),o=t(158),a=t(159),i=t(160),s=t(161),l=t(162);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),o=t(40);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(179),o=t(12);n.exports=function n(e,t,a,i,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,a,i,n,s))}},function(n,e,t){var r=t(75),o=t(182),a=t(76);n.exports=function(n,e,t,i,s,l){var c=1&t,u=n.length,p=e.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(n),m=l.get(e);if(d&&m)return d==e&&m==n;var h=-1,f=!0,v=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++h<u;){var g=n[h],y=e[h];if(i)var b=c?i(y,g,h,e,n,l):i(g,y,h,n,e,l);if(void 0!==b){if(b)continue;f=!1;break}if(v){if(!o(e,(function(n,e){if(!a(v,e)&&(g===n||s(g,n,t,i,l)))return v.push(e)}))){f=!1;break}}else if(g!==y&&!s(g,y,t,i,l)){f=!1;break}}return l.delete(n),l.delete(e),f}},function(n,e,t){var r=t(41),o=t(180),a=t(181);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(192),o=t(198),a=t(81);n.exports=function(n){return a(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(7),o=t(194),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||o;n.exports=l}).call(this,t(50)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(195),o=t(196),a=t(197),i=a&&a.isTypedArray,s=i?o(i):r;n.exports=s},function(n,e,t){var r=t(71),o=t(43);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(7),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(86),o=t(23);n.exports=function(n,e){for(var t=0,a=(e=r(e,n)).length;null!=n&&t<a;)n=n[o(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var r=t(5),o=t(44),a=t(209),i=t(212);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:a(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(145),o=t(150),a=t(221),i=t(229),s=t(238),l=t(103),c=a((function(n){var e=l(n);return s(e)&&(e=void 0),i(r(n,1,s,!0),o(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var a="",i=0,s=0;for(i=o.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(a+=t.substring(s,i)),s=i+1,a+=e}return s!==i?a+t.substring(s,i):a}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(241),t(8)),a=Object(o.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},o=(t(242),t(8)),a=Object(o.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e,t){"use strict";var r=t(1),o=t(17),a=t(100),i=t(37);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:e;if(r(t)&&a(t,c,s),s.global)l?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:o.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r=t(136),o=String;n.exports=function(n){if("Symbol"===r(n))throw new TypeError("Cannot convert a Symbol value to a string");return o(n)}},function(n,e,t){"use strict";var r=t(0),o=t(6),a=r.document,i=o(a)&&o(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){"use strict";var r=t(4),o=t(3);n.exports=r&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var r=t(2),o=t(3),a=t(1),i=t(9),s=t(4),l=t(112).CONFIGURABLE,c=t(113),u=t(114),p=u.enforce,d=u.get,m=String,h=Object.defineProperty,f=r("".slice),v=r("".replace),g=r([].join),y=s&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),b=String(String).split("String"),x=n.exports=function(n,e,t){"Symbol("===f(m(e),0,7)&&(e="["+v(m(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||l&&n.name!==e)&&(s?h(n,"name",{value:e,configurable:!0}):n.name=e),y&&t&&i(t,"arity")&&n.length!==t.arity&&h(n,"length",{value:t.arity});try{t&&i(t,"constructor")&&t.constructor?s&&h(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=p(n);return i(r,"source")||(r.source=g(b,"string"==typeof e?e:"")),n};Function.prototype.toString=x((function(){return a(this)&&d(this).source||c(this)}),"toString")},function(n,e,t){"use strict";var r=t(60),o=t(62),a=r("keys");n.exports=function(n){return a[n]||(a[n]=o(n))}},function(n,e,t){"use strict";var r=t(2),o=t(9),a=t(27),i=t(118).indexOf,s=t(49),l=r([].push);n.exports=function(n,e){var t,r=a(n),c=0,u=[];for(t in r)!o(s,t)&&o(r,t)&&l(u,t);for(;e.length>c;)o(r,t=e[c++])&&(~i(u,t)||l(u,t));return u}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(247)},function(n,e,t){"use strict";var r=t(25),o=t(124).left,a=t(125),i=t(59);r({target:"Array",proto:!0,forced:!t(126)&&i>79&&i<83||!a("reduce")},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!r.call({1:2},1);e.f=a?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){"use strict";var r=t(33),o=t(6),a=t(55),i=t(109),s=t(111),l=t(30),c=TypeError,u=l("toPrimitive");n.exports=function(n,e){if(!o(n)||a(n))return n;var t,l=i(n,u);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!o(t)||a(t))return t;throw new c("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){"use strict";n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){"use strict";var r=t(29),o=t(53);n.exports=function(n,e){var t=n[e];return o(t)?void 0:r(t)}},function(n,e,t){"use strict";var r=String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var r=t(33),o=t(1),a=t(6),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&o(t=n.toString)&&!a(s=r(t,n)))return s;if(o(t=n.valueOf)&&!a(s=r(t,n)))return s;if("string"!==e&&o(t=n.toString)&&!a(s=r(t,n)))return s;throw new i("Can't convert object to primitive value")}},function(n,e,t){"use strict";var r=t(4),o=t(9),a=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=o(a,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&i(a,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){"use strict";var r=t(2),o=t(1),a=t(36),i=r(Function.toString);o(a.inspectSource)||(a.inspectSource=function(n){return i(n)}),n.exports=a.inspectSource},function(n,e,t){"use strict";var r,o,a,i=t(115),s=t(0),l=t(6),c=t(14),u=t(9),p=t(36),d=t(101),m=t(49),h=s.TypeError,f=s.WeakMap;if(i||p.state){var v=p.state||(p.state=new f);v.get=v.get,v.has=v.has,v.set=v.set,r=function(n,e){if(v.has(n))throw new h("Object already initialized");return e.facade=n,v.set(n,e),e},o=function(n){return v.get(n)||{}},a=function(n){return v.has(n)}}else{var g=d("state");m[g]=!0,r=function(n,e){if(u(n,g))throw new h("Object already initialized");return e.facade=n,c(n,g,e),e},o=function(n){return u(n,g)?n[g]:{}},a=function(n){return u(n,g)}}n.exports={set:r,get:o,has:a,enforce:function(n){return a(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=o(e)).type!==n)throw new h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(0),o=t(1),a=r.WeakMap;n.exports=o(a)&&/native code/.test(String(a))},function(n,e,t){"use strict";var r=t(28),o=t(2),a=t(117),i=t(122),s=t(47),l=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=a.f(s(n)),t=i.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var r=t(102),o=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){"use strict";var r=t(27),o=t(119),a=t(32),i=function(n){return function(e,t,i){var s=r(e),l=a(s);if(0===l)return!n&&-1;var c,u=o(i,l);if(n&&t!=t){for(;l>u;)if((c=s[u++])!=c)return!0}else for(;l>u;u++)if((n||u in s)&&s[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){"use strict";var r=t(65),o=Math.max,a=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):a(t,e)}},function(n,e,t){"use strict";var r=Math.ceil,o=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?o:r)(e)}},function(n,e,t){"use strict";var r=t(65),o=Math.min;n.exports=function(n){var e=r(n);return e>0?o(e,9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var r=t(3),o=t(1),a=/#|\.prototype\./,i=function(n,e){var t=l[s(n)];return t===u||t!==c&&(o(e)?r(e):!!e)},s=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},l=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";n.exports=i},function(n,e,t){"use strict";var r=t(29),o=t(31),a=t(48),i=t(32),s=TypeError,l="Reduce of empty array with no initial value",c=function(n){return function(e,t,c,u){var p=o(e),d=a(p),m=i(p);if(r(t),0===m&&c<2)throw new s(l);var h=n?m-1:0,f=n?-1:1;if(c<2)for(;;){if(h in d){u=d[h],h+=f;break}if(h+=f,n?h<0:m<=h)throw new s(l)}for(;n?h>=0:m>h;h+=f)h in d&&(u=t(u,d[h],h,p));return u}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(0),o=t(18);n.exports="process"===o(r.process)},function(n,e,t){"use strict";var r=t(25),o=t(0),a=t(128),i=t(129),s=o.WebAssembly,l=7!==new Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=i(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return a(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),c("URIError",(function(n){return function(e){return a(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e,t){"use strict";var r=t(26),o=Function.prototype,a=o.apply,i=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(a):function(){return i.apply(a,arguments)})},function(n,e,t){"use strict";var r=t(28),o=t(9),a=t(14),i=t(56),s=t(66),l=t(64),c=t(133),u=t(134),p=t(135),d=t(138),m=t(139),h=t(4),f=t(61);n.exports=function(n,e,t,v){var g=v?2:1,y=n.split("."),b=y[y.length-1],x=r.apply(null,y);if(x){var w=x.prototype;if(!f&&o(w,"cause")&&delete w.cause,!t)return x;var _=r("Error"),k=e((function(n,e){var t=p(v?e:n,void 0),r=v?new x(n):new x;return void 0!==t&&a(r,"message",t),m(r,k,r.stack,2),this&&i(w,this)&&u(r,this,k),arguments.length>g&&d(r,arguments[g]),r}));if(k.prototype=w,"Error"!==b?s?s(k,_):l(k,_,{name:!0}):h&&"stackTraceLimit"in x&&(c(k,x,"stackTraceLimit"),c(k,x,"prepareStackTrace")),l(k,x),!f)try{w.name!==b&&a(w,"name",b),w.constructor=k}catch(n){}return k}}},function(n,e,t){"use strict";var r=t(2),o=t(29);n.exports=function(n,e,t){try{return r(o(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var r=t(132),o=String,a=TypeError;n.exports=function(n){if(r(n))return n;throw new a("Can't set "+o(n)+" as a prototype")}},function(n,e,t){"use strict";var r=t(6);n.exports=function(n){return r(n)||null===n}},function(n,e,t){"use strict";var r=t(17).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(1),o=t(6),a=t(66);n.exports=function(n,e,t){var i,s;return a&&r(i=e.constructor)&&i!==t&&o(s=i.prototype)&&s!==t.prototype&&a(n,s),n}},function(n,e,t){"use strict";var r=t(97);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){"use strict";var r=t(137),o=t(1),a=t(18),i=t(30)("toStringTag"),s=Object,l="Arguments"===a(function(){return arguments}());n.exports=r?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:l?a(e):"Object"===(r=a(e))&&o(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r={};r[t(30)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){"use strict";var r=t(6),o=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){"use strict";var r=t(14),o=t(140),a=t(141),i=Error.captureStackTrace;n.exports=function(n,e,t,s){a&&(i?i(n,e):r(n,"stack",o(t,s)))}},function(n,e,t){"use strict";var r=t(2),o=Error,a=r("".replace),i=String(new o("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(i);n.exports=function(n,e){if(l&&"string"==typeof n&&!o.prepareStackTrace)for(;e--;)n=a(n,s,"");return n}},function(n,e,t){"use strict";var r=t(3),o=t(34);n.exports=!r((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(4),o=t(143),a=TypeError,i=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(o(n)&&!i(n,"length").writable)throw new a("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var r=t(18);n.exports=Array.isArray||function(n){return"Array"===r(n)}},function(n,e,t){"use strict";var r=TypeError;n.exports=function(n){if(n>9007199254740991)throw r("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(67),o=t(146);n.exports=function n(e,t,a,i,s){var l=-1,c=e.length;for(a||(a=o),s||(s=[]);++l<c;){var u=e[l];t>0&&a(u)?t>1?n(u,t-1,a,i,s):r(s,u):i||(s[s.length]=u)}return s}},function(n,e,t){var r=t(15),o=t(38),a=t(5),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||o(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(13),o=t(12);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=a.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=i.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(151),o=t(207),a=t(46),i=t(5),s=t(218);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(152),o=t(206),a=t(84);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(69),o=t(73);n.exports=function(n,e,t,a){var i=t.length,s=i,l=!a;if(null==n)return!s;for(n=Object(n);i--;){var c=t[i];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++i<s;){var u=(c=t[i])[0],p=n[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in n))return!1}else{var m=new r;if(a)var h=a(p,d,u,n,e,m);if(!(void 0===h?o(d,p,3,a,m):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(20),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(20);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(20);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(19);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(19),o=t(39),a=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!o||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(71),o=t(164),a=t(40),i=t(72),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||o(n))&&(r(n)?d:s).test(i(n))}},function(n,e,t){var r,o=t(165),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var r=t(7)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(168),o=t(19),a=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(n,e,t){var r=t(169),o=t(170),a=t(171),i=t(172),s=t(173);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(21),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(21),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(22);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(69),o=t(74),a=t(183),i=t(186),s=t(202),l=t(5),c=t(78),u=t(80),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,h,f){var v=l(n),g=l(e),y=v?"[object Array]":s(n),b=g?"[object Array]":s(e),x=(y="[object Arguments]"==y?p:y)==p,w=(b="[object Arguments]"==b?p:b)==p,_=y==b;if(_&&c(n)){if(!c(e))return!1;v=!0,x=!1}if(_&&!x)return f||(f=new r),v||u(n)?o(n,e,t,m,h,f):a(n,e,y,t,m,h,f);if(!(1&t)){var k=x&&d.call(n,"__wrapped__"),T=w&&d.call(e,"__wrapped__");if(k||T){var $=k?n.value():n,S=T?e.value():e;return f||(f=new r),h($,S,t,m,f)}}return!!_&&(f||(f=new r),i(n,e,t,m,h,f))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),o=t(184),a=t(70),i=t(74),s=t(185),l=t(42),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var h=1&r;if(m||(m=l),n.size!=e.size&&!h)return!1;var f=d.get(n);if(f)return f==e;r|=2,d.set(n,e);var v=i(m(n),m(e),r,c,p,d);return d.delete(n),v;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(7).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(187),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,s){var l=1&t,c=r(n),u=c.length;if(u!=r(e).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in e:o.call(e,d)))return!1}var m=s.get(n),h=s.get(e);if(m&&h)return m==e&&h==n;var f=!0;s.set(n,e),s.set(e,n);for(var v=l;++p<u;){var g=n[d=c[p]],y=e[d];if(a)var b=l?a(y,g,d,e,n,s):a(g,y,d,n,e,s);if(!(void 0===b?g===y||i(g,y,t,a,s):b)){f=!1;break}v||(v="constructor"==d)}if(f&&!v){var x=n.constructor,w=e.constructor;x==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(f=!1)}return s.delete(n),s.delete(e),f}},function(n,e,t){var r=t(188),o=t(189),a=t(77);n.exports=function(n){return r(n,a,o)}},function(n,e,t){var r=t(67),o=t(5);n.exports=function(n,e,t){var a=e(n);return o(n)?a:r(a,t(n))}},function(n,e,t){var r=t(190),o=t(191),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return a.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,a=[];++t<r;){var i=n[t];e(i,t,n)&&(a[o++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(193),o=t(38),a=t(5),i=t(78),s=t(79),l=t(80),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),u=!t&&o(n),p=!t&&!u&&i(n),d=!t&&!u&&!p&&l(n),m=t||u||p||d,h=m?r(n.length,String):[],f=h.length;for(var v in n)!e&&!c.call(n,v)||m&&("length"==v||p&&("offset"==v||"parent"==v)||d&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||s(v,f))||h.push(v);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),o=t(43),a=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&o(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(68),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===o&&r.process,s=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(50)(n))},function(n,e,t){var r=t(199),o=t(200),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(201)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(203),o=t(39),a=t(204),i=t(82),s=t(205),l=t(13),c=t(72),u=c(r),p=c(o),d=c(a),m=c(i),h=c(s),f=l;(r&&"[object DataView]"!=f(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=f(new o)||a&&"[object Promise]"!=f(a.resolve())||i&&"[object Set]"!=f(new i)||s&&"[object WeakMap]"!=f(new s))&&(f=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=f},function(n,e,t){var r=t(10)(t(7),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(7),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(7),"WeakMap");n.exports=r},function(n,e,t){var r=t(83),o=t(77);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,r(i)]}return e}},function(n,e,t){var r=t(73),o=t(208),a=t(215),i=t(44),s=t(83),l=t(84),c=t(23);n.exports=function(n,e){return i(n)&&s(e)?l(c(n),e):function(t){var i=o(t,n);return void 0===i&&i===e?a(t,n):r(e,i,3)}}},function(n,e,t){var r=t(85);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(210),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(211);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],a=t.cache;if(a.has(o))return a.get(o);var i=n.apply(this,r);return t.cache=a.set(o,i)||a,i};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(213);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),o=t(214),a=t(5),i=t(45),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return o(e,n)+"";if(i(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(216),o=t(217);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(86),o=t(38),a=t(5),i=t(79),s=t(43),l=t(23);n.exports=function(n,e,t){for(var c=-1,u=(e=r(e,n)).length,p=!1;++c<u;){var d=l(e[c]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++c!=u?p:!!(u=null==n?0:n.length)&&s(u)&&i(d,u)&&(a(n)||o(n))}},function(n,e,t){var r=t(219),o=t(220),a=t(44),i=t(23);n.exports=function(n){return a(n)?r(i(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(85);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),o=t(222),a=t(224);n.exports=function(n,e){return a(o(n,e,r),n+"")}},function(n,e,t){var r=t(223),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,s=o(a.length-e,0),l=Array(s);++i<s;)l[i]=a[e+i];i=-1;for(var c=Array(e+1);++i<e;)c[i]=a[i];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(225),o=t(228)(r);n.exports=o},function(n,e,t){var r=t(226),o=t(227),a=t(46),i=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),a=16-(o-r);if(r=o,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(75),o=t(230),a=t(235),i=t(76),s=t(236),l=t(42);n.exports=function(n,e,t){var c=-1,u=o,p=n.length,d=!0,m=[],h=m;if(t)d=!1,u=a;else if(p>=200){var f=e?null:s(n);if(f)return l(f);d=!1,u=i,h=new r}else h=e?[]:m;n:for(;++c<p;){var v=n[c],g=e?e(v):v;if(v=t||0!==v?v:0,d&&g==g){for(var y=h.length;y--;)if(h[y]===g)continue n;e&&h.push(g),m.push(v)}else u(h,g,t)||(h!==m&&h.push(g),m.push(v))}return m}},function(n,e,t){var r=t(231);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(232),o=t(233),a=t(234);n.exports=function(n,e,t){return e==e?a(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,a=t+(r?1:-1);r?a--:++a<o;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(82),o=t(237),a=t(42),i=r&&1/a(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(81),o=t(12);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(87)},function(n,e,t){"use strict";t(88)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.16
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),o=Array.isArray;function a(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function m(n){return"[object RegExp]"===p.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function f(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function v(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,g,2):String(n)}function g(n,e){return e&&e.__v_isRef?e.value:e}function y(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var x=b("key,ref,slot,slot-scope,is");function w(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var _=Object.prototype.hasOwnProperty;function k(n,e){return _.call(n,e)}function T(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var $=/-(\w)/g,S=T((function(n){return n.replace($,(function(n,e){return e?e.toUpperCase():""}))})),j=T((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),C=/\B([A-Z])/g,E=T((function(n){return n.replace(C,"-$1").toLowerCase()}));var I=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function z(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function O(n,e){for(var t in e)n[t]=e[t];return n}function q(n){for(var e={},t=0;t<n.length;t++)n[t]&&O(e,n[t]);return e}function A(n,e,t){}var P=function(n,e,t){return!1},R=function(n){return n};function M(n,e){if(n===e)return!0;var t=u(n),r=u(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),a=Array.isArray(e);if(o&&a)return n.length===e.length&&n.every((function(n,t){return M(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||a)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return M(n[t],e[t])}))}catch(n){return!1}}function L(n,e){for(var t=0;t<n.length;t++)if(M(n[t],e))return t;return-1}function D(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function N(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var U=["component","directive","filter"],V=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:A,parsePlatformTagName:R,mustUseProp:P,async:!0,_lifecycleHooks:V},F=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function W(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var Q=new RegExp("[^".concat(F.source,".$_\\d]"));var G="__proto__"in{},J="undefined"!=typeof window,K=J&&window.navigator.userAgent.toLowerCase(),Y=K&&/msie|trident/.test(K),X=K&&K.indexOf("msie 9.0")>0,Z=K&&K.indexOf("edge/")>0;K&&K.indexOf("android");var nn=K&&/iphone|ipad|ipod|ios/.test(K);K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K);var en,tn=K&&K.match(/firefox\/(\d+)/),rn={}.watch,on=!1;if(J)try{var an={};Object.defineProperty(an,"passive",{get:function(){on=!0}}),window.addEventListener("test-passive",null,an)}catch(n){}var sn=function(){return void 0===en&&(en=!J&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),en},ln=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function cn(n){return"function"==typeof n&&/native code/.test(n.toString())}var un,pn="undefined"!=typeof Symbol&&cn(Symbol)&&"undefined"!=typeof Reflect&&cn(Reflect.ownKeys);un="undefined"!=typeof Set&&cn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function mn(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var hn=function(){function n(n,e,t,r,o,a,i,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),fn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function vn(n){return new hn(void 0,void 0,void 0,String(n))}function gn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var yn=0,bn=[],xn=function(){function n(){this._pending=!1,this.id=yn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,bn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();xn.target=null;var wn=[];function _n(n){wn.push(n),xn.target=n}function kn(){wn.pop(),xn.target=wn[wn.length-1]}var Tn=Array.prototype,$n=Object.create(Tn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=Tn[n];W($n,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var Sn=Object.getOwnPropertyNames($n),jn={},Cn=!0;function En(n){Cn=n}var In={notify:A,depend:A,addSub:A,removeSub:A},zn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?In:new xn,this.vmCount=0,W(n,"__ob__",this),o(n)){if(!t)if(G)n.__proto__=$n;else for(var r=0,a=Sn.length;r<a;r++){W(n,s=Sn[r],$n[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(r=0;r<i.length;r++){var s;qn(n,s=i[r],jn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)On(n[e],!1,this.mock)},n}();function On(n,e,t){return n&&k(n,"__ob__")&&n.__ob__ instanceof zn?n.__ob__:!Cn||!t&&sn()||!o(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||Nn(n)||n instanceof hn?void 0:new zn(n,e,t)}function qn(n,e,t,r,a,i,s){void 0===s&&(s=!1);var l=new xn,c=Object.getOwnPropertyDescriptor(n,e);if(!c||!1!==c.configurable){var u=c&&c.get,p=c&&c.set;u&&!p||t!==jn&&2!==arguments.length||(t=n[e]);var d=a?t&&t.__ob__:On(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=u?u.call(n):t;return xn.target&&(l.depend(),d&&(d.dep.depend(),o(e)&&Rn(e))),Nn(e)&&!a?e.value:e},set:function(e){var r=u?u.call(n):t;if(N(r,e)){if(p)p.call(n,e);else{if(u)return;if(!a&&Nn(r)&&!Nn(e))return void(r.value=e);t=e}d=a?e&&e.__ob__:On(e,!1,i),l.notify()}}}),l}}function An(n,e,t){if(!Dn(n)){var r=n.__ob__;return o(n)&&h(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&On(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(qn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Pn(n,e){if(o(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Dn(n)||k(n,e)&&(delete n[e],t&&t.dep.notify())}}function Rn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),o(e)&&Rn(e)}function Mn(n){return Ln(n,!0),W(n,"__v_isShallow",!0),n}function Ln(n,e){if(!Dn(n)){On(n,e,sn());0}}function Dn(n){return!(!n||!n.__v_isReadonly)}function Nn(n){return!(!n||!0!==n.__v_isRef)}function Un(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Nn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Nn(r)&&!Nn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Vn;var Bn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Vn,!n&&Vn&&(this.index=(Vn.scopes||(Vn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Vn;try{return Vn=this,n()}finally{Vn=e}}else 0},n.prototype.on=function(){Vn=this},n.prototype.off=function(){Vn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Fn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=T((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Wn(n,e){function t(){var n=t.fns;if(!o(n))return Ce(n,null,arguments,e,"v-on handler");for(var r=n.slice(),a=0;a<r.length;a++)Ce(r[a],null,arguments,e,"v-on handler")}return t.fns=n,t}function Qn(n,e,t,r,o,i){var l,c,u,p;for(l in n)c=n[l],u=e[l],p=Hn(l),a(c)||(a(u)?(a(c.fns)&&(c=n[l]=Wn(c,i)),s(p.once)&&(c=n[l]=o(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)a(n[l])&&r((p=Hn(l)).name,e[l],p.capture)}function Gn(n,e,t){var r;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function l(){t.apply(this,arguments),w(r.fns,l)}a(o)?r=Wn([l]):i(o.fns)&&s(o.merged)?(r=o).fns.push(l):r=Wn([o,l]),r.merged=!0,n[e]=r}function Jn(n,e,t,r,o){if(i(e)){if(k(e,t))return n[t]=e[t],o||delete e[t],!0;if(k(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function Kn(n){return l(n)?[vn(n)]:o(n)?function n(e,t){var r,c,u,p,d=[];for(r=0;r<e.length;r++)a(c=e[r])||"boolean"==typeof c||(u=d.length-1,p=d[u],o(c)?c.length>0&&(Yn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Yn(p)&&(d[u]=vn(p.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Yn(p)?d[u]=vn(p.text+c):""!==c&&d.push(vn(c)):Yn(c)&&Yn(p)?d[u]=vn(p.text+c.text):(s(e._isVList)&&i(c.tag)&&a(c.key)&&i(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),d.push(c)));return d}(n):void 0}function Yn(n){return i(n)&&i(n.text)&&!1===n.isComment}function Xn(n,e){var t,r,a,s,l=null;if(o(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(u(n))if(pn&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(a=Object.keys(n),l=new Array(a.length),t=0,r=a.length;t<r;t++)s=a[t],l[t]=e(n[s],s,t);return i(l)||(l=[]),l._isVList=!0,l}function Zn(n,e,t,r){var o,a=this.$scopedSlots[n];a?(t=t||{},r&&(t=O(O({},r),t)),o=a(t)||(c(e)?e():e)):o=this.$slots[n]||(c(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},o):o}function ne(n){return zt(this.$options,"filters",n,!0)||R}function ee(n,e){return o(n)?-1===n.indexOf(e):n!==e}function te(n,e,t,r,o){var a=B.keyCodes[e]||t;return o&&r&&!B.keyCodes[e]?ee(o,r):a?ee(a,n):r?E(r)!==e:void 0===n}function re(n,e,t,r,a){if(t)if(u(t)){o(t)&&(t=q(t));var i=void 0,s=function(o){if("class"===o||"style"===o||x(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||B.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=S(o),c=E(o);l in i||c in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:".concat(o)]=function(n){t[o]=n}))};for(var l in t)s(l)}else;return n}function oe(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ie(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function ae(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(o(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&se(n[r],"".concat(e,"_").concat(r),t);else se(n,e,t)}function se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function le(n,e){if(e)if(d(e)){var t=n.on=n.on?O({},n.on):{};for(var r in e){var o=t[r],a=e[r];t[r]=o?[].concat(o,a):a}}else;return n}function ce(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];o(i)?ce(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function ue(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function pe(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=ae,n._n=y,n._s=v,n._l=Xn,n._t=Zn,n._q=M,n._i=L,n._m=oe,n._f=ne,n._k=te,n._b=re,n._v=vn,n._e=fn,n._u=ce,n._g=le,n._d=ue,n._p=pe}function me(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var a=n[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var s=i.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(he)&&delete t[c];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function fe(n){return n.isComment&&n.asyncFactory}function ve(n,e,t,o){var a,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&o&&o!==r&&l===o.$key&&!i&&!o.$hasNormal)return o;for(var c in a={},e)e[c]&&"$"!==c[0]&&(a[c]=ge(n,t,c,e[c]))}else a={};for(var u in t)u in a||(a[u]=ye(t,u));return e&&Object.isExtensible(e)&&(e._normalized=a),W(a,"$stable",s),W(a,"$key",l),W(a,"$hasNormal",i),a}function ge(n,e,t,r){var a=function(){var e=dn;mn(n);var t=arguments.length?r.apply(null,arguments):r({}),a=(t=t&&"object"==typeof t&&!o(t)?[t]:Kn(t))&&t[0];return mn(e),t&&(!a||1===t.length&&a.isComment&&!fe(a))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function ye(n,e){return function(){return n[e]}}function be(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};W(e,"_v_attr_proxy",!0),xe(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||xe(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||_e(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:I(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Un(n,e,t)}))}}}function xe(n,e,t,r,o){var a=!1;for(var i in e)i in n?e[i]!==t[i]&&(a=!0):(a=!0,we(n,i,r,o));for(var i in n)i in e||(a=!0,delete n[i]);return a}function we(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function _e(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var ke=null;function Te(n,e){return(n.__esModule||pn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function $e(n){if(o(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||fe(t)))return t}}function Se(n,e,t,r,p,d){return(o(t)||l(t))&&(p=r,r=t,t=void 0),s(d)&&(p=2),function(n,e,t,r,l){if(i(t)&&i(t.__ob__))return fn();i(t)&&i(t.is)&&(e=t.is);if(!e)return fn();0;o(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Kn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(o(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var p,d;if("string"==typeof e){var m=void 0;d=n.$vnode&&n.$vnode.ns||B.getTagNamespace(e),p=B.isReservedTag(e)?new hn(B.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(m=zt(n.$options,"components",e))?new hn(e,t,r,void 0,void 0,n):wt(m,t,n,r,e)}else p=wt(e,t,n,r);return o(p)?p:i(p)?(i(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var o=0,l=e.children.length;o<l;o++){var c=e.children[o];i(c.tag)&&(a(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(p,d),i(t)&&function(n){u(n.style)&&Be(n.style);u(n.class)&&Be(n.class)}(t),p):fn()}(n,e,t,r,p)}function je(n,e,t){_n();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,n,e,t))return}catch(n){Ee(n,r,"errorCaptured hook")}}Ee(n,e,t)}finally{kn()}}function Ce(n,e,t,r,o){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(n){return je(n,r,o+" (Promise/async)")})),a._handled=!0)}catch(n){je(n,r,o)}return a}function Ee(n,e,t){if(B.errorHandler)try{return B.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ie(e,null,"config.errorHandler")}Ie(n,e,t)}function Ie(n,e,t){if(!J||"undefined"==typeof console)throw n;console.error(n)}var ze,Oe=!1,qe=[],Ae=!1;function Pe(){Ae=!1;var n=qe.slice(0);qe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&cn(Promise)){var Re=Promise.resolve();ze=function(){Re.then(Pe),nn&&setTimeout(A)},Oe=!0}else if(Y||"undefined"==typeof MutationObserver||!cn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ze="undefined"!=typeof setImmediate&&cn(setImmediate)?function(){setImmediate(Pe)}:function(){setTimeout(Pe,0)};else{var Me=1,Le=new MutationObserver(Pe),De=document.createTextNode(String(Me));Le.observe(De,{characterData:!0}),ze=function(){Me=(Me+1)%2,De.data=String(Me)},Oe=!0}function Ne(n,e){var t;if(qe.push((function(){if(n)try{n.call(e)}catch(n){je(n,e,"nextTick")}else t&&t(e)})),Ae||(Ae=!0,ze()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Ue(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var r=n.$options;r[e]=jt(r[e],t)}(t,n,e)}}Ue("beforeMount"),Ue("mounted"),Ue("beforeUpdate"),Ue("updated"),Ue("beforeDestroy"),Ue("destroyed"),Ue("activated"),Ue("deactivated"),Ue("serverPrefetch"),Ue("renderTracked"),Ue("renderTriggered"),Ue("errorCaptured");var Ve=new un;function Be(n){return function n(e,t){var r,a,i=o(e);if(!i&&!u(e)||e.__v_skip||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(r=e.length;r--;)n(e[r],t);else if(Nn(e))n(e.value,t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,Ve),Ve.clear(),n}var Fe,He=0,We=function(){function n(n,e,t,r,o){var a,i;a=this,void 0===(i=Vn&&!Vn._vm?Vn:n?n._scope:void 0)&&(i=Vn),i&&i.active&&i.effects.push(a),(this.vm=n)&&o&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new un,this.newDepIds=new un,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!Q.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=A)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;_n(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;je(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Be(n),kn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():mt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ce(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&w(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Qe(n,e){Fe.$on(n,e)}function Ge(n,e){Fe.$off(n,e)}function Je(n,e){var t=Fe;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Ke(n,e,t){Fe=n,Qn(e,t||{},Qe,Ge,Je,n),Fe=void 0}var Ye=null;function Xe(n){var e=Ye;return Ye=n,function(){Ye=e}}function Ze(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Ze(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e,t,r){void 0===r&&(r=!0),_n();var o=dn,a=Vn;r&&mn(n);var i=n.$options[e],s="".concat(e," hook");if(i)for(var l=0,c=i.length;l<c;l++)Ce(i[l],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),r&&(mn(o),a&&a.on()),kn()}var tt=[],rt=[],ot={},at=!1,it=!1,st=0;var lt=0,ct=Date.now;if(J&&!Y){var ut=window.performance;ut&&"function"==typeof ut.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return ut.now()})}var pt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(lt=ct(),it=!0,tt.sort(pt),st=0;st<tt.length;st++)(n=tt[st]).before&&n.before(),e=n.id,ot[e]=null,n.run();var t=rt.slice(),r=tt.slice();st=tt.length=rt.length=0,ot={},at=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&et(r,"updated")}}(r),function(){for(var n=0;n<bn.length;n++){var e=bn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}bn.length=0}(),ln&&B.devtools&&ln.emit("flush")}function mt(n){var e=n.id;if(null==ot[e]&&(n!==xn.target||!n.noRecurse)){if(ot[e]=!0,it){for(var t=tt.length-1;t>st&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);at||(at=!0,Ne(dt))}}function ht(n,e){if(n){for(var t=Object.create(null),r=pn?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){var i=n[a].from;if(i in e._provided)t[a]=e._provided[i];else if("default"in n[a]){var s=n[a].default;t[a]=c(s)?s.call(e):s}else 0}}return t}}function ft(n,e,t,a,i){var l,c=this,u=i.options;k(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var p=s(u._compiled),d=!p;this.data=n,this.props=e,this.children=t,this.parent=a,this.listeners=n.on||r,this.injections=ht(u.inject,a),this.slots=function(){return c.$slots||ve(a,n.scopedSlots,c.$slots=me(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ve(a,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ve(a,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,e,t,r){var i=Se(l,n,e,t,r,d);return i&&!o(i)&&(i.fnScopeId=u._scopeId,i.fnContext=a),i}:this._c=function(n,e,t,r){return Se(l,n,e,t,r,d)}}function vt(n,e,t,r,o){var a=gn(n);return a.fnContext=t,a.fnOptions=r,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function gt(n,e){for(var t in e)n[S(t)]=e[t]}function yt(n){return n.name||n.__name||n._componentTag}de(ft.prototype);var bt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;bt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ye)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,o,a){var i=o.data.scopedSlots,s=n.$scopedSlots,l=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),c=!!(a||n.$options._renderChildren||l),u=n.$vnode;n.$options._parentVnode=o,n.$vnode=o,n._vnode&&(n._vnode.parent=o),n.$options._renderChildren=a;var p=o.data.attrs||r;n._attrsProxy&&xe(n._attrsProxy,p,u.data&&u.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||r;var d=n.$options._parentListeners;if(n._listenersProxy&&xe(n._listenersProxy,t,d||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Ke(n,t,d),e&&n.$options.props){En(!1);for(var m=n._props,h=n.$options._propKeys||[],f=0;f<h.length;f++){var v=h[f],g=n.$options.props;m[v]=Ot(v,g,e,n)}En(!0),n.$options.propsData=e}c&&(n.$slots=me(a,o.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,et(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,rt.push(e)):nt(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ze(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);et(e,"deactivated")}}(e,!0):e.$destroy())}},xt=Object.keys(bt);function wt(n,e,t,l,c){if(!a(n)){var p=t.$options._base;if(u(n)&&(n=p.extend(n)),"function"==typeof n){var d;if(a(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=ke;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],o=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return w(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=D((function(t){n.resolved=Te(t,e),o?r.length=0:p(!0)})),m=D((function(e){i(n.errorComp)&&(n.error=!0,p(!0))})),h=n(d,m);return u(h)&&(f(h)?a(n.resolved)&&h.then(d,m):f(h.component)&&(h.component.then(d,m),i(h.error)&&(n.errorComp=Te(h.error,e)),i(h.loading)&&(n.loadingComp=Te(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),i(h.timeout)&&(c=setTimeout((function(){c=null,a(n.resolved)&&m(null)}),h.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(d=n,p)))return function(n,e,t,r,o){var a=fn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:r,tag:o},a}(d,e,t,l,c);e=e||{},Wt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),s=a[r],l=e.model.callback;i(s)?(o(s)?-1===s.indexOf(l):s!==l)&&(a[r]=[l].concat(s)):a[r]=l}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!a(r)){var o={},s=n.attrs,l=n.props;if(i(s)||i(l))for(var c in r){var u=E(c);Jn(o,l,c,u,!0)||Jn(o,s,c,u,!1)}return o}}(e,n);if(s(n.options.functional))return function(n,e,t,a,s){var l=n.options,c={},u=l.props;if(i(u))for(var p in u)c[p]=Ot(p,u,e||r);else i(t.attrs)&&gt(c,t.attrs),i(t.props)&&gt(c,t.props);var d=new ft(t,c,s,a,n),m=l.render.call(null,d._c,d);if(m instanceof hn)return vt(m,t,d.parent,l,d);if(o(m)){for(var h=Kn(m)||[],f=new Array(h.length),v=0;v<h.length;v++)f[v]=vt(h[v],t,d.parent,l,d);return f}}(n,m,e,t,l);var h=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var v=e.slot;e={},v&&(e.slot=v)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<xt.length;t++){var r=xt[t],o=e[r],a=bt[r];o===a||o&&o._merged||(e[r]=o?_t(a,o):a)}}(e);var g=yt(n.options)||c;return new hn("vue-component-".concat(n.cid).concat(g?"-".concat(g):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:h,tag:c,children:l},d)}}}function _t(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var kt=A,Tt=B.optionMergeStrategies;function $t(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,o,a,i=pn?Reflect.ownKeys(e):Object.keys(e),s=0;s<i.length;s++)"__ob__"!==(r=i[s])&&(o=n[r],a=e[r],t&&k(n,r)?o!==a&&d(o)&&d(a)&&$t(o,a):An(n,r,a));return n}function St(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,o=c(n)?n.call(t,t):n;return r?$t(r,o):o}:e?n?function(){return $t(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function jt(n,e){var t=e?n?n.concat(e):o(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Ct(n,e,t,r){var o=Object.create(n||null);return e?O(o,e):o}Tt.data=function(n,e,t){return t?St(n,e,t):e&&"function"!=typeof e?n:St(n,e)},V.forEach((function(n){Tt[n]=jt})),U.forEach((function(n){Tt[n+"s"]=Ct})),Tt.watch=function(n,e,t,r){if(n===rn&&(n=void 0),e===rn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in O(a,n),e){var s=a[i],l=e[i];s&&!o(s)&&(s=[s]),a[i]=s?s.concat(l):o(l)?l:[l]}return a},Tt.props=Tt.methods=Tt.inject=Tt.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return O(o,n),e&&O(o,e),o},Tt.provide=function(n,e){return n?function(){var t=Object.create(null);return $t(t,c(n)?n.call(this):n),e&&$t(t,c(e)?e.call(this):e,!1),t}:e};var Et=function(n,e){return void 0===e?n:e};function It(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(o(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[S(a)]={type:null});else if(d(t))for(var s in t)a=t[s],i[S(s)]=d(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(o(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(d(t))for(var i in t){var s=t[i];r[i]=d(s)?O({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=It(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=It(n,e.mixins[r],t);var i,s={};for(i in n)l(i);for(i in e)k(n,i)||l(i);function l(r){var o=Tt[r]||Et;s[r]=o(n[r],e[r],t,r)}return s}function zt(n,e,t,r){if("string"==typeof t){var o=n[e];if(k(o,t))return o[t];var a=S(t);if(k(o,a))return o[a];var i=j(a);return k(o,i)?o[i]:o[t]||o[a]||o[i]}}function Ot(n,e,t,r){var o=e[n],a=!k(t,n),i=t[n],s=Rt(Boolean,o.type);if(s>-1)if(a&&!k(o,"default"))i=!1;else if(""===i||i===E(n)){var l=Rt(String,o.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!k(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==At(e.type)?r.call(n):r}(r,o,n);var u=Cn;En(!0),On(i),En(u)}return i}var qt=/^\s*function (\w+)/;function At(n){var e=n&&n.toString().match(qt);return e?e[1]:""}function Pt(n,e){return At(n)===At(e)}function Rt(n,e){if(!o(e))return Pt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Pt(e[t],n))return t;return-1}var Mt={enumerable:!0,configurable:!0,get:A,set:A};function Lt(n,e,t){Mt.get=function(){return this[e][t]},Mt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Mt)}function Dt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Mn({}),o=n.$options._propKeys=[];n.$parent&&En(!1);var a=function(a){o.push(a);var i=Ot(a,e,t,n);qn(r,a,i,void 0,!0),a in n||Lt(n,"_props",a)};for(var i in e)a(i);En(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=be(n);mn(n),_n();var o=Ce(t,null,[n._props||Mn({}),r],n,"setup");if(kn(),mn(),c(o))e.render=o;else if(u(o))if(n._setupState=o,o.__sfc){var a=n._setupProxy={};for(var i in o)"__sfc"!==i&&Un(a,o,i)}else for(var i in o)H(i)||Un(n,o,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?A:I(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=c(e)?function(n,e){_n();try{return n.call(e,e)}catch(n){return je(n,e,"data()"),{}}finally{kn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var a=t[o];0,r&&k(r,a)||H(a)||Lt(n,"_data",a)}var i=On(e);i&&i.vmCount++}(n);else{var t=On(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var o in e){var a=e[o],i=c(a)?a:a.get;0,r||(t[o]=new We(n,i||A,A,Nt)),o in n||Ut(n,o,a)}}(n,e.computed),e.watch&&e.watch!==rn&&function(n,e){for(var t in e){var r=e[t];if(o(r))for(var a=0;a<r.length;a++)Ft(n,t,r[a]);else Ft(n,t,r)}}(n,e.watch)}var Nt={lazy:!0};function Ut(n,e,t){var r=!sn();c(t)?(Mt.get=r?Vt(e):Bt(t),Mt.set=A):(Mt.get=t.get?r&&!1!==t.cache?Vt(e):Bt(t.get):A,Mt.set=t.set||A),Object.defineProperty(n,e,Mt)}function Vt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),xn.target&&e.depend(),e.value}}function Bt(n){return function(){return n.call(this,this)}}function Ft(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ht=0;function Wt(n){var e=n.options;if(n.super){var t=Wt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&O(n.extendOptions,r),(e=n.options=It(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Qt(n){this._init(n)}function Gt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var a=yt(n)||yt(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=It(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)Lt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)Ut(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,U.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=O({},i.options),o[r]=i,i}}function Jt(n){return n&&(yt(n.Ctor.options)||n.tag)}function Kt(n,e){return o(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Yt(n,e){var t=n.cache,r=n.keys,o=n._vnode,a=n.$vnode;for(var i in t){var s=t[i];if(s){var l=s.name;l&&!e(l)&&Xt(t,i,r,o)}}a.componentOptions.children=void 0}function Xt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,w(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new Bn(!0),e._scope.parent=void 0,e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=It(Wt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ke(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,o=t&&t.context;n.$slots=me(e._renderChildren,o),n.$scopedSlots=t?ve(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,o){return Se(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Se(n,e,t,r,o,!0)};var a=t&&t.data;qn(n,"$attrs",a&&a.attrs||r,null,!0),qn(n,"$listeners",e._parentListeners||r,null,!0)}(e),et(e,"beforeCreate",void 0,!1),function(n){var e=ht(n.$options.inject,n);e&&(En(!1),Object.keys(e).forEach((function(t){qn(n,t,e[t])})),En(!0))}(e),Dt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!u(t))return;for(var r=Fn(n),o=pn?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++){var i=o[a];Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Qt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=An,n.prototype.$delete=Pn,n.prototype.$watch=function(n,e,t){if(d(e))return Ft(this,n,e,t);(t=t||{}).user=!0;var r=new We(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'.concat(r.expression,'"');_n(),Ce(e,this,[r.value],this,o),kn()}return function(){r.teardown()}}}(Qt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(o(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(o(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((i=s[l])===e||i.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?z(t):t;for(var r=z(arguments,1),o='event handler for "'.concat(n,'"'),a=0,i=t.length;a<i;a++)Ce(t[a],e,r,e,o)}return e}}(Qt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,a=Xe(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),a(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var i=t;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||w(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Qt),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return Ne(n,this)},n.prototype._render=function(){var n=this,e=n.$options,t=e.render,r=e._parentVnode;r&&n._isMounted&&(n.$scopedSlots=ve(n.$parent,r.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&_e(n._slotsProxy,n.$scopedSlots)),n.$vnode=r;var a,i=dn,s=ke;try{mn(n),ke=n,a=t.call(n._renderProxy,n.$createElement)}catch(e){je(e,n,"render"),a=n._vnode}finally{ke=s,mn(i)}return o(a)&&1===a.length&&(a=a[0]),a instanceof hn||(a=fn()),a.parent=r,a}}(Qt);var Zt=[String,RegExp,Array],nr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zt,exclude:Zt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,a=t.componentInstance,i=t.componentOptions;n[r]={name:Jt(i),tag:o,componentInstance:a},e.push(r),this.max&&e.length>parseInt(this.max)&&Xt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Yt(n,(function(n){return Kt(e,n)}))})),this.$watch("exclude",(function(e){Yt(n,(function(n){return!Kt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=$e(n),t=e&&e.componentOptions;if(t){var r=Jt(t),o=this.include,a=this.exclude;if(o&&(!r||!Kt(o,r))||a&&r&&Kt(a,r))return e;var i=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[l]?(e.componentInstance=i[l].componentInstance,w(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return B}};Object.defineProperty(n,"config",e),n.util={warn:kt,extend:O,mergeOptions:It,defineReactive:qn},n.set=An,n.delete=Pn,n.nextTick=Ne,n.observable=function(n){return On(n),n},n.options=Object.create(null),U.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,O(n.options.components,nr),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=z(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=It(this.options,n),this}}(n),Gt(n),function(n){U.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Qt),Object.defineProperty(Qt.prototype,"$isServer",{get:sn}),Object.defineProperty(Qt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Qt,"FunctionalRenderContext",{value:ft}),Qt.version="2.7.16";var er=b("style,class"),tr=b("input,textarea,option,select,progress"),rr=b("contenteditable,draggable,spellcheck"),or=b("events,caret,typing,plaintext-only"),ar=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ir="http://www.w3.org/1999/xlink",sr=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},lr=function(n){return sr(n)?n.slice(6,n.length):""},cr=function(n){return null==n||!1===n};function ur(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=pr(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=pr(e,t.data));return function(n,e){if(i(n)||i(e))return dr(n,mr(e));return""}(e.staticClass,e.class)}function pr(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function mr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)i(e=mr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var hr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fr=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),vr=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),gr=function(n){return fr(n)||vr(n)};var yr=Object.create(null);var br=b("text,number,password,search,email,tel,url");var xr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(hr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),wr={create:function(n,e){_r(e)},update:function(n,e){n.data.ref!==e.data.ref&&(_r(n,!0),_r(e))},destroy:function(n){_r(n,!0)}};function _r(n,e){var t=n.data.ref;if(i(t)){var r=n.context,a=n.componentInstance||n.elm,s=e?null:a,l=e?void 0:a;if(c(t))Ce(t,r,[s],r,"template ref function");else{var u=n.data.refInFor,p="string"==typeof t||"number"==typeof t,d=Nn(t),m=r.$refs;if(p||d)if(u){var h=p?m[t]:t.value;e?o(h)&&w(h,a):o(h)?h.includes(a)||h.push(a):p?(m[t]=[a],kr(r,t,m[t])):t.value=[a]}else if(p){if(e&&m[t]!==a)return;m[t]=l,kr(r,t,s)}else if(d){if(e&&t.value!==a)return;t.value=s}else 0}}}function kr(n,e,t){var r=n._setupState;r&&k(r,e)&&(Nn(r[e])?r[e].value=t:r[e]=t)}var Tr=new hn("",{},[]),$r=["create","activate","update","remove","destroy"];function Sr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,o=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===o||br(r)&&br(o)}(n,e)||s(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function jr(n,e,t){var r,o,a={};for(r=e;r<=t;++r)i(o=n[r].key)&&(a[o]=r);return a}var Cr={create:Er,update:Er,destroy:function(n){Er(n,Tr)}};function Er(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,a=n===Tr,i=e===Tr,s=zr(n.data.directives,n.context),l=zr(e.data.directives,e.context),c=[],u=[];for(t in l)r=s[t],o=l[t],r?(o.oldValue=r.value,o.oldArg=r.arg,qr(o,"update",e,n),o.def&&o.def.componentUpdated&&u.push(o)):(qr(o,"bind",e,n),o.def&&o.def.inserted&&c.push(o));if(c.length){var p=function(){for(var t=0;t<c.length;t++)qr(c[t],"inserted",e,n)};a?Gn(e,"insert",p):p()}u.length&&Gn(e,"postpatch",(function(){for(var t=0;t<u.length;t++)qr(u[t],"componentUpdated",e,n)}));if(!a)for(t in s)l[t]||qr(s[t],"unbind",n,n,i)}(n,e)}var Ir=Object.create(null);function zr(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Ir),o[Or(r)]=r,e._setupState&&e._setupState.__sfc){var a=r.def||zt(e,"_setupState","v-"+r.name);r.def="function"==typeof a?{bind:a,update:a}:a}r.def=r.def||zt(e.$options,"directives",r.name)}return o}function Or(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function qr(n,e,t,r,o){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,r,o)}catch(r){je(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Ar=[wr,Cr];function Pr(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var r,o,l=e.elm,c=n.data.attrs||{},u=e.data.attrs||{};for(r in(i(u.__ob__)||s(u._v_attr_proxy))&&(u=e.data.attrs=O({},u)),u)o=u[r],c[r]!==o&&Rr(l,r,o,e.data.pre);for(r in(Y||Z)&&u.value!==c.value&&Rr(l,"value",u.value),c)a(u[r])&&(sr(r)?l.removeAttributeNS(ir,lr(r)):rr(r)||l.removeAttribute(r))}}function Rr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Mr(n,e,t):ar(e)?cr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):rr(e)?n.setAttribute(e,function(n,e){return cr(e)||"false"===e?"false":"contenteditable"===n&&or(e)?e:"true"}(e,t)):sr(e)?cr(t)?n.removeAttributeNS(ir,lr(e)):n.setAttributeNS(ir,e,t):Mr(n,e,t)}function Mr(n,e,t){if(cr(t))n.removeAttribute(e);else{if(Y&&!X&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Lr={create:Pr,update:Pr};function Dr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(a(r.staticClass)&&a(r.class)&&(a(o)||a(o.staticClass)&&a(o.class)))){var s=ur(e),l=t._transitionClasses;i(l)&&(s=dr(s,mr(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Nr,Ur={create:Dr,update:Dr};function Vr(n,e,t){var r=Nr;return function o(){var a=e.apply(null,arguments);null!==a&&Hr(n,o,t,r)}}var Br=Oe&&!(tn&&Number(tn[1])<=53);function Fr(n,e,t,r){if(Br){var o=lt,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}Nr.addEventListener(n,e,on?{capture:t,passive:r}:t)}function Hr(n,e,t,r){(r||Nr).removeEventListener(n,e._wrapper||e,t)}function Wr(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Nr=e.elm||n.elm,function(n){if(i(n.__r)){var e=Y?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Qn(t,r,Fr,Hr,Vr,e.context),Nr=void 0}}var Qr,Gr={create:Wr,update:Wr,destroy:function(n){return Wr(n,Tr)}};function Jr(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,r,o=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(i(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.domProps=O({},c)),l)t in c||(o[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var u=a(r)?"":String(r);Kr(o,u)&&(o.value=u)}else if("innerHTML"===t&&vr(o.tagName)&&a(o.innerHTML)){(Qr=Qr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var p=Qr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;p.firstChild;)o.appendChild(p.firstChild)}else if(r!==l[t])try{o[t]=r}catch(n){}}}}function Kr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return y(t)!==y(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Yr={create:Jr,update:Jr},Xr=T((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Zr(n){var e=no(n.style);return n.staticStyle?O(n.staticStyle,e):e}function no(n){return Array.isArray(n)?q(n):"string"==typeof n?Xr(n):n}var eo,to=/^--/,ro=/\s*!important$/,oo=function(n,e,t){if(to.test(e))n.style.setProperty(e,t);else if(ro.test(t))n.style.setProperty(E(e),t.replace(ro,""),"important");else{var r=io(e);if(Array.isArray(t))for(var o=0,a=t.length;o<a;o++)n.style[r]=t[o];else n.style[r]=t}},ao=["Webkit","Moz","ms"],io=T((function(n){if(eo=eo||document.createElement("div").style,"filter"!==(n=S(n))&&n in eo)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<ao.length;t++){var r=ao[t]+e;if(r in eo)return r}}));function so(n,e){var t=e.data,r=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(r.staticStyle)&&a(r.style))){var o,s,l=e.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},p=c||u,d=no(e.data.style)||{};e.data.normalizedStyle=i(d.__ob__)?O({},d):d;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Zr(o.data))&&O(r,t);(t=Zr(n.data))&&O(r,t);for(var a=n;a=a.parent;)a.data&&(t=Zr(a.data))&&O(r,t);return r}(e,!0);for(s in p)a(m[s])&&oo(l,s,"");for(s in m)o=m[s],oo(l,s,null==o?"":o)}}var lo={create:so,update:so},co=/\s+/;function uo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(co).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function po(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(co).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function mo(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&O(e,ho(n.name||"v")),O(e,n),e}return"string"==typeof n?ho(n):void 0}}var ho=T((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),fo=J&&!X,vo="transition",go="transitionend",yo="animation",bo="animationend";fo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(vo="WebkitTransition",go="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(yo="WebkitAnimation",bo="webkitAnimationEnd"));var xo=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function wo(n){xo((function(){xo(n)}))}function _o(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),uo(n,e))}function ko(n,e){n._transitionClasses&&w(n._transitionClasses,e),po(n,e)}function To(n,e,t){var r=So(n,e),o=r.type,a=r.timeout,i=r.propCount;if(!o)return t();var s="transition"===o?go:bo,l=0,c=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),n.addEventListener(s,u)}var $o=/\b(transform|all)(,|$)/;function So(n,e){var t,r=window.getComputedStyle(n),o=(r[vo+"Delay"]||"").split(", "),a=(r[vo+"Duration"]||"").split(", "),i=jo(o,a),s=(r[yo+"Delay"]||"").split(", "),l=(r[yo+"Duration"]||"").split(", "),c=jo(s,l),u=0,p=0;return"transition"===e?i>0&&(t="transition",u=i,p=a.length):"animation"===e?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&$o.test(r[vo+"Property"])}}function jo(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Co(e)+Co(n[t])})))}function Co(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Eo(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=mo(n.data.transition);if(!a(r)&&!i(t._enterCb)&&1===t.nodeType){for(var o=r.css,s=r.type,l=r.enterClass,p=r.enterToClass,d=r.enterActiveClass,m=r.appearClass,h=r.appearToClass,f=r.appearActiveClass,v=r.beforeEnter,g=r.enter,b=r.afterEnter,x=r.enterCancelled,w=r.beforeAppear,_=r.appear,k=r.afterAppear,T=r.appearCancelled,$=r.duration,S=Ye,j=Ye.$vnode;j&&j.parent;)S=j.context,j=j.parent;var C=!S._isMounted||!n.isRootInsert;if(!C||_||""===_){var E=C&&m?m:l,I=C&&f?f:d,z=C&&h?h:p,O=C&&w||v,q=C&&c(_)?_:g,A=C&&k||b,P=C&&T||x,R=y(u($)?$.enter:$);0;var M=!1!==o&&!X,L=Oo(q),N=t._enterCb=D((function(){M&&(ko(t,z),ko(t,I)),N.cancelled?(M&&ko(t,E),P&&P(t)):A&&A(t),t._enterCb=null}));n.data.show||Gn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),q&&q(t,N)})),O&&O(t),M&&(_o(t,E),_o(t,I),wo((function(){ko(t,E),N.cancelled||(_o(t,z),L||(zo(R)?setTimeout(N,R):To(t,s,N)))}))),n.data.show&&(e&&e(),q&&q(t,N)),M||L||N()}}}function Io(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=mo(n.data.transition);if(a(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var o=r.css,s=r.type,l=r.leaveClass,c=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,m=r.leave,h=r.afterLeave,f=r.leaveCancelled,v=r.delayLeave,g=r.duration,b=!1!==o&&!X,x=Oo(m),w=y(u(g)?g.leave:g);0;var _=t._leaveCb=D((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),b&&(ko(t,c),ko(t,p)),_.cancelled?(b&&ko(t,l),f&&f(t)):(e(),h&&h(t)),t._leaveCb=null}));v?v(k):k()}function k(){_.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),b&&(_o(t,l),_o(t,p),wo((function(){ko(t,l),_.cancelled||(_o(t,c),x||(zo(w)?setTimeout(_,w):To(t,s,_)))}))),m&&m(t,_),b||x||_())}}function zo(n){return"number"==typeof n&&!isNaN(n)}function Oo(n){if(a(n))return!1;var e=n.fns;return i(e)?Oo(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function qo(n,e){!0!==e.data.show&&Eo(e)}var Ao=function(n){var e,t,r={},c=n.modules,u=n.nodeOps;for(e=0;e<$r.length;++e)for(r[$r[e]]=[],t=0;t<c.length;++t)i(c[t][$r[e]])&&r[$r[e]].push(c[t][$r[e]]);function p(n){var e=u.parentNode(n);i(e)&&u.removeChild(e,n)}function d(n,e,t,o,a,l,c){if(i(n.elm)&&i(l)&&(n=l[c]=gn(n)),n.isRootInsert=!a,!function(n,e,t,o){var a=n.data;if(i(a)){var l=i(n.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(n,!1),i(n.componentInstance))return m(n,e),h(t,n.elm,o),s(l)&&function(n,e,t,o){var a,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Tr,s);e.push(s);break}h(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var p=n.data,d=n.children,v=n.tag;i(v)?(n.elm=n.ns?u.createElementNS(n.ns,v):u.createElement(v,n),y(n),f(n,d,e),i(p)&&g(n,e),h(t,n.elm,o)):s(n.isComment)?(n.elm=u.createComment(n.text),h(t,n.elm,o)):(n.elm=u.createTextNode(n.text),h(t,n.elm,o))}}function m(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,v(n)?(g(n,e),y(n)):(_r(n),e.push(n))}function h(n,e,t){i(n)&&(i(t)?u.parentNode(t)===n&&u.insertBefore(n,e,t):u.appendChild(n,e))}function f(n,e,t){if(o(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function v(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function g(n,t){for(var o=0;o<r.create.length;++o)r.create[o](Tr,n);i(e=n.data.hook)&&(i(e.create)&&e.create(Tr,n),i(e.insert)&&t.push(n))}function y(n){var e;if(i(e=n.fnScopeId))u.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e),t=t.parent;i(e=Ye)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e)}function x(n,e,t,r,o,a){for(;r<=o;++r)d(t[r],a,n,e,!1,t,r)}function w(n){var e,t,o=n.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)w(n.children[t])}function _(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(k(r),w(r)):p(r.elm))}}function k(n,e){if(i(e)||i(n.data)){var t,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,o),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else p(n.elm)}function T(n,e,t,r){for(var o=t;o<r;o++){var a=e[o];if(i(a)&&Sr(n,a))return o}}function $(n,e,t,o,l,c){if(n!==e){i(e.elm)&&i(o)&&(e=o[l]=gn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?C(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,h=e.data;i(h)&&i(m=h.hook)&&i(m=m.prepatch)&&m(n,e);var f=n.children,g=e.children;if(i(h)&&v(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);i(m=h.hook)&&i(m=m.update)&&m(n,e)}a(e.text)?i(f)&&i(g)?f!==g&&function(n,e,t,r,o){var s,l,c,p=0,m=0,h=e.length-1,f=e[0],v=e[h],g=t.length-1,y=t[0],b=t[g],w=!o;for(0;p<=h&&m<=g;)a(f)?f=e[++p]:a(v)?v=e[--h]:Sr(f,y)?($(f,y,r,t,m),f=e[++p],y=t[++m]):Sr(v,b)?($(v,b,r,t,g),v=e[--h],b=t[--g]):Sr(f,b)?($(f,b,r,t,g),w&&u.insertBefore(n,f.elm,u.nextSibling(v.elm)),f=e[++p],b=t[--g]):Sr(v,y)?($(v,y,r,t,m),w&&u.insertBefore(n,v.elm,f.elm),v=e[--h],y=t[++m]):(a(s)&&(s=jr(e,p,h)),a(l=i(y.key)?s[y.key]:T(y,e,p,h))?d(y,r,n,f.elm,!1,t,m):Sr(c=e[l],y)?($(c,y,r,t,m),e[l]=void 0,w&&u.insertBefore(n,c.elm,f.elm)):d(y,r,n,f.elm,!1,t,m),y=t[++m]);p>h?x(n,a(t[g+1])?null:t[g+1].elm,t,m,g,r):m>g&&_(e,p,h)}(p,f,g,t,c):i(g)?(i(n.text)&&u.setTextContent(p,""),x(p,null,g,0,g.length-1,t)):i(f)?_(f,0,f.length-1):i(n.text)&&u.setTextContent(p,""):n.text!==e.text&&u.setTextContent(p,e.text),i(h)&&i(m=h.hook)&&i(m=m.postpatch)&&m(n,e)}}}function S(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var j=b("attrs,class,staticClass,staticStyle,key");function C(n,e,t,r){var o,a=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(l)&&(i(o=l.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return m(e,t),!0;if(i(a)){if(i(c))if(n.hasChildNodes())if(i(o=l)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,d=0;d<c.length;d++){if(!p||!C(p,c[d],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else f(e,c,t);if(i(l)){var h=!1;for(var v in l)if(!j(v)){h=!0,g(e,t);break}!h&&l.class&&Be(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!a(e)){var l,c=!1,p=[];if(a(n))c=!0,d(e,p);else{var m=i(n.nodeType);if(!m&&Sr(n,e))$(n,e,p,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&C(n,e,p))return S(e,p,!0),n;l=n,n=new hn(u.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,f=u.parentNode(h);if(d(e,p,h._leaveCb?null:f,u.nextSibling(h)),i(e.parent))for(var g=e.parent,y=v(e);g;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](g);if(g.elm=e.elm,y){for(var x=0;x<r.create.length;++x)r.create[x](Tr,g);var k=g.data.hook.insert;if(k.merged)for(var T=k.fns.slice(1),j=0;j<T.length;j++)T[j]()}else _r(g);g=g.parent}i(f)?_([n],0,0):i(n.tag)&&w(n)}}return S(e,p,c),e.elm}i(n)&&w(n)}}({nodeOps:xr,modules:[Lr,Ur,Gr,Yr,lo,J?{create:qo,activate:qo,remove:function(n,e){!0!==n.data.show?Io(n,e):e()}}:{}].concat(Ar)});X&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Vo(n,"input")}));var Po={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Gn(t,"postpatch",(function(){Po.componentUpdated(n,e,t)})):Ro(n,e,t.context),n._vOptions=[].map.call(n.options,Do)):("textarea"===t.tag||br(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",No),n.addEventListener("compositionend",Uo),n.addEventListener("change",Uo),X&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Ro(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,Do);if(o.some((function(n,e){return!M(n,r[e])})))(n.multiple?e.value.some((function(n){return Lo(n,o)})):e.value!==e.oldValue&&Lo(e.value,o))&&Vo(n,"change")}}};function Ro(n,e,t){Mo(n,e,t),(Y||Z)&&setTimeout((function(){Mo(n,e,t)}),0)}function Mo(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,l=n.options.length;s<l;s++)if(i=n.options[s],o)a=L(r,Do(i))>-1,i.selected!==a&&(i.selected=a);else if(M(Do(i),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function Lo(n,e){return e.every((function(e){return!M(e,n)}))}function Do(n){return"_value"in n?n._value:n.value}function No(n){n.target.composing=!0}function Uo(n){n.target.composing&&(n.target.composing=!1,Vo(n.target,"input"))}function Vo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Bo(n){return!n.componentInstance||n.data&&n.data.transition?n:Bo(n.componentInstance._vnode)}var Fo={model:Po,show:{bind:function(n,e,t){var r=e.value,o=(t=Bo(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,Eo(t,(function(){n.style.display=a}))):n.style.display=r?a:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Bo(t)).data&&t.data.transition?(t.data.show=!0,r?Eo(t,(function(){n.style.display=n.__vOriginalDisplay})):Io(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},Ho={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Wo(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Wo($e(e.children)):n}function Qo(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var r in o)e[S(r)]=o[r];return e}function Go(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Jo=function(n){return n.tag||fe(n)},Ko=function(n){return"show"===n.name},Yo={name:"transition",props:Ho,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Jo)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var a=Wo(o);if(!a)return o;if(this._leaving)return Go(n,o);var i="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?i+"comment":i+a.tag:l(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var s=(a.data||(a.data={})).transition=Qo(this),c=this._vnode,u=Wo(c);if(a.data.directives&&a.data.directives.some(Ko)&&(a.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,u)&&!fe(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=O({},s);if("out-in"===r)return this._leaving=!0,Gn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Go(n,o);if("in-out"===r){if(fe(a))return c;var d,m=function(){d()};Gn(s,"afterEnter",m),Gn(s,"enterCancelled",m),Gn(p,"delayLeave",(function(n){d=n}))}}return o}}},Xo=O({tag:String,moveClass:String},Ho);function Zo(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function na(n){n.data.newPos=n.elm.getBoundingClientRect()}function ea(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate(".concat(r,"px,").concat(o,"px)"),a.transitionDuration="0s"}}delete Xo.mode;var ta={Transition:Yo,TransitionGroup:{props:Xo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=Qo(this),s=0;s<o.length;s++){if((u=o[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))a.push(u),t[u.key]=u,(u.data||(u.data={})).transition=i;else;}if(r){var l=[],c=[];for(s=0;s<r.length;s++){var u;(u=r[s]).data.transition=i,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=n(e,null,l),this.removed=c}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Zo),n.forEach(na),n.forEach(ea),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;_o(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(go,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(go,n),t._moveCb=null,ko(t,e))})}})))},methods:{hasMove:function(n,e){if(!fo)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){po(t,n)})),uo(t,e),t.style.display="none",this.$el.appendChild(t);var r=So(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function ra(n,e){for(var t in e)n[t]=e[t];return n}Qt.config.mustUseProp=function(n,e,t){return"value"===t&&tr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Qt.config.isReservedTag=gr,Qt.config.isReservedAttr=er,Qt.config.getTagNamespace=function(n){return vr(n)?"svg":"math"===n?"math":void 0},Qt.config.isUnknownElement=function(n){if(!J)return!0;if(gr(n))return!1;if(n=n.toLowerCase(),null!=yr[n])return yr[n];var e=document.createElement(n);return n.indexOf("-")>-1?yr[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:yr[n]=/HTMLUnknownElement/.test(e.toString())},O(Qt.options.directives,Fo),O(Qt.options.components,ta),Qt.prototype.__patch__=J?Ao:A,Qt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=fn),et(n,"beforeMount"),r=function(){n._update(n._render(),t)},new We(n,r,A,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1;var o=n._preWatchers;if(o)for(var a=0;a<o.length;a++)o[a].run();return null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&J?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},J&&setTimeout((function(){B.devtools&&ln&&ln.emit("init",Qt)}),0);var oa=/[!'()*]/g,aa=function(n){return"%"+n.charCodeAt(0).toString(16)},ia=/%2C/g,sa=function(n){return encodeURIComponent(n).replace(oa,aa).replace(ia,",")};function la(n){try{return decodeURIComponent(n)}catch(n){0}return n}var ca=function(n){return null==n||"object"==typeof n?n:String(n)};function ua(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=la(t.shift()),o=t.length>0?la(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function pa(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return sa(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(sa(e)):r.push(sa(e)+"="+sa(n)))})),r.join("&")}return sa(e)+"="+sa(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var da=/\/?$/;function ma(n,e,t,r){var o=r&&r.options.stringifyQuery,a=e.query||{};try{a=ha(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:ga(e,o),matched:n?va(n):[]};return t&&(i.redirectedFrom=ga(t,o)),Object.freeze(i)}function ha(n){if(Array.isArray(n))return n.map(ha);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=ha(n[t]);return e}return n}var fa=ma(null,{path:"/"});function va(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function ga(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||pa)(r)+o}function ya(n,e,t){return e===fa?n===e:!!e&&(n.path&&e.path?n.path.replace(da,"")===e.path.replace(da,"")&&(t||n.hash===e.hash&&ba(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&ba(n.query,e.query)&&ba(n.params,e.params))))}function ba(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var a=n[t];if(r[o]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?ba(a,i):String(a)===String(i)}))}function xa(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],a=t.enteredCbs[r];if(o&&a){delete t.enteredCbs[r];for(var i=0;i<a.length;i++)o._isBeingDestroyed||a[i](o)}}}}var wa={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,a=e.data;a.routerView=!0;for(var i=o.$createElement,s=t.name,l=o.$route,c=o._routerViewCache||(o._routerViewCache={}),u=0,p=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&u++,d.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(a.routerViewDepth=u,p){var m=c[s],h=m&&m.component;return h?(m.configProps&&_a(h,a,m.route,m.configProps),i(h,a,r)):i()}var f=l.matched[u],v=f&&f.components[s];if(!f||!v)return c[s]=null,i();c[s]={component:v},a.registerRouteInstance=function(n,e){var t=f.instances[s];(e&&t!==n||!e&&t===n)&&(f.instances[s]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){f.instances[s]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==f.instances[s]&&(f.instances[s]=n.componentInstance),xa(l)};var g=f.props&&f.props[s];return g&&(ra(c[s],{route:l,configProps:g}),_a(v,a,l,g)),i(v,a,r)}};function _a(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=ra({},o);var a=e.attrs=e.attrs||{};for(var i in o)n.props&&i in n.props||(a[i]=o[i],delete o[i])}}function ka(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function Ta(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var $a=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Sa=Na,ja=Oa,Ca=function(n,e){return Aa(Oa(n,e),e)},Ea=Aa,Ia=Da,za=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Oa(n,e){for(var t,r=[],o=0,a=0,i="",s=e&&e.delimiter||"/";null!=(t=za.exec(n));){var l=t[0],c=t[1],u=t.index;if(i+=n.slice(a,u),a=u+l.length,c)i+=c[1];else{var p=n[a],d=t[2],m=t[3],h=t[4],f=t[5],v=t[6],g=t[7];i&&(r.push(i),i="");var y=null!=d&&null!=p&&p!==d,b="+"===v||"*"===v,x="?"===v||"*"===v,w=t[2]||s,_=h||f;r.push({name:m||o++,prefix:d||"",delimiter:w,optional:x,repeat:b,partial:y,asterisk:!!g,pattern:_?Ra(_):g?".*":"[^"+Pa(w)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&r.push(i),r}function qa(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Aa(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",La(e)));return function(e,r){for(var o="",a=e||{},i=(r||{}).pretty?qa:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,u=a[l.name];if(null==u){if(l.optional){l.partial&&(o+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if($a(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=i(u[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');o+=l.prefix+c}}else o+=l}return o}}function Pa(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ra(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Ma(n,e){return n.keys=e,n}function La(n){return n&&n.sensitive?"":"i"}function Da(n,e,t){$a(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,a="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)a+=Pa(s);else{var l=Pa(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),a+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Pa(t.delimiter||"/"),p=a.slice(-u.length)===u;return r||(a=(p?a.slice(0,-u.length):a)+"(?:"+u+"(?=$))?"),a+=o?"$":r&&p?"":"(?="+u+"|$)",Ma(new RegExp("^"+a,La(t)),e)}function Na(n,e,t){return $a(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Ma(n,e)}(n,e):$a(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(Na(n[o],e,t).source);return Ma(new RegExp("(?:"+r.join("|")+")",La(t)),e)}(n,e,t):function(n,e,t){return Da(Oa(n,t),e,t)}(n,e,t)}Sa.parse=ja,Sa.compile=Ca,Sa.tokensToFunction=Ea,Sa.tokensToRegExp=Ia;var Ua=Object.create(null);function Va(n,e,t){e=e||{};try{var r=Ua[n]||(Ua[n]=Sa.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Ba(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var a=(o=ra({},n)).params;return a&&"object"==typeof a&&(o.params=ra({},a)),o}if(!o.path&&o.params&&e){(o=ra({},o))._normalized=!0;var i=ra(ra({},e.params),o.params);if(e.name)o.name=e.name,o.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=Va(s,i,e.path)}else 0;return o}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),c=e&&e.path||"/",u=l.path?ka(l.path,c,t||o.append):c,p=function(n,e,t){void 0===e&&(e={});var r,o=t||ua;try{r=o(n||"")}catch(n){r={}}for(var a in e){var i=e[a];r[a]=Array.isArray(i)?i.map(ca):ca(i)}return r}(l.query,o.query,r&&r.options.parseQuery),d=o.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Fa,Ha=function(){},Wa={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),a=o.location,i=o.route,s=o.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,m=null==this.activeClass?p:this.activeClass,h=null==this.exactActiveClass?d:this.exactActiveClass,f=i.redirectedFrom?ma(null,Ba(i.redirectedFrom),null,t):i;l[h]=ya(r,f,this.exactPath),l[m]=this.exact||this.exactPath?l[h]:function(n,e){return 0===n.path.replace(da,"/").indexOf(e.path.replace(da,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,f);var v=l[h]?this.ariaCurrentValue:null,g=function(n){Qa(n)&&(e.replace?t.replace(a,Ha):t.push(a,Ha))},y={click:Qa};Array.isArray(this.event)?this.event.forEach((function(n){y[n]=g})):y[this.event]=g;var b={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:g,isActive:l[m],isExactActive:l[h]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)b.on=y,b.attrs={href:s,"aria-current":v};else{var w=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var _=w.data=ra({},w.data);for(var k in _.on=_.on||{},_.on){var T=_.on[k];k in y&&(_.on[k]=Array.isArray(T)?T:[T])}for(var $ in y)$ in _.on?_.on[$].push(y[$]):_.on[$]=g;var S=w.data.attrs=ra({},w.data.attrs);S.href=s,S["aria-current"]=v}else b.on=y}return n(this.tag,b,this.$slots.default)}};function Qa(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ga="undefined"!=typeof window;function Ja(n,e,t,r,o){var a=e||[],i=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,a,i){var s=o.path,l=o.name;0;var c=o.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return Ta(e.path+"/"+n)}(s,a,c.strict);"boolean"==typeof o.caseSensitive&&(c.sensitive=o.caseSensitive);var p={path:u,regex:Ka(u,c),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:i,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var a=i?Ta(i+"/"+o.path):void 0;n(e,t,r,o,p,a)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<d.length;++m){0;var h={path:d[m],children:o.children};n(e,t,r,h,a,p.path||"/")}l&&(r[l]||(r[l]=p))}(a,i,s,n,o)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:i,nameMap:s}}function Ka(n,e){return Sa(n,[],e)}function Ya(n,e){var t=Ja(n),r=t.pathList,o=t.pathMap,a=t.nameMap;function i(n,t,i){var s=Ba(n,t,!1,e),c=s.name;if(c){var u=a[c];if(!u)return l(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=Va(u.path,s.params),l(u,s,i)}if(s.path){s.params={};for(var m=0;m<r.length;m++){var h=r[m],f=o[h];if(Xa(f.regex,s.path,s.params))return l(f,s,i)}}return l(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(ma(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return l(null,t);var s=o,c=s.name,u=s.path,p=t.query,d=t.hash,m=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,m=s.hasOwnProperty("params")?s.params:m,c){a[c];return i({_normalized:!0,name:c,query:p,hash:d,params:m},void 0,t)}if(u){var h=function(n,e){return ka(n,e.parent?e.parent.path:"/",!0)}(u,n);return i({_normalized:!0,path:Va(h,m),query:p,hash:d},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:Va(t,e.params)});if(r){var o=r.matched,a=o[o.length-1];return e.params=r.params,l(a,e)}return l(null,e)}(0,t,n.matchAs):ma(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Ja([e||n],r,o,a,t),t&&t.alias.length&&Ja(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,a,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Ja(n,r,o,a)}}}function Xa(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,a=r.length;o<a;++o){var i=n.keys[o-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[o]?la(r[o]):r[o])}return!0}var Za=Ga&&window.performance&&window.performance.now?window.performance:Date;function ni(){return Za.now().toFixed(3)}var ei=ni();function ti(){return ei}function ri(n){return ei=n}var oi=Object.create(null);function ai(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ra({},window.history.state);return t.key=ti(),window.history.replaceState(t,"",e),window.addEventListener("popstate",li),function(){window.removeEventListener("popstate",li)}}function ii(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var a=function(){var n=ti();if(n)return oi[n]}(),i=o.call(n,e,t,r?a:null);i&&("function"==typeof i.then?i.then((function(n){mi(n,a)})).catch((function(n){0})):mi(i,a))}))}}function si(){var n=ti();n&&(oi[n]={x:window.pageXOffset,y:window.pageYOffset})}function li(n){si(),n.state&&n.state.key&&ri(n.state.key)}function ci(n){return pi(n.x)||pi(n.y)}function ui(n){return{x:pi(n.x)?n.x:window.pageXOffset,y:pi(n.y)?n.y:window.pageYOffset}}function pi(n){return"number"==typeof n}var di=/^#\d/;function mi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=di.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,a={x:pi((t=a).x)?t.x:0,y:pi(t.y)?t.y:0})}else ci(n)&&(e=ui(n))}else r&&ci(n)&&(e=ui(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var hi,fi=Ga&&((-1===(hi=window.navigator.userAgent).indexOf("Android 2.")&&-1===hi.indexOf("Android 4.0")||-1===hi.indexOf("Mobile Safari")||-1!==hi.indexOf("Chrome")||-1!==hi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function vi(n,e){si();var t=window.history;try{if(e){var r=ra({},t.state);r.key=ti(),t.replaceState(r,"",n)}else t.pushState({key:ri(ni())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function gi(n){vi(n,!0)}var yi={redirected:2,aborted:4,cancelled:8,duplicated:16};function bi(n,e){return wi(n,e,yi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return _i.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function xi(n,e){return wi(n,e,yi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function wi(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var _i=["params","query","hash"];function ki(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function Ti(n,e){return ki(n)&&n._isRouter&&(null==e||n.type===e)}function $i(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}function Si(n){return function(e,t,r){var o=!1,a=0,i=null;ji(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,a++;var l,c=Ii((function(e){var o;((o=e).__esModule||Ei&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Fa.extend(e),t.components[s]=e,--a<=0&&r()})),u=Ii((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=ki(n)?n:new Error(e),r(i))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),o||r()}}function ji(n,e){return Ci(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Ci(n){return Array.prototype.concat.apply([],n)}var Ei="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ii(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var zi=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ga){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=fa,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Oi(n,e,t,r){var o=ji(n,(function(n,r,o,a){var i=function(n,e){"function"!=typeof n&&(n=Fa.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,o,a)})):t(i,r,o,a)}));return Ci(r?o.reverse():o)}function qi(n,e){if(e)return function(){return n.apply(e,arguments)}}zi.prototype.listen=function(n){this.cb=n},zi.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},zi.prototype.onError=function(n){this.errorCbs.push(n)},zi.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,a)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(Ti(n,yi.redirected)&&a===fa||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},zi.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var a,i,s=function(n){!Ti(n)&&ki(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=o.matched.length-1;if(ya(n,o)&&l===c&&n.matched[l]===o.matched[c])return this.ensureURL(),n.hash&&ii(this.router,o,n,!1),s(((i=wi(a=o,n,yi.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,m=u.activated,h=[].concat(function(n){return Oi(n,"beforeRouteLeave",qi,!0)}(d),this.router.beforeHooks,function(n){return Oi(n,"beforeRouteUpdate",qi)}(p),m.map((function(n){return n.beforeEnter})),Si(m)),f=function(e,t){if(r.pending!==n)return s(xi(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return wi(n,e,yi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ki(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(bi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};$i(h,f,(function(){$i(function(n){return Oi(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,a){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),f,(function(){if(r.pending!==n)return s(xi(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){xa(n)}))}))}))},zi.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},zi.prototype.setupListeners=function(){},zi.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=fa,this.pending=null};var Ai=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Pi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=fi&&t;r&&this.listeners.push(ai());var o=function(){var t=n.current,o=Pi(n.base);n.current===fa&&o===n._startLocation||n.transitionTo(o,(function(n){r&&ii(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){vi(Ta(r.base+n.fullPath)),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){gi(Ta(r.base+n.fullPath)),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Pi(this.base)!==this.current.fullPath){var e=Ta(this.base+this.current.fullPath);n?vi(e):gi(e)}},e.prototype.getCurrentLocation=function(){return Pi(this.base)},e}(zi);function Pi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(Ta(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ri=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Pi(n);if(!/^\/#/.test(e))return window.location.replace(Ta(n+"/#"+e)),!0}(this.base)||Mi()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=fi&&e;t&&this.listeners.push(ai());var r=function(){var e=n.current;Mi()&&n.transitionTo(Li(),(function(r){t&&ii(n.router,r,e,!0),fi||Ui(r.fullPath)}))},o=fi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Ni(n.fullPath),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Ui(n.fullPath),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Li()!==e&&(n?Ni(e):Ui(e))},e.prototype.getCurrentLocation=function(){return Li()},e}(zi);function Mi(){var n=Li();return"/"===n.charAt(0)||(Ui("/"+n),!1)}function Li(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Di(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Ni(n){fi?vi(Di(n)):window.location.hash=n}function Ui(n){fi?gi(Di(n)):window.location.replace(Di(n))}var Vi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){Ti(n,yi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(zi),Bi=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ya(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!fi&&!1!==n.fallback,this.fallback&&(e="hash"),Ga||(e="abstract"),this.mode=e,e){case"history":this.history=new Ai(this,n.base);break;case"hash":this.history=new Ri(this,n.base,this.fallback);break;case"abstract":this.history=new Vi(this,n.base);break;default:0}},Fi={currentRoute:{configurable:!0}};Bi.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Fi.currentRoute.get=function(){return this.history&&this.history.current},Bi.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ai||t instanceof Ri){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;fi&&o&&"fullPath"in n&&ii(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Bi.prototype.beforeEach=function(n){return Wi(this.beforeHooks,n)},Bi.prototype.beforeResolve=function(n){return Wi(this.resolveHooks,n)},Bi.prototype.afterEach=function(n){return Wi(this.afterHooks,n)},Bi.prototype.onReady=function(n,e){this.history.onReady(n,e)},Bi.prototype.onError=function(n){this.history.onError(n)},Bi.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Bi.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Bi.prototype.go=function(n){this.history.go(n)},Bi.prototype.back=function(){this.go(-1)},Bi.prototype.forward=function(){this.go(1)},Bi.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Bi.prototype.resolve=function(n,e,t){var r=Ba(n,e=e||this.history.current,t,this),o=this.match(r,e),a=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?Ta(n+"/"+r):r}(this.history.base,a,this.mode),normalizedTo:r,resolved:o}},Bi.prototype.getRoutes=function(){return this.matcher.getRoutes()},Bi.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==fa&&this.history.transitionTo(this.history.getCurrentLocation())},Bi.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==fa&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Bi.prototype,Fi);var Hi=Bi;function Wi(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Bi.install=function n(e){if(!n.installed||Fa!==e){n.installed=!0,Fa=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",wa),e.component("RouterLink",Wa);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Bi.version="3.6.5",Bi.isNavigationFailure=Ti,Bi.NavigationFailureType=yi,Bi.START_LOCATION=fa,Ga&&window.Vue&&window.Vue.use(Bi);t(105);t(127),t(16);var Qi={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,333)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,332))},Gi={"v-1d6ce1d3":()=>t.e(5).then(t.bind(null,334)),"v-f581b5d6":()=>t.e(6).then(t.bind(null,335)),"v-0396ec6a":()=>t.e(9).then(t.bind(null,336)),"v-32ae2db2":()=>t.e(11).then(t.bind(null,337)),"v-1f06c1e1":()=>t.e(13).then(t.bind(null,338)),"v-14ad3492":()=>t.e(15).then(t.bind(null,339)),"v-3d47ad80":()=>t.e(12).then(t.bind(null,340)),"v-c04f9ede":()=>t.e(8).then(t.bind(null,341)),"v-77d1c232":()=>t.e(10).then(t.bind(null,342)),"v-e9727f68":()=>t.e(17).then(t.bind(null,343)),"v-83343272":()=>t.e(7).then(t.bind(null,344)),"v-19ba87d7":()=>t.e(16).then(t.bind(null,345)),"v-798802d6":()=>t.e(14).then(t.bind(null,346)),"v-f75d6a90":()=>t.e(18).then(t.bind(null,347))};function Ji(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Ki=/-(\w)/g,Yi=Ji(n=>n.replace(Ki,(n,e)=>e?e.toUpperCase():"")),Xi=/\B([A-Z])/g,Zi=Ji(n=>n.replace(Xi,"-$1").toLowerCase()),ns=Ji(n=>n.charAt(0).toUpperCase()+n.slice(1));function es(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(ns(Yi(e))):n(ns(e))||n(Zi(e))}const ts=Object.assign({},Qi,Gi),rs=n=>ts[n],os=n=>Gi[n],as=n=>Qi[n],is=n=>Qt.component(n);function ss(n){return es(os,n)}function ls(n){return es(as,n)}function cs(n){return es(rs,n)}function us(n){return es(is,n)}function ps(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!us(n)&&cs(n)){const e=await cs(n)();Qt.component(n,e.default)}}))}function ds(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ms=t(91),hs=t.n(ms),fs=t(92),vs=t.n(fs),gs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${vs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=bs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=xs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],n,this.siteMeta,ws)},updateCanonicalLink(){ys(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",bs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xs(null,this.currentMetaTags),ys()}};function ys(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function bs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function xs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ws(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var _s=t(51),ks={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(_s)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],i=e[n+1],s=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(o===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Ts=t(24),$s=t.n(Ts),Ss={mounted(){$s.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Qt.component(n.name)||$s.a.start(),t()}),this.$router.afterEach(()=>{$s.a.done(),this.isSidebarOpen=!1})}};t(239),t(240);class js{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Cs={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new js).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===t&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=n:o.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Es={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Is={},zs=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Os=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:Es[n]},qs=function n(e,t,r){var o=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))o[n]=t[n];else{var e=n.replace("data","");o.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,a=e.children;o.appendChild(n(t,r,a))})),o},As=function(n,e,t){var r,o=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==o.length||t?o:o[0]},Ps=function(n,e){var t,r,o=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<template>([\s\S]+)<\/template>/),i=n.match(/<script>([\s\S]+)<\/script>/),s={css:o&&o[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=zs(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),o=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,a=[eval][0](o);return a.template=e,a}(s.js,s.html);var l=Os("vue");return s.jsLib.unshift(l),s},Rs=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),o=n.match(/<html>([\s\S]+)<\/html>/),a=n.match(/<script>([\s\S]+)<\/script>/),i={css:r&&r[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:a&&a[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return i.htmlTpl=i.html,i.jsTpl=i.js,i.script=(t=i.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),i},Ms=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Ls(){var n=As(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=As(n,"vuepress-plugin-demo-block__code"),t=As(n,"vuepress-plugin-demo-block__display"),r=As(n,"vuepress-plugin-demo-block__footer"),o=As(t,"vuepress-plugin-demo-block__app"),a=decodeURIComponent(n.dataset.code),i=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);i=i?JSON.parse(i):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),o=new Function("return ".concat(r))(),a={js:o,css:o.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Ms(n),htmlTpl:zs("")},i=Os("react"),s=Os("reactDOM");return a.jsLib.unshift(i,s),a}(a,i):"vanilla"===s?Rs(a,i):Ps(a,i),u=qs("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(u),u.addEventListener("click",Ds.bind(null,u,l,e,r)),Os("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,o=n.jsLib,a=n.cssLib,i=o.concat(a).concat(Os("cssLib")).concat(Os("jsLib")).join(",");return qs("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:i}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),Os("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,o=n.jsLib,a=n.cssLib,i=JSON.stringify({css:e,html:t,js:r,js_external:o.concat(Os("jsLib")).join(";"),css_external:a.concat(Os("cssLib")).join(";"),layout:Os("codepenLayout"),js_pre_processor:Os("codepenJsProcessor"),editors:Os("codepenEditors")});return qs("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:i}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==i.horizontal?i.horizontal:Os("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var p=e.firstChild.cloneNode(!0);p.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(p)}if(c.css&&function(n){if(!Is[n]){var e=qs("style",{innerHTML:n});document.body.appendChild(e),Is[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),o);else if("vue"===s){var d=(new(Vue.extend(c.script))).$mount();o.appendChild(d.$el)}else"vanilla"===s&&(o.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Ls()}),300)}function Ds(n,e,t,r){var o="1"!==n.dataset.isExpand;t.style.height=o?"".concat(e,"px"):0,o?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=o?"1":"0"}var Ns={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Ls()},updated:function(){Ls()}},Us="auto",Vs="zoom-in",Bs="zoom-out",Fs="grab",Hs="move";function Ws(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o={passive:!1};r?n.addEventListener(e,t,o):n.removeEventListener(e,t,o)}function Qs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Gs(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Js(n,e,t){!function(n){var e=Ks,t=Ys;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var o=n.transform;delete n.transform,n[t]=o}}(e);var r=n.style,o={};for(var a in e)t&&(o[a]=r[a]||""),r[a]=e[a];return o}var Ks="transition",Ys="transform",Xs="transform",Zs="transitionend";var nl=function(){},el={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:nl,onClose:nl,onGrab:nl,onMove:nl,onRelease:nl,onBeforeOpen:nl,onBeforeClose:nl,onBeforeGrab:nl,onBeforeRelease:nl,onImageLoading:nl,onImageLoaded:nl},tl={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),ol(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,o=this.lastScrollPosition.y-t,a=this.options.scrollThreshold;(Math.abs(o)>=a||Math.abs(r)>=a)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(rl(n)&&!ol(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){rl(n)&&!ol(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function rl(n){return 0===n.button}function ol(n){return n.metaKey||n.ctrlKey}var al={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Js(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Ws(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Js(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},il="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},sl=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),ll=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},cl={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Gs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,o=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Fs:Bs,transition:Xs+"\n        "+r+"s\n        "+o,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Js(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Js(this.el,{transform:"none"})},grab:function(n,e,t){var r=ul(),o=r.x-n,a=r.y-e;Js(this.el,{cursor:Hs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=ul(),o=r.x-n,a=r.y-e;Js(this.el,{transition:Xs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Js(this.el,this.styleClose)},restoreOpenStyle:function(){Js(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=ul(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,o=r.customSize,a=r.scaleBase;if(!o&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(o&&"object"===(void 0===o?"undefined":il(o)))return{x:o.width/this.rect.width,y:o.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,l=ul(),c={x:l.x-i,y:l.y-s},u=c.x/i,p=c.y/s,d=a+Math.min(u,p);if(o&&"string"==typeof o){var m=t||this.el.naturalWidth,h=e||this.el.naturalHeight,f=parseFloat(o)*m/(100*this.rect.width),v=parseFloat(o)*h/(100*this.rect.height);if(d>f||d>v)return{x:f,y:v}}return{x:d,y:d}}};function ul(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function pl(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Ws(n,r,e[r],t)}))}var dl=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(cl),this.overlay=Object.create(al),this.handler=Object.create(tl),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ll({},el,e),this.overlay.init(this),this.handler.init(this)}return sl(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Vs,Ws(n,"click",this.handler.click),this.options.preloadImage&&Qs(Gs(n)));return this}},{key:"config",value:function(n){return n?(ll(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var o=this.target.srcOriginal;null!=o&&(this.options.onImageLoading(r),Qs(o,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Ws(document,"scroll",this.handler.scroll),Ws(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Ws(window,"resize",this.handler.resizeWindow);var a=function n(){Ws(r,Zs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&pl(document,e.handler,!0),t(r)};return Ws(r,Zs,a),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Us,this.overlay.fadeOut(),this.target.zoomOut(),Ws(document,"scroll",this.handler.scroll,!1),Ws(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Ws(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Ws(t,Zs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&pl(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Ws(t,Zs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var o=this.target.el;this.options.onBeforeGrab(o),this.released=!1,this.target.grab(n,e,t);var a=function n(){Ws(o,Zs,n,!1),r(o)};return Ws(o,Zs,a),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Hs,this.target.move(n,e,t);var o=this.target.el,a=function n(){Ws(o,Zs,n,!1),r(o)};return Ws(o,Zs,a),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Us,this.target.restoreOpenStyle();var r=function r(){Ws(t,Zs,r,!1),n.lock=!1,n.released=!0,e(t)};return Ws(t,Zs,r),this}}}]),n}();const ml=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),hl=Number("500");class fl{constructor(){this.instance=new dl(ml)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=hl){setTimeout(()=>this.update(n),e)}}var vl=[gs,ks,Ss,Cs,Ns,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new fl,this.$vuepress.zooming.updateDelay()}}],gl={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ds("layout",n),Qt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},yl=t(8),bl=Object(yl.a)(gl,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(bl,"mixins",vl);const xl=[{name:"v-1d6ce1d3",path:"/pages/5bf4bd/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-1d6ce1d3").then(t)}},{path:"/pages/5bf4bd/index.html",redirect:"/pages/5bf4bd/"},{path:"/01.前端/01.前端/01.vue_base.html",redirect:"/pages/5bf4bd/"},{name:"v-f581b5d6",path:"/pages/76f6e5/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-f581b5d6").then(t)}},{path:"/pages/76f6e5/index.html",redirect:"/pages/76f6e5/"},{path:"/01.前端/01.前端/02.vue3_base.html",redirect:"/pages/76f6e5/"},{name:"v-0396ec6a",path:"/pages/a18ea7/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-0396ec6a").then(t)}},{path:"/pages/a18ea7/index.html",redirect:"/pages/a18ea7/"},{path:"/02.后端/01.后端/03.Nginx.html",redirect:"/pages/a18ea7/"},{name:"v-32ae2db2",path:"/pages/9d202d/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-32ae2db2").then(t)}},{path:"/pages/9d202d/index.html",redirect:"/pages/9d202d/"},{path:"/02.后端/01.后端/05.Redis2.html",redirect:"/pages/9d202d/"},{name:"v-1f06c1e1",path:"/pages/43d728/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-1f06c1e1").then(t)}},{path:"/pages/43d728/index.html",redirect:"/pages/43d728/"},{path:"/04.数据库/01.数据库/02.SQL.html",redirect:"/pages/43d728/"},{name:"v-14ad3492",path:"/pages/b70403/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-14ad3492").then(t)}},{path:"/pages/b70403/index.html",redirect:"/pages/b70403/"},{path:"/05.工具/01.工具/01.tool.html",redirect:"/pages/b70403/"},{name:"v-3d47ad80",path:"/pages/e414ca/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-3d47ad80").then(t)}},{path:"/pages/e414ca/index.html",redirect:"/pages/e414ca/"},{path:"/03.操作系统/01.linux/01.linux.html",redirect:"/pages/e414ca/"},{name:"v-c04f9ede",path:"/pages/7ac60e/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-c04f9ede").then(t)}},{path:"/pages/7ac60e/index.html",redirect:"/pages/7ac60e/"},{path:"/02.后端/01.后端/02.JUC.html",redirect:"/pages/7ac60e/"},{name:"v-77d1c232",path:"/pages/b4e263/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-77d1c232").then(t)}},{path:"/pages/b4e263/index.html",redirect:"/pages/b4e263/"},{path:"/02.后端/01.后端/04.RabbitMQ.html",redirect:"/pages/b4e263/"},{name:"v-e9727f68",path:"/blog/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-e9727f68").then(t)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{name:"v-83343272",path:"/pages/42d66a/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-83343272").then(t)}},{path:"/pages/42d66a/index.html",redirect:"/pages/42d66a/"},{path:"/02.后端/01.后端/01.design.html",redirect:"/pages/42d66a/"},{name:"v-19ba87d7",path:"/pages/4c6801/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-19ba87d7").then(t)}},{path:"/pages/4c6801/index.html",redirect:"/pages/4c6801/"},{path:"/05.工具/01.工具/02.util.html",redirect:"/pages/4c6801/"},{name:"v-798802d6",path:"/pages/4af2ba/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-798802d6").then(t)}},{path:"/pages/4af2ba/index.html",redirect:"/pages/4af2ba/"},{path:"/04.数据库/01.数据库/03.mybatis.html",redirect:"/pages/4af2ba/"},{name:"v-f75d6a90",path:"/",component:bl,beforeEnter:(n,e,t)=>{ps("Layout","v-f75d6a90").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:bl}],wl={title:"Ming",description:"Everything will be ok!",base:"/",headTags:[["link",{rel:"icon",href:"/img/pikachu.jpg"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"referrer",content:"no-referrer"}]],pages:[{title:"vue_base",frontmatter:{title:"vue_base",date:"2021-11-08T22:22:00.000Z",categories:["前端"],tags:["vue"],permalink:"/pages/5bf4bd/"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.vue_base.html",relativePath:"01.前端/01.前端/01.vue_base.md",key:"v-1d6ce1d3",path:"/pages/5bf4bd/",headers:[{level:2,title:"一、Vue核心",slug:"一、vue核心",normalizedTitle:"一、vue核心",charIndex:2},{level:3,title:"1. 初识 Vue",slug:"_1-初识-vue",normalizedTitle:"1. 初识 vue",charIndex:14},{level:3,title:"2. 模板语法",slug:"_2-模板语法",normalizedTitle:"2. 模板语法",charIndex:651},{level:3,title:"3. 数据代理",slug:"_3-数据代理",normalizedTitle:"3. 数据代理",charIndex:1586},{level:3,title:"4. 事件处理",slug:"_4-事件处理",normalizedTitle:"4. 事件处理",charIndex:1991},{level:4,title:"1. 绑定监听",slug:"_1-绑定监听",normalizedTitle:"1. 绑定监听",charIndex:2002},{level:4,title:"2. 事件修饰符",slug:"_2-事件修饰符",normalizedTitle:"2. 事件修饰符",charIndex:2104},{level:4,title:"3. 按键修饰符",slug:"_3-按键修饰符",normalizedTitle:"3. 按键修饰符",charIndex:2368},{level:3,title:"5. 属性监听与计算",slug:"_5-属性监听与计算",normalizedTitle:"5. 属性监听与计算",charIndex:2700},{level:3,title:"6. 数据监视原理",slug:"_6-数据监视原理",normalizedTitle:"6. 数据监视原理",charIndex:4379},{level:3,title:"7. 列表渲染",slug:"_7-列表渲染",normalizedTitle:"7. 列表渲染",charIndex:5687},{level:4,title:"1. 列表显示",slug:"_1-列表显示",normalizedTitle:"1. 列表显示",charIndex:5698},{level:4,title:"2. key原理",slug:"_2-key原理",normalizedTitle:"2. key原理",charIndex:7747},{level:3,title:"8. Vue指令",slug:"_8-vue指令",normalizedTitle:"8. vue指令",charIndex:8291},{level:4,title:"1.常用内置指令",slug:"_1-常用内置指令",normalizedTitle:"1.常用内置指令",charIndex:8303},{level:4,title:"2. 自定义指令",slug:"_2-自定义指令",normalizedTitle:"2. 自定义指令",charIndex:9180},{level:3,title:"9. 生命周期",slug:"_9-生命周期",normalizedTitle:"9. 生命周期",charIndex:10409},{level:4,title:"1. 定义",slug:"_1-定义",normalizedTitle:"1. 定义",charIndex:10420},{level:4,title:"2. 周期类别",slug:"_2-周期类别",normalizedTitle:"2. 周期类别",charIndex:10554},{level:4,title:"3. 执行情况",slug:"_3-执行情况",normalizedTitle:"3. 执行情况",charIndex:11086},{level:2,title:"二、Vue组件化编程",slug:"二、vue组件化编程",normalizedTitle:"二、vue组件化编程",charIndex:11245},{level:3,title:"1. 非单文件组件",slug:"_1-非单文件组件",normalizedTitle:"1. 非单文件组件",charIndex:11260},{level:4,title:"1. 组件创建",slug:"_1-组件创建",normalizedTitle:"1. 组件创建",charIndex:11379},{level:4,title:"2.组件嵌套",slug:"_2-组件嵌套",normalizedTitle:"2.组件嵌套",charIndex:13321},{level:4,title:"3. 组件本质",slug:"_3-组件本质",normalizedTitle:"3. 组件本质",charIndex:14848},{level:4,title:"4. 内置关系",slug:"_4-内置关系",normalizedTitle:"4. 内置关系",charIndex:15184},{level:3,title:"2. 单文件组件",slug:"_2-单文件组件",normalizedTitle:"2. 单文件组件",charIndex:15546},{level:3,title:"3. 相关小知识",slug:"_3-相关小知识",normalizedTitle:"3. 相关小知识",charIndex:16707},{level:4,title:"1. ref标签属性",slug:"_1-ref标签属性",normalizedTitle:"1. ref标签属性",charIndex:16719},{level:4,title:"2. props配置项",slug:"_2-props配置项",normalizedTitle:"2. props配置项",charIndex:16861},{level:4,title:"3. mixin配置项",slug:"_3-mixin配置项",normalizedTitle:"3. mixin配置项",charIndex:17352},{level:4,title:"4. 插件",slug:"_4-插件",normalizedTitle:"4. 插件",charIndex:17587},{level:4,title:"5. scoped-样式",slug:"_5-scoped-样式",normalizedTitle:"5. scoped-样式",charIndex:17761},{level:4,title:"6. nextTick",slug:"_6-nexttick",normalizedTitle:"6. nexttick",charIndex:17822},{level:4,title:"7. slot-插槽",slug:"_7-slot-插槽",normalizedTitle:"7. slot-插槽",charIndex:17912},{level:3,title:"4. 自定义事件",slug:"_4-自定义事件",normalizedTitle:"4. 自定义事件",charIndex:19182},{level:3,title:"5. 全局事件总线",slug:"_5-全局事件总线",normalizedTitle:"5. 全局事件总线",charIndex:19516},{level:2,title:"三、Vue脚手架使用",slug:"三、vue脚手架使用",normalizedTitle:"三、vue脚手架使用",charIndex:19877},{level:3,title:"1. 安装",slug:"_1-安装",normalizedTitle:"1. 安装",charIndex:20523},{level:3,title:"2. 创建一个项目",slug:"_2-创建一个项目",normalizedTitle:"2. 创建一个项目",charIndex:20617},{level:3,title:"3. 组件化编码流程",slug:"_3-组件化编码流程",normalizedTitle:"3. 组件化编码流程",charIndex:21415},{level:3,title:"4. 配置代理",slug:"_4-配置代理",normalizedTitle:"4. 配置代理",charIndex:21745},{level:2,title:"四、Vuex",slug:"四、vuex",normalizedTitle:"四、vuex",charIndex:22286},{level:3,title:"1. 四个map方法的使用",slug:"_1-四个map方法的使用",normalizedTitle:"1. 四个map方法的使用",charIndex:23583},{level:3,title:"2. 模块化+命名空间",slug:"_2-模块化-命名空间",normalizedTitle:"2. 模块化+命名空间",charIndex:24853},{level:2,title:"五、Vue Router",slug:"五、vue-router",normalizedTitle:"五、vue router",charIndex:26184},{level:3,title:"1. 基本使用",slug:"_1-基本使用",normalizedTitle:"1. 基本使用",charIndex:26201},{level:3,title:"2. 几个注意点",slug:"_2-几个注意点",normalizedTitle:"2. 几个注意点",charIndex:26902},{level:3,title:"3. 嵌套路由",slug:"_3-嵌套路由",normalizedTitle:"3. 嵌套路由",charIndex:27078},{level:3,title:"4. 路由的query参数",slug:"_4-路由的query参数",normalizedTitle:"4. 路由的query参数",charIndex:27549},{level:3,title:"5. 命名路由",slug:"_5-命名路由",normalizedTitle:"5. 命名路由",charIndex:27967},{level:3,title:"6. 路由的params参数",slug:"_6-路由的params参数",normalizedTitle:"6. 路由的params参数",charIndex:28798},{level:3,title:"7.路由的props配置",slug:"_7-路由的props配置",normalizedTitle:"7.路由的props配置",charIndex:29631},{level:3,title:"8. replace属性",slug:"_8-replace属性",normalizedTitle:"8. replace属性",charIndex:30036},{level:3,title:"9. 编程式路由导航",slug:"_9-编程式路由导航",normalizedTitle:"9. 编程式路由导航",charIndex:30224},{level:3,title:"10. 缓存路由组件",slug:"_10-缓存路由组件",normalizedTitle:"10. 缓存路由组件",charIndex:30640},{level:3,title:"11. 路由守卫",slug:"_11-路由守卫",normalizedTitle:"11. 路由守卫",charIndex:30791},{level:4,title:"全局守卫",slug:"全局守卫",normalizedTitle:"全局守卫",charIndex:30818},{level:4,title:"独享守卫",slug:"独享守卫",normalizedTitle:"独享守卫",charIndex:30823},{level:4,title:"组件内守卫",slug:"组件内守卫",normalizedTitle:"组件内守卫",charIndex:30828}],headersStr:"一、Vue核心 1. 初识 Vue 2. 模板语法 3. 数据代理 4. 事件处理 1. 绑定监听 2. 事件修饰符 3. 按键修饰符 5. 属性监听与计算 6. 数据监视原理 7. 列表渲染 1. 列表显示 2. key原理 8. Vue指令 1.常用内置指令 2. 自定义指令 9. 生命周期 1. 定义 2. 周期类别 3. 执行情况 二、Vue组件化编程 1. 非单文件组件 1. 组件创建 2.组件嵌套 3. 组件本质 4. 内置关系 2. 单文件组件 3. 相关小知识 1. ref标签属性 2. props配置项 3. mixin配置项 4. 插件 5. scoped-样式 6. nextTick 7. slot-插槽 4. 自定义事件 5. 全局事件总线 三、Vue脚手架使用 1. 安装 2. 创建一个项目 3. 组件化编码流程 4. 配置代理 四、Vuex 1. 四个map方法的使用 2. 模块化+命名空间 五、Vue Router 1. 基本使用 2. 几个注意点 3. 嵌套路由 4. 路由的query参数 5. 命名路由 6. 路由的params参数 7.路由的props配置 8. replace属性 9. 编程式路由导航 10. 缓存路由组件 11. 路由守卫 全局守卫 独享守卫 组件内守卫",content:"# 一、Vue核心\n\n\n# 1. 初识 Vue\n\n① 要用vue必须拥有一个vue实例且需要传入配置对象\n\n② html中容器需要与一个vue实例绑定且为一 一对应关系，容器中的代码为【vue模板】\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>初始vue</title>\n    // 引入vue\n    <script src=\"./js/vue.js\"><\/script>\n</head>\n\n<body>\n    <div id=\"root\">\n        <h1>hello,{{name}}</h1>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n         // 创建vue实例\n        let vueConf = {\n            // 绑定对应容器\n            el: \"#root\",\n            data() {\n                return {\n                    name: \"ming\"\n                }\n            },\n        }; \n        const vm = new Vue(vueConf);\n    <\/script>\n</body>\n</html>\n\n\n\n# 2. 模板语法\n\nhtml 中包含了一些 JS 语法代码，语法分为两种，分别为：\n\n 1. 插值语法（双大括号表达式）\n 2. 指令（以 v-开头）\n\n插值语法：\n\n 1. 功能: 用于解析标签体内容\n 2. 语法: {{xxx}} ，xxxx 会作为 js 表达式解析\n\n指令语法：\n\n 1. 功能: 解析标签属性、解析标签体内容、绑定事件\n 2. 举例：v-bind:href = 'xxxx' ，xxxx 会作为 js 表达式被解析\n 3. 说明：Vue 中有有很多的指令，此处只是用 v-bind 举个例子\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>初始vue</title>\n    <script src=\"./js/vue.js\"><\/script>\n</head>\n\n<body>\n    <div id=\"root\">\n        <h1>插值语法:</h1>\n        <h2>hello,{{name}}</h2>\n        <hr/>\n        <h1>指令语法:</h1>\n        <a :href=\"url\">百度</a>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        // 创建vue实例\n        let vueConf = {\n            // 绑定对应容器\n            el: \"#root\",\n            data() {\n                return {\n                    name: \"ming\",\n                    url: \"https://www.baidu.com\"\n                }\n            },\n        }; \n        const vm = new Vue(vueConf);\n    <\/script>\n</body>\n</html>\n\n\n\n# 3. 数据代理\n\n<script>\n    // 被代理对象\n    let obj = {\n        name: \"ming\",\n        url: \"https://www.baidu.com\",\n    };\n    // 代理对象\n    let age = 12;\n\n    // 数据代理\n    Object.defineProperty(obj, \"age\", {\n        get() {\n            console.log(\"obj.age进行读取\")\n            return age;\n        },\n        set(value) {\n            console.log(\"obj.age进行写入\")\n            age = value;\n        }\n    });\n<\/script>\n\n\n\n# 4. 事件处理\n\n# 1. 绑定监听\n\n 1. v-on:xxx=\"fun\"\n 2. @xxx=\"fun\"\n 3. @xxx=\"fun(参数)\"\n 4. 默认事件形参: event\n 5. 隐含属性对象: $event\n\n# 2. 事件修饰符\n\n例：@click.stop.prevent(按顺序执行)\n\n * .stop：等同于JavaScript中的event.stopPropagation()，防止事件冒泡\n * .prevent：等同于JavaScript中的event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）\n * .capture：与事件冒泡的方向相反，事件捕获由外到内\n * .self：只会触发自己范围内的事件，不包含子元素\n * .once：只会触发一次\n\n# 3. 按键修饰符\n\n在JavaScript事件中除了前面所说的事件，还有键盘事件，也经常需要监测常见的键值。在Vue中允许v-on在监听键盘事件时添加关键修饰符。记住所有的keyCode比较困难，所以Vue为最常用的键盘事件提供了别名：\n\n例：@keyup.enter\n\n键盘：\n\n * .enter：回车键\n * .tab：制表键\n * .delete：含delete和backspace键\n * .esc：返回键\n * .space: 空格键\n * .up：向上键\n * .down：向下键\n * .left：向左键\n * .right：向右键\n\n鼠标：\n\n * .left：鼠标左键\n * .middle：鼠标中间滚轮\n * .right：鼠标右键\n\n\n# 5. 属性监听与计算\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>天气案例_监视属性</title>\n    <script src=\"./js/vue.js\"><\/script>\n</head>\n<body>\n    <div id=\"root\">\n        <h2>现在季节为{{weather}}</h2>\n        <button @click=\"changeWeather()\">切换季节</button>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        const vm = new Vue({\n            el: \"#root\",\n            data() {\n                return {\n                    status: true\n                }\n            },\n            // 计算\n            computed: {\n                /* weather: {\n                    // 调用weather或者用来计算的属性status变化时执行\n                    get() {\n                        console.log(\"weather被使用了\")\n                        return this.status ? '春天' : '冬天';\n                    },\n                    set(value) {\n                        console.log(\"weather被修改了\")\n                        this.status = value;\n                    }\n\n                }, */\n                // 简写不包含set()\n                weather() {\n                    return this.status ? '春天' : '冬天';\n                }\n            },\n            // 监听\n            watch: {\n                weather: {\n                    // 是否马上执行\n                    //immediate: true,\n                    // 开启深度监视，VUE在watch中默认不监视对象里面的值的改变\n                    //deep: true,\n                    handler(newValue, oldValue) {\n                        console.log(\"季节变化了\", oldValue + \"--\x3e\" + newValue)\n                    }\n                }\n            },\n            methods: {\n                changeWeather() {\n                    this.status = !this.status;\n                }\n            },\n        })\n    <\/script>\n</body>\n</html>\n\n\n\n# 6. 数据监视原理\n\nvue会监视data中所有层次的数据。\n\n如何监测对象中的数据？ 通过setter实现监视，且要在new Vue时就传入要监测的数据。 (1).对象中后追加的属性，Vue默认不做响应式处理 (2).如需给后添加的属性做响应式，请使用如下API： Vue.set(target，propertyName/index，value) 或 vm.$set(target，propertyName/index，value)\n\n如何监测数组中的数据？ 通过包裹数组更新元素的方法实现，本质就是做了两件事： (1). 调用原生对应的方法对数组进行更新。 (2). 重新解析模板，进而更新页面。\n\n在Vue修改数组中的某个元素一定要用如下方法： (1). 使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse() (2). Vue.set() 或 vm.$set()\n\n<script>\n  let data = {\n            name: 'a',\n            age: 1,\n            person: {\n                name: \"chs\"\n            }\n        }\n\n        // 用来监视data属性变化\n        function Observer(obj) {\n            // 获取data中所有属性\n            const keys = Object.keys(obj);\n            keys.forEach(key => {\n                // 属性值\n                let val = data[key];\n                Object.defineProperty(this, key, {\n                    get() {\n                        console.log(`data中${key}被读取了，值为${val}`)\n                        return val;\n                    },\n                    set(newVal) {\n                        console.log(`data中${key}被修改了从${val}--\x3e${newVal}`)\n                        val = newVal;\n                    }\n                })\n            })\n        }\n        const obj = new Observer(data);\n        let vm = {};\n        vm._data = data = obj;\n<\/script>\n\n\n\n# 7. 列表渲染\n\n# 1. 列表显示\n\nv-for:\n\n用于展示列表数据\n\n * 语法：v-for=\"(item, index) in xxx\" :key=\"yyy\"\n * 可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）\n * 数组: (item, index)\n * 对象: (value, key)\n * 字符串：(char, index)\n * 数字：(number, index)\n\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>基本列表</title>\n    <script src=\"./js/vue.js\"><\/script>\n    <style>\n        * {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"root\">\n        <input type=\"text\" name=\"\" v-model=\"keyWords\">\n        <button @click=\"sortType = 0\">原顺序</button>\n        <button @click=\"sortType = 1\">年龄升序</button>\n        <button @click=\"sortType = 2\">年龄降序</button>\n        <ul>\n            <li v-for=\"(item, index) in filPerson\" :key=\"item.id\">\n                {{item.name}} - {{item.age}}\n            </li>\n        </ul>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        const vm = new Vue({\n            el: \"#root\",\n            data() {\n                return {\n                    keyWords: \"\",\n                    // 排序类型 0：原顺序，1：升序，2：降序\n                    sortType: 0,\n                    person: [\n                        { id: \"01\", name: \"张三\", age: 31 },\n                        { id: \"02\", name: \"王二\", age: 22 },\n                        { id: \"03\", name: \"李二\", age: 13 },\n                        { id: \"04\", name: \"张飞\", age: 45 },\n                        { id: \"05\", name: \"许飞\", age: 23 },\n                    ]\n                }\n            },\n            computed: {\n\n                filPerson() {\n                    // 人员过滤\n                    const arr = this.person.filter((item) => {\n                        return item.name.indexOf(this.keyWords) !== -1;\n                    })\n\n                    // 年龄排序\n                    if (this.sortType) {\n                        arr.sort((a, b) => {\n                            return this.sortType === 1 ? a.age - b.age : b.age - a.age;\n                        })\n                    }\n                    return arr;\n                }\n            },\n        })\n    <\/script>\n</body>\n\n</html>\n\n\n# 2. key原理\n\n 1. 虚拟DOM中key的作用： key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：\n\n 2. 对比规则： (1). 旧虚拟DOM中找到了与新虚拟DOM相同的key： ①若虚拟DOM中内容没变, 直接使用之前的真实DOM ②若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n    \n    (2). 旧虚拟DOM中未找到与新虚拟DOM相同的key创建新的真实DOM，随后渲染到到页面。\n\n 3. 用index作为key可能会引发的问题： (1). 若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低 (2). 如果结构中还包含输入类的DOM： 会产生错误DOM更新 ==>界面有问题\n\n 4. 开发中如何选择key: (1). 最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。 (2). 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。\n\n\n# 8. Vue指令\n\n# 1.常用内置指令\n\n * v-text: 更新元素的 textContent\n\n * v-html: 更新元素的 innerHTML\n\n * v-if: 如果为true, 当前标签才会输出到页面\n\n * v-else: 如果为false, 当前标签才会输出到页面\n\n * v-show : 通过控制display样式来控制显示/隐藏\n\n * v-for : 遍历数组/对象\n\n * v-on: 绑定事件监听, 一般简写为@\n\n * v-bind : 强制绑定解析表达式, 可以省略v-bind\n\n * v-model: 双向数据绑定\n\n * v-text : 更新元素的 textContent\n   \n   作用：向其所在的节点中渲染文本内容。 与插值语法的区别：v-text会替换掉节点中的内容，{{xx}}则不会\n\n * v-html : 更新元素的 innerHTML 作用：向指定节点中渲染包含html结构的内容。 与插值语法的区别： (1). v-html会替换掉节点中所有的内容，{{xx}}则不会。 (2). v-html可以识别html结构。 严重注意：v-html有安全性问题！！！！ (1). 在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。 (2). 一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！\n\n * **v-once😗*所在节点在初次动态渲染后，就视为静态内容了。以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。\n\n * **v-pre：**跳过其所在节点的编译过程。\n\n * ref : 为某个元素注册一个唯一标识, vue对象通过$refs属性访问这个元素对象\n\n * v-cloak : 使用它防止闪现表达式, 与css配合: [v-cloak] { display: none }\n   \n   本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。 使用css配合v-cloak可以解决网速慢时页面展示出{{xxx}}的问题\n\n# 2. 自定义指令\n\n自定义指令directives中的this为windows并不是Vue\n\n<script>\n        // 局部指令\n        new Vue({\n            el: '#root',\n            data: {},\n            directives: {\n                // 指令名: v-fbind 如果指令名有多个单词则使用'-'连接不能使用驼峰形式 例：fbind-text-or-number\n                'fbind': {\n                    // 指令与元素成功绑定时调用\n                    bind(element, binding) {\n                        element.value = binding.value\n                    },\n                    // 指令所在元素被插入页面时调用\n                    inserted(element, binding) {\n                        element.focus()\n                    },\n                    // 指令所在的模板被重新解析时调用\n                    update(element, binding) {\n                        element.value = binding.value\n                    }\n                }\n            }\n        })\n\n        // 全局指令\n        Vue.directive('fbind', {\n            // 指令与元素成功绑定时\n            bind(element, binding) {\n                element.value = binding.value\n            },\n            // 指令所在元素被插入页面时\n            inserted(element, binding) {\n                element.focus()\n            },\n            // 指令所在的模板被重新解析时\n            update(element, binding) {\n                element.value = binding.value\n            }\n        })\n<\/script>\n\n\n\n# 9. 生命周期\n\n# 1. 定义\n\n * 生命周期回调函数、生命周期函数、生命周期钩子。\n * Vue在关键时刻帮我们调用的一些特殊名称的函数。\n * 生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。\n * 生命周期函数中的this指向是vm 或 组件实例对象。\n\n# 2. 周期类别\n\n**beforeCreate😗*初始化数据监测和数据代理之前调用\n\n> 此时data中的数据和methods中的方法不能访问\n\n**created😗*初始化数据监测和数据代理之后调用\n\n> 此时data中的数据和methods中的方法可以访问，在created后beforeMount之前会开始解析Vue模板生成虚拟DOM\n\n**beforeMount😗*挂载完成之前\n\n> 此时Vue模板已经被解析且生成了虚拟DOM所以此时修改DOM是无效的\n\n**mounted😗*挂载完成后\n\n> Vue完成模板解析并把初始的真实DOM中的元素放入页面后（挂载完毕）调用mounted()\n\n**beforeUpdate😗*页面更新之前\n\n> 此时model已经被更新了但是view还没有更新，在更新前到更新后之间会生成新的虚拟DOM然后与旧的DOM进行diff并对view进行渲染\n\n**updated😗*页面更新后\n\n> 此时页面与数据都更新完成\n\nbeforeDestroy: 销毁之前\n\n**destroyed😗*销毁后\n\n**activated😗*路由组件被激活时触发\n\n**deactivated😗*路由组件失活时触发\n\n# 3. 执行情况\n\n 1. 在页面一加载就会调用beforeCreate --\x3e created --\x3e beforeMount --\x3e mounted此时会完成第一次的模板解析并进行view的渲染。\n 2. 此后每更新一次data都会调用beforeCreate和created完成model对view的更新\n\n\n# 二、Vue组件化编程\n\n\n# 1. 非单文件组件\n\n步骤：\n\n 1. 定义组件（创建组件）\n 2. 注册组件\n 3. 使用组件（写组件标签）\n\n组件命名：\n\n * kebab-case命名: my-school\n * CamelCase命名: MySchool\n\n# 1. 组件创建\n\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>组件使用</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"><\/script>\n</head>\n<body>\n    \x3c!-- 准备好一个容器--\x3e\n    <div id=\"root\">\n        <hello></hello>\n        <hr>\n        <h1>{{msg}}</h1>\n        <hr>\n        \x3c!-- 第三步：编写组件标签 --\x3e\n        <school></school>\n        <hr>\n        \x3c!-- 第三步：编写组件标签 --\x3e\n        <student></student>\n    </div>\n\n    <div id=\"root2\">\n        <hello></hello>\n    </div>\n</body>\n\n<script type=\"text/javascript\">\n    Vue.config.productionTip = false\n\n    // 创建school组件 Vue.extend({})与new Vue({})里面配置对象基本类似\n    const school = Vue.extend({\n        // 不需要绑定el:\"\",因为组件可能要为多个容器服务\n        template: `\n\t\t\t\t<div class=\"demo\">\n\t\t\t\t\t<h2>学校名称：{{schoolName}}</h2>\n\t\t\t\t\t<h2>学校地址：{{address}}</h2>\n\t\t\t\t\t<button @click=\"showName\">点我提示学校名</button>\t\n\t\t\t\t</div>\n\t\t\t`,\n        // 数据对象必须为函数返回的对象,防止不同容器数据对象指向同一地址\n        data() {\n            return {\n                schoolName: '尚硅谷',\n                address: '北京昌平'\n            }\n        },\n        methods: {\n            showName() {\n                alert(this.schoolName)\n            }\n        },\n    })\n\n    const student = Vue.extend({\n        template: `\n\t\t\t\t<div>\n\t\t\t\t\t<h2>学生姓名：{{studentName}}</h2>\n\t\t\t\t\t<h2>学生年龄：{{age}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                studentName: '张三',\n                age: 18\n            }\n        }\n    })\n\n    // 创建hello组件\n    const hello = Vue.extend({\n        template: `\n\t\t\t\t<div>\t\n\t\t\t\t\t<h2>你好啊！{{name}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                name: 'Tom'\n            }\n        }\n    })\n\n    //创建vm\n    new Vue({\n        el: '#root',\n        data: {\n            msg: '你好啊！'\n        },\n        // 局部注册组件\n        components: {\n            school,\n            student,\n            hello\n        }\n    })\n\t// 全局注册组件\n    Vue.component('hello', hello)\n    new Vue({\n        el: '#root2',\n    })\n<\/script>\n</html>\n\n\n# 2.组件嵌套\n\n<script type=\"text/javascript\">\n    Vue.config.productionTip = false\n    // 1.创建student组件作为子组件\n    const student = Vue.extend({\n        template: `\n\t\t\t\t<div>\n\t\t\t\t\t<h2>学生姓名：{{studentName}}</h2>\n\t\t\t\t\t<h2>学生年龄：{{age}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                studentName: '小明',\n                age: 18\n            }\n        }\n    })\n\n    // 2.创建school组件作为父组件\n    const school = Vue.extend({\n        template: `\n\t\t\t\t<div>\n\t\t\t\t\t<h2>学校名称：{{schoolName}}</h2>\n                    <h2>学校地址：{{address}}</h2>\n                    <student></student>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                schoolName: '希望小学',\n                address: '中国'\n            }\n        },\n        // 组件中嵌套子组件\n        components: {\n            student\n        }\n    })\n\n    // 创建hello组件\n    const hello = Vue.extend({\n        template: `\n\t\t\t\t<div>\t\n\t\t\t\t\t<h2>你好啊！{{name}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                name: '小明'\n            }\n        }\n    })\n\n    // 3.创建一个app组件来管理所有组件\n    const app = Vue.extend({\n        template: `\n                <div>\n                    <school></school>\n                    <hello></hello>\n                </div>\n                `,\n        components: {\n            school,\n            hello\n        }\n    })\n\n    new Vue({\n        template:`<app></app>`,\n        el: '#root',\n        data: {\n            msg: '你好啊！'\n        },\n        // 注册组件（局部注册）\n        components: {\n            app\n        }\n    })\n<\/script>\n\n\n# 3. 组件本质\n\n 1. 组件实质是一个VueComponent构造函数\n 2. 使用Vue.extend(options)创建组件时Vue会定义一个VueComponent并返回，所以每个VueComponent都是不同的\n 3. Vue解析模板使用组件时会new VueComponent(options)\n\nVue.extend = function (extendOptions) {\n\t......\n      var Sub = function VueComponent (options) {\n        this._init(options);\n      };\n    ......\n      return Sub\n    };\n  }\n\n\n# 4. 内置关系\n\n**prototype: ** 显式原型对象存在于类中\n\n__proto__ : 隐式原型对象存在于对象中\n\n每个对象都有一个原型对象，通过函数创建的对象也将拥有这个原型对象。原型是一个指向对象的指针。\n\n * 可以将原型理解为对象的父亲，对象从原型对象继承来属性\n * 所有函数的原型默认是 Object的实例，所以这是可以使用toString/toValues/isPrototypeOf 等方法的原因\n * 使用原型对象为多个对象共享属性或方法\n * 如果对象本身不存在属性或方法将到原型上查找\n * 使用原型可以解决，通过构造函数创建对象时复制多个函数造成的内存占用问题\n * 原型包含 constructor 属性，指向构造函数\n * 对象包含 __proto__ 指向他的原型对象\n\n\n\n\n# 2. 单文件组件\n\n以.vue后缀结尾的文件就是一个组件\n\nSchool.vue\n\n<template>\n  <div>\n    <h2>学校名:{{ name }}</h2>\n    <h2>学校地址:{{ address }}</h2>\n    <button @click=\"flag = !flag\">点击修改地址</button>\n    <br>\n    <input v-show=\"flag\" @keyup.enter=\"hideText()\" v-model=\"address\" type=\"text\">\n    <hr>\n    <student></student>\n  </div>\n</template>\n<script>\nimport student from \"./Student.vue\"\nexport default {\n  name: \"school\",\n  components: {\n    student,\n  },\n  data() {\n    return {\n      name: \"希望小学\",\n      address: \"中国\",\n      flag: false,\n    };\n  },\n  methods: {\n    hideText() {\n      this.flag = !this.flag;\n    },\n  },\n};\n<\/script>\n\n\nStudent.vue\n\n<template>\n  <div>\n    <h2>学生姓名:{{ name }}</h2>\n    <h2>学生年龄:{{ age }}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"student\",\n  data() {\n    //这里存放数据\n    return {\n      name: \"小明\",\n      age: 13,\n    };\n  },\n};\n<\/script>\n\n\nApp.vue: 管理所有组件\n\n<template>\n  <div>\n    <school></school>\n  </div>\n</template>\n\n<script>\nimport school from \"./School.vue\";\nexport default {\n  name: \"app\",\n  components: {\n    school,\n  },\n};\n<\/script>\n\n\nmain.js\n\nimport app from './App.vue'\n\nnew Vue({\n\tel: '#root',\n\tcomponent: {app},\n})\n\n\n\n\n\n# 3. 相关小知识\n\n# 1. ref标签属性\n\n * 被用来给元素或子组件注册引用信息（id的替代者）\n * 应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象\n * 使用方式： 打标识：\n   \n   \n   .....\n   \n   或 获取：this.$refs.xxx\n\n# 2. props配置项\n\n作用：接受父组件传过来的数据\n\n说明: props中的数据是只读的不能进行修改,如果需要修改可以用data中的属性来接收props中需要修改的属性\n\n\x3c!-- 传递数据 --\x3e\n<school name=\"aa\" address=\"bb\"></school>\n\n<script>\n    // 第一种：简单接收\n    props: ['name','address']\n   \t// 第二种：限制类型\n    props: {\n    \tname:String,\n       \taddress: String    \n  \t}\n    // 第三种：限制类型，必要性，默认值\n    props: {\n        name: {\n          type: String,\n          required: true,\n        },\n        address: {\n          type: String,\n          default: \"xxx\",\n        }\n \t }\n<\/script>\n\n\n# 3. mixin配置项\n\n作用：将多个组件共用配置提取成一个混入对象\n\n// 1.定义混入(外部定义一个x.js)\ndefault const mx = {\ndata() {\n    return {\n        xxx:xxx\n    }\n},\n    ...\n}\n\n// 2.引入混入\n// (1)局部引入\nimport {mx} from 'xxx/x.js '\n// 使用\nmixins:[mx]\n// (2)全局引入\nVue.mixin(mx)\n\n\n\n# 4. 插件\n\n 1. 功能：用于增强Vue\n 2. 本质：包含install方法的一个对象，install的第一个参数是Vue，后面的参数是插件使用者传递的数据\n 3. 使用：Vue.use(pl,args...)\n\nconst pl = {\n    install(Vue,args...) {\n        ....\n    }\n}\n\n\n# 5. scoped-样式\n\n作用：让样式在局部生效，防止冲突。\n\n<style scoped>\n</style>\n\n\n# 6. nextTick\n\n作用：在下一次DOM更新结束后执行指定回调\n\n说明：当数据改变后想要基于更新后的DOM进行操作时使用\n\n语法：this.$nextTick(回调)\n\n# 7. slot-插槽\n\n * 作用：接受父组件传过来的HTML结构\n\n * 分类：默认插槽、具名插槽、作用域插槽\n\n * 使用：\n   \n   1. 默认插槽\n      \n      \x3c!-- 父组件 --\x3e\n      <template>\n          <Search>\n              <div>xxx</div>\n          </Search>\n      </template>\n      \n      \x3c!-- 子组件 --\x3e\n      <template>\n          <div>\n              <slot>默认内容</slot>\n          </div>\n      </template>\n      \n   \n   2. 具名插槽\n      \n      \x3c!-- 父组件 --\x3e\n      <template>\n          <Search>\n              <div slot=\"center\">xxx</div>\n              <template slot=\"footer\">\n              \t<div>xxx</div>\n      \t\t</template>\n          </Search>\n      </template>\n      \n      \x3c!-- 子组件 --\x3e\n      <template>\n          <div>\n              <slot name=\"center\">默认内容</slot>\n              <slot name=\"footer\">默认内容</slot>\n          </div>\n      </template>\n      \n   \n   3. 作用域插槽\n      \n      \x3c!-- 父组件 --\x3e\n      <template>\n          <Search>\n              <div slot=\"center\" slot-scope=\"data\">{{data.msg}}</div>\n              <template slot=\"footer\">\n              \t<div>xxx</div>\n      \t\t</template>\n          </Search>\n      </template>\n      \n      \x3c!-- 子组件 --\x3e\n      <template>\n          <div>\n              <slot name=\"center\" msg=\"向父组件传递的数据\">默认内容</slot>\n              <slot name=\"footer\">默认内容</slot>\n          </div>\n      </template>\n      \n\n\n# 4. 自定义事件\n\n\x3c!-- 方式一 通过v-on绑定一个custom事件触发deleteName方法 --\x3e\n<School @custom=\"deleteName\"></School>\n\x3c!-- 方式二 通过this.$refs.xxx.$on --\x3e\n<School ref=\"st\"></School>\nmounted() {\n\tthis.$refs.st.$on('custom', this.deleteName)\n}\n\x3c!-- 子组件中触发事件 --\x3e\nthis.$emit('custom', studentName)\n\n\n\n局限：\n\n 1. 此方式只用于子组件向父组件发送消息(数据)\n 2. 问题: 隔代组件或兄弟组件间通信此种方式不合适\n\n\n# 5. 全局事件总线\n\nnew Vue({\n\t......\n\tbeforeCreate() {\n    \t// 安装全局事件总线，$bus就是当前应用的vm\n\t\tVue.prototype.$bus = this \n\t},\n    ......\n}) \n\n\n使用:\n\nmounted() {\n  // 父组件在总线上绑定事件\n  this.$bus.$on('xxxx',this.demo)\n}\n\n\n// 子组件触发事件\nmethods: {\n   xx() {\n     this.$bus.$emit('xxxx',param)  \n   } \n},\nbeforeDestroy() {\n    // 组件销毁时用$off解绑当前组件所用到的事件。\n    this.$bus.$off(\"xxxx\")\n}\n\n\n\n# 三、Vue脚手架使用\n\nnpm                                     yarn\n\nnpm init                                yarn init              // 初始化\nnpm i | install                         yarn  (install)        // 安装依赖包\nnpm i x --S | --save                    yarn add  x            // 安装生产依赖并保存包名\nnpm i x --D | --save-dev                yarn add x -D          // 安装开发依赖并保存包名\nnpm un | uninstall  x                   yarn remove            // 删除依赖包\nnpm i -g | npm -g i x                   yarn global add x      // 全局安装\nnpm un -g x                             yarn global remove x   // 全局下载\nnpm run dev                             yarn dev | run dev     // 运行命令\n\n\n\n# 1. 安装\n\nnpm install -g @vue/cli\n# OR\nyarn global add @vue/cli\n\n\n检查其版本是否正确：\n\nvue --version\n\n\n\n# 2. 创建一个项目\n\nvue create hello-world\n\n\n帮助命令\n\nvue create --help\n\n\n  -p, --preset &lt;presetName>       忽略提示符并使用已保存的或远程的预设选项\n  -d, --default                   忽略提示符并使用默认预设选项\n  -i, --inlinePreset &lt;json>       忽略提示符并使用内联的 JSON 字符串预设选项\n  -m, --packageManager &lt;command>  在安装依赖时使用指定的 npm 客户端\n  -r, --registry &lt;url>            在安装依赖时使用指定的 npm registry\n  -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息\n  -n, --no-git                    跳过 git 初始化\n  -f, --force                     覆写目标目录可能存在的配置\n  -c, --clone                     使用 git clone 获取远程预设选项\n  -x, --proxy                     使用指定的代理创建项目\n  -b, --bare                      创建项目时省略默认组件中的新手指导信息\n  -h, --help                      输出使用帮助信息\n\n\n使用图形化界面\n\n你也可以通过 vue ui 命令以图形化界面创建和管理项目：\n\nvue ui\n\n\n上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。\n\n\n# 3. 组件化编码流程\n\n(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。\n\n(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：\n\n1).一个组件在用：放在组件自身即可。\n\n2). 一些组件在用：放在他们共同的父组件上（状态提升）。\n\n(3).实现交互：从绑定事件开始。\n\nprops适用于： (1).父组件 ==> 子组件 通信\n\n(2).子组件 ==> 父组件 通信（要求父先给子一个函数）\n\n使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！\n\nprops传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。\n\n\n# 4. 配置代理\n\nvue.config.js中配置代理规则:\n\n 1. \n\n// 这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到`http://localhost:4000`。\nmodule.exports = {\n  devServer: {\n    proxy: 'http://localhost:4000'\n  }\n}\n\n\n * 优点：配置简单\n * 缺点：不能配置多个代理以及是否走代理\n\n 2. \n\nmodule.exports = {\n  devServer: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:4000',\n        // 是否启用websocket\n        ws: true,\n        changeOrigin: true,\n        // 匹配正则的路径替换为''\n        pathRewrite: {'^api': ''}\n      },\n      '/foo': {\n        target: 'http://localhost:5000'\n      }\n    }\n  }\n}\n\n\n\n# 四、Vuex\n\n概念：在Vue中实现集中式状态(数据)管理的一个插件，对多个组件的共享数据进行集中式管理，是一种组件间通信的方式\n\n状态自管理应用包含以下几个部分：\n\n * state，驱动应用的数据源；\n * view，以声明方式将 state 映射到视图；\n * actions，响应在 view 上的用户输入导致的状态变化。\n\n“单向数据流”理念的简单示意：\n\n多个组件共享状态时，单向数据流的简洁性很容易被破坏：\n\n * 多个组件依赖于同一数据\n\n * 不同组件的行为需要改变同一数据\n\n引入：\n\n./store/index.js\n\n/**\n * 创建Vuex中的核心store\n */\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n// 使用插件\nVue.use(Vuex);\n// 响应组件中的动作\nconst actions = {};\n\n// 加工数据(state)\nconst mutations = {};\n\n// 存储数据\nconst state = {};\n\n// 当state中的数据需要经过加工后再使用时，可以使用getters加工。\nconst getters = {};\n\nexport  default new Vuex.Store({\n    actions,\n    mutations,\n    state,\n    getters\n})\n\n\n\nmain.js\n\nimport Vue from 'vue'\nimport App from './App'\nimport store from './store/index'\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n  store,\n}).$mount('#app')\n\n\n\n使用：\n\nmethods: {\n  increment() {\n    // 分发 Action\n    this.store.dispatch('increment',args)\n    // 直接处理 this.$store.commit('increment')\n    console.log(this.$store.state.count)\n  }\n}\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  // mutation 必须是同步函数\n  mutations: {\n    increment (state,value) {\n      state.count++\n    }\n  },\n  actions: {\n    // context为上下文相当于mini的store\n    increment (context,value) {\n      // 提交载荷（Payload）\n      context.commit('increment')\n    }\n  }\n})\n\n\n\n# 1. 四个map方法的使用\n\n 1. mapState方法：用于帮助我们映射state中的数据为计算属性\n    \n    computed: {\n        //借助mapState生成计算属性：sum、school、subject（对象写法）\n         ...mapState({sum:'sum',school:'school',subject:'subject'}),\n             \n        //借助mapState生成计算属性：sum、school、subject（数组写法）\n        ...mapState(['sum','school','subject']),\n    },\n    \n\n 2. mapGetters方法：用于帮助我们映射getters中的数据为计算属性\n    \n    computed: {\n        //借助mapGetters生成计算属性：bigSum（对象写法）\n        ...mapGetters({bigSum:'bigSum'}),\n    \n        //借助mapGetters生成计算属性：bigSum（数组写法）\n        ...mapGetters(['bigSum'])\n    },\n    \n\n 3. mapActions方法：用于帮助我们生成与actions对话的方法，即：包含$store.dispatch(xxx)的函数\n    \n    methods:{\n        //靠mapActions生成：incrementOdd、incrementWait（对象形式）\n        ...mapActions({incrementOdd:'jiaOdd',incrementWait:'jiaWait'})\n    \n        //靠mapActions生成：incrementOdd、incrementWait（数组形式）\n        ...mapActions(['jiaOdd','jiaWait'])\n    }\n    \n\n 4. mapMutations方法：用于帮助我们生成与mutations对话的方法，即：包含$store.commit(xxx)的函数\n    \n    methods:{\n        //靠mapActions生成：increment、decrement（对象形式）\n        ...mapMutations({increment:'JIA',decrement:'JIAN'}),\n        \n        //靠mapMutations生成：JIA、JIAN（对象形式）\n        ...mapMutations(['JIA','JIAN']),\n    }\n    \n\n> 备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\n\n\n# 2. 模块化+命名空间\n\n 1. 目的：让代码更好维护，让多种数据分类更加明确。\n\n 2. 修改store.js\n    \n    const countAbout = {\n      namespaced:true,//开启命名空间\n      state:{x:1},\n      mutations: { ... },\n      actions: { ... },\n      getters: {\n        bigSum(state){\n           return state.sum * 10\n        }\n      }\n    }\n    \n    const personAbout = {\n      namespaced:true,//开启命名空间\n      state:{ ... },\n      mutations: { ... },\n      actions: { ... }\n    }\n    \n    const store = new Vuex.Store({\n      modules: {\n        countAbout,\n        personAbout\n      }\n    })\n    \n\n 3. 开启命名空间后，组件中读取state数据：\n    \n    //方式一：自己直接读取\n    this.$store.state.personAbout.list\n    //方式二：借助mapState读取：\n    ...mapState('countAbout',['sum','school','subject']),\n    \n\n 4. 开启命名空间后，组件中读取getters数据：\n    \n    //方式一：自己直接读取\n    this.$store.getters['personAbout/firstPersonName']\n    //方式二：借助mapGetters读取：\n    ...mapGetters('countAbout',['bigSum'])\n    \n\n 5. 开启命名空间后，组件中调用dispatch\n    \n    //方式一：自己直接dispatch\n    this.$store.dispatch('personAbout/addPersonWang',person)\n    //方式二：借助mapActions：\n    ...mapActions('countAbout',{incrementOdd:'jiaOdd',incrementWait:'jiaWait'})\n    \n\n 6. 开启命名空间后，组件中调用commit\n    \n    //方式一：自己直接commit\n    this.$store.commit('personAbout/ADD_PERSON',person)\n    //方式二：借助mapMutations：\n    ...mapMutations('countAbout',{increment:'JIA',decrement:'JIAN'}),\n    \n\n\n# 五、Vue Router\n\n\n# 1. 基本使用\n\n 1. 安装vue-router，命令：yarn add vue-router\n\n 2. 应用插件：Vue.use(VueRouter)\n\n 3. 编写router配置项:\n    \n    // 引入VueRouter\n    import VueRouter from 'vue-router'\n    // 引入组件\n    import About from '../components/About'\n    import Home from '../components/Home'\n    \n    // 创建router实例对象，去管理一组一组的路由规则\n    const router = new VueRouter({\n    \troutes:[\n    \t\t{\n    \t\t\tpath:'/about',\n    \t\t\tcomponent:About\n    \t\t},\n    \t\t{\n    \t\t\tpath:'/home',\n    \t\t\tcomponent:Home\n    \t\t}\n    \t]\n    })\n    \n    // 暴露router\n    export default router\n    \n\n 4. 实现切换（active-class可配置高亮样式）\n    \n    <router-link active-class=\"active\" to=\"/about\">About</router-link>\n    \n\n 5. 指定展示位置\n    \n    <router-view></router-view>\n    \n\n\n# 2. 几个注意点\n\n 1. 路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。\n 2. 通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。\n 3. 每个组件都有自己的$route属性，里面存储着自己的路由信息。\n 4. 整个应用只有一个router，可以通过组件的$router属性获取到。\n\n\n# 3. 嵌套路由\n\n 1. 配置路由规则，使用children配置项：\n    \n    routes:[\n    \t{\n    \t\tpath:'/about',\n    \t\tcomponent:About,\n    \t},\n    \t{\n    \t\tpath:'/home',\n    \t\tcomponent:Home,\n    \t\tchildren:[ //通过children配置子级路由\n    \t\t\t{\n    \t\t\t\tpath:'news', //此处一定不要写：/news\n    \t\t\t\tcomponent:News\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\tpath:'message',//此处一定不要写：/message\n    \t\t\t\tcomponent:Message\n    \t\t\t}\n    \t\t]\n    \t}\n    ]\n    \n\n 2. 跳转（要写完整路径）：\n    \n    <router-link to=\"/home/news\">News</router-link>\n    \n\n\n# 4. 路由的query参数\n\n 1. 传递参数\n    \n    \x3c!-- 跳转并携带query参数，to的字符串写法 --\x3e\n    <router-link :to=\"/home/message/detail?id=666&title=你好\">跳转</router-link>\n    \t\t\t\t\n    \x3c!-- 跳转并携带query参数，to的对象写法 --\x3e\n    <router-link \n    \t:to=\"{\n    \t\tpath:'/home/message/detail',\n    \t\tquery:{\n    \t\t   id:666,\n                title:'你好'\n    \t\t}\n    \t}\"\n    >跳转</router-link>\n    \n\n 2. 接收参数：\n    \n    $route.query.id\n    $route.query.title\n    \n\n\n# 5. 命名路由\n\n 1. 作用：可以简化路由的跳转。\n\n 2. 如何使用\n    \n    1. 给路由命名：\n       \n       {\n       \tpath:'/demo',\n       \tcomponent:Demo,\n       \tchildren:[\n       \t\t{\n       \t\t\tpath:'test',\n       \t\t\tcomponent:Test,\n       \t\t\tchildren:[\n       \t\t\t\t{\n                           name:'hello' //给路由命名\n       \t\t\t\t\tpath:'welcome',\n       \t\t\t\t\tcomponent:Hello,\n       \t\t\t\t}\n       \t\t\t]\n       \t\t}\n       \t]\n       }\n       \n    \n    2. 简化跳转：\n       \n       \x3c!-- 简化前，需要写完整的路径 --\x3e\n       <router-link to=\"/demo/test/welcome\">跳转</router-link>\n       \n       \x3c!-- 简化后，直接通过名字跳转 --\x3e\n       <router-link :to=\"{name:'hello'}\">跳转</router-link>\n       \n       \x3c!-- 简化写法配合传递参数 --\x3e\n       <router-link \n       \t:to=\"{\n       \t\tname:'hello',\n       \t\tquery:{\n       \t\t   id:666,\n                   title:'你好'\n       \t\t}\n       \t}\"\n       >跳转</router-link>\n       \n\n\n# 6. 路由的params参数\n\n 1. 配置路由，声明接收params参数\n    \n    {\n    \tpath:'/home',\n    \tcomponent:Home,\n    \tchildren:[\n    \t\t{\n    \t\t\tpath:'news',\n    \t\t\tcomponent:News\n    \t\t},\n    \t\t{\n    \t\t\tcomponent:Message,\n    \t\t\tchildren:[\n    \t\t\t\t{\n    \t\t\t\t\tname:'xiangqing',\n    \t\t\t\t\tpath:'detail/:id/:title', //使用占位符声明接收params参数\n    \t\t\t\t\tcomponent:Detail\n    \t\t\t\t}\n    \t\t\t]\n    \t\t}\n    \t]\n    }\n    \n\n 2. 传递参数\n    \n    \x3c!-- 跳转并携带params参数，to的字符串写法 --\x3e\n    <router-link :to=\"/home/message/detail/666/你好\">跳转</router-link>\n    \t\t\t\t\n    \x3c!-- 跳转并携带params参数，to的对象写法 --\x3e\n    <router-link \n    \t:to=\"{\n    \t\tname:'xiangqing',\n    \t\tparams:{\n    \t\t   id:666,\n               title:'你好'\n    \t\t}\n    \t}\"\n    >跳转</router-link>\n    \n    \n    > 特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！\n\n 3. 接收参数：\n    \n    $route.params.id\n    $route.params.title\n    \n\n\n# 7.路由的props配置\n\n作用：让路由组件更方便的收到参数\n\n{\n\tname:'xiangqing',\n\tpath:'detail/:id',\n\tcomponent:Detail,\n\n\t// 第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件\n\t// props:{a:900}\n\n\t// 第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件\n\t// props:true\n\t\n\t// 第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件\n\tprops(route){\n\t\treturn {\n\t\t\tid:route.query.id,\n\t\t\ttitle:route.query.title\n\t\t}\n\t}\n}\n\n\n\n# 8. replace属性\n\n 1. 作用：控制路由跳转时操作浏览器历史记录的模式\n 2. 浏览器的历史记录有两种写入方式：分别为push和replace，push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push\n 3. 如何开启replace模式：<router-link replace .......>News</router-link>\n\n\n# 9. 编程式路由导航\n\n 1. 作用：不借助<router-link>实现路由跳转，让路由跳转更加灵活\n\n 2. 具体编码：\n    \n    //$router的两个API\n    this.$router.push({\n    \tname:'xiangqing',\n    \t\tparams:{\n    \t\t\tid:xxx,\n    \t\t\ttitle:xxx\n    \t\t}\n    })\n    \n    this.$router.replace({\n    \tname:'xiangqing',\n    \t\tparams:{\n    \t\t\tid:xxx,\n    \t\t\ttitle:xxx\n    \t\t}\n    })\n    this.$router.forward() //前进\n    this.$router.back() //后退\n    this.$router.go() //可前进也可后退\n    \n\n\n# 10. 缓存路由组件\n\n 1. 作用：让不展示的路由组件保持挂载，不被销毁。\n\n 2. 具体编码：\n    \n    <keep-alive include=\"News\"> \n        <router-view></router-view>\n    </keep-alive>\n    \n\n\n# 11. 路由守卫\n\n作用：对路由进行权限控制\n\n分类：全局守卫、独享守卫、组件内守卫\n\n完整的导航解析流程:\n\n 1.  导航被触发。\n 2.  在失活的组件里调用 beforeRouteLeave 守卫。\n 3.  调用全局的 beforeEach 守卫。\n 4.  在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n 5.  在路由配置里调用 beforeEnter。\n 6.  解析异步路由组件。\n 7.  在被激活的组件里调用 beforeRouteEnter。\n 8.  调用全局的 beforeResolve 守卫 (2.5+)。\n 9.  导航被确认。\n 10. 调用全局的 afterEach 钩子。\n 11. 触发 DOM 更新。\n 12. 调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。\n\n# 全局守卫\n\n每个守卫方法接收三个参数：\n\n * to: Route: 即将要进入的目标 路由对象\n\n * from: Route: 当前导航正要离开的路由\n\n * next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数\n   \n   * next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。\n   * next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。\n   * next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项\n   * next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调\n\n// 1.全局前置守卫：初始化时执行、每次路由切换前执行\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== 'Login' && !isAuthenticated) next({ name: 'Login' })\n  else next()\n})\n\n// 2.全局后置守卫：初始化时执行、每次路由切换后执行\nrouter.afterEach((to,from)=>{\n\tconsole.log('afterEach',to,from)\n\tif(to.meta.title){ \n\t\tdocument.title = to.meta.title //修改网页的title\n\t}else{\n\t\tdocument.title = 'vue_test'\n\t}\n})\n\n// 3.全局解析守卫 2.5.0 新增\n// 在 2.5.0+ 你可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。\n\n\n# 独享守卫\n\n在路由配置上直接定义 beforeEnter 守卫：\n\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      // 这些守卫与全局前置守卫的方法参数是一样的\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n\n\n# 组件内守卫\n\n可以在路由组件内直接定义以下路由导航守卫：\n\n * beforeRouteEnter\n * beforeRouteUpdate (2.2 新增)\n * beforeRouteLeave\n\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter(to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate(to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave(to, from, next) {\n    // 导航离开该组件的对应路由时调用\n    // 可以访问组件实例 `this`\n  }\n}\n\n\nbeforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。\n\n不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\nbeforeRouteEnter (to, from, next) {\n  next(vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n\n\n注意 beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。\n\nbeforeRouteUpdate (to, from, next) {\n  // just use `this`\n  this.name = to.params.name\n  next()\n}\n\n\n这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。\n\nbeforeRouteLeave (to, from, next) {\n  const answer = window.confirm('Do you really want to leave? you have unsaved changes!')\n  if (answer) {\n    next()\n  } else {\n    next(false)\n  }\n}\n",normalizedContent:"# 一、vue核心\n\n\n# 1. 初识 vue\n\n① 要用vue必须拥有一个vue实例且需要传入配置对象\n\n② html中容器需要与一个vue实例绑定且为一 一对应关系，容器中的代码为【vue模板】\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>初始vue</title>\n    // 引入vue\n    <script src=\"./js/vue.js\"><\/script>\n</head>\n\n<body>\n    <div id=\"root\">\n        <h1>hello,{{name}}</h1>\n    </div>\n    <script>\n        vue.config.productiontip = false;\n         // 创建vue实例\n        let vueconf = {\n            // 绑定对应容器\n            el: \"#root\",\n            data() {\n                return {\n                    name: \"ming\"\n                }\n            },\n        }; \n        const vm = new vue(vueconf);\n    <\/script>\n</body>\n</html>\n\n\n\n# 2. 模板语法\n\nhtml 中包含了一些 js 语法代码，语法分为两种，分别为：\n\n 1. 插值语法（双大括号表达式）\n 2. 指令（以 v-开头）\n\n插值语法：\n\n 1. 功能: 用于解析标签体内容\n 2. 语法: {{xxx}} ，xxxx 会作为 js 表达式解析\n\n指令语法：\n\n 1. 功能: 解析标签属性、解析标签体内容、绑定事件\n 2. 举例：v-bind:href = 'xxxx' ，xxxx 会作为 js 表达式被解析\n 3. 说明：vue 中有有很多的指令，此处只是用 v-bind 举个例子\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>初始vue</title>\n    <script src=\"./js/vue.js\"><\/script>\n</head>\n\n<body>\n    <div id=\"root\">\n        <h1>插值语法:</h1>\n        <h2>hello,{{name}}</h2>\n        <hr/>\n        <h1>指令语法:</h1>\n        <a :href=\"url\">百度</a>\n    </div>\n    <script>\n        vue.config.productiontip = false;\n        // 创建vue实例\n        let vueconf = {\n            // 绑定对应容器\n            el: \"#root\",\n            data() {\n                return {\n                    name: \"ming\",\n                    url: \"https://www.baidu.com\"\n                }\n            },\n        }; \n        const vm = new vue(vueconf);\n    <\/script>\n</body>\n</html>\n\n\n\n# 3. 数据代理\n\n<script>\n    // 被代理对象\n    let obj = {\n        name: \"ming\",\n        url: \"https://www.baidu.com\",\n    };\n    // 代理对象\n    let age = 12;\n\n    // 数据代理\n    object.defineproperty(obj, \"age\", {\n        get() {\n            console.log(\"obj.age进行读取\")\n            return age;\n        },\n        set(value) {\n            console.log(\"obj.age进行写入\")\n            age = value;\n        }\n    });\n<\/script>\n\n\n\n# 4. 事件处理\n\n# 1. 绑定监听\n\n 1. v-on:xxx=\"fun\"\n 2. @xxx=\"fun\"\n 3. @xxx=\"fun(参数)\"\n 4. 默认事件形参: event\n 5. 隐含属性对象: $event\n\n# 2. 事件修饰符\n\n例：@click.stop.prevent(按顺序执行)\n\n * .stop：等同于javascript中的event.stoppropagation()，防止事件冒泡\n * .prevent：等同于javascript中的event.preventdefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）\n * .capture：与事件冒泡的方向相反，事件捕获由外到内\n * .self：只会触发自己范围内的事件，不包含子元素\n * .once：只会触发一次\n\n# 3. 按键修饰符\n\n在javascript事件中除了前面所说的事件，还有键盘事件，也经常需要监测常见的键值。在vue中允许v-on在监听键盘事件时添加关键修饰符。记住所有的keycode比较困难，所以vue为最常用的键盘事件提供了别名：\n\n例：@keyup.enter\n\n键盘：\n\n * .enter：回车键\n * .tab：制表键\n * .delete：含delete和backspace键\n * .esc：返回键\n * .space: 空格键\n * .up：向上键\n * .down：向下键\n * .left：向左键\n * .right：向右键\n\n鼠标：\n\n * .left：鼠标左键\n * .middle：鼠标中间滚轮\n * .right：鼠标右键\n\n\n# 5. 属性监听与计算\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>天气案例_监视属性</title>\n    <script src=\"./js/vue.js\"><\/script>\n</head>\n<body>\n    <div id=\"root\">\n        <h2>现在季节为{{weather}}</h2>\n        <button @click=\"changeweather()\">切换季节</button>\n    </div>\n    <script>\n        vue.config.productiontip = false;\n        const vm = new vue({\n            el: \"#root\",\n            data() {\n                return {\n                    status: true\n                }\n            },\n            // 计算\n            computed: {\n                /* weather: {\n                    // 调用weather或者用来计算的属性status变化时执行\n                    get() {\n                        console.log(\"weather被使用了\")\n                        return this.status ? '春天' : '冬天';\n                    },\n                    set(value) {\n                        console.log(\"weather被修改了\")\n                        this.status = value;\n                    }\n\n                }, */\n                // 简写不包含set()\n                weather() {\n                    return this.status ? '春天' : '冬天';\n                }\n            },\n            // 监听\n            watch: {\n                weather: {\n                    // 是否马上执行\n                    //immediate: true,\n                    // 开启深度监视，vue在watch中默认不监视对象里面的值的改变\n                    //deep: true,\n                    handler(newvalue, oldvalue) {\n                        console.log(\"季节变化了\", oldvalue + \"--\x3e\" + newvalue)\n                    }\n                }\n            },\n            methods: {\n                changeweather() {\n                    this.status = !this.status;\n                }\n            },\n        })\n    <\/script>\n</body>\n</html>\n\n\n\n# 6. 数据监视原理\n\nvue会监视data中所有层次的数据。\n\n如何监测对象中的数据？ 通过setter实现监视，且要在new vue时就传入要监测的数据。 (1).对象中后追加的属性，vue默认不做响应式处理 (2).如需给后添加的属性做响应式，请使用如下api： vue.set(target，propertyname/index，value) 或 vm.$set(target，propertyname/index，value)\n\n如何监测数组中的数据？ 通过包裹数组更新元素的方法实现，本质就是做了两件事： (1). 调用原生对应的方法对数组进行更新。 (2). 重新解析模板，进而更新页面。\n\n在vue修改数组中的某个元素一定要用如下方法： (1). 使用这些api:push()、pop()、shift()、unshift()、splice()、sort()、reverse() (2). vue.set() 或 vm.$set()\n\n<script>\n  let data = {\n            name: 'a',\n            age: 1,\n            person: {\n                name: \"chs\"\n            }\n        }\n\n        // 用来监视data属性变化\n        function observer(obj) {\n            // 获取data中所有属性\n            const keys = object.keys(obj);\n            keys.foreach(key => {\n                // 属性值\n                let val = data[key];\n                object.defineproperty(this, key, {\n                    get() {\n                        console.log(`data中${key}被读取了，值为${val}`)\n                        return val;\n                    },\n                    set(newval) {\n                        console.log(`data中${key}被修改了从${val}--\x3e${newval}`)\n                        val = newval;\n                    }\n                })\n            })\n        }\n        const obj = new observer(data);\n        let vm = {};\n        vm._data = data = obj;\n<\/script>\n\n\n\n# 7. 列表渲染\n\n# 1. 列表显示\n\nv-for:\n\n用于展示列表数据\n\n * 语法：v-for=\"(item, index) in xxx\" :key=\"yyy\"\n * 可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）\n * 数组: (item, index)\n * 对象: (value, key)\n * 字符串：(char, index)\n * 数字：(number, index)\n\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>基本列表</title>\n    <script src=\"./js/vue.js\"><\/script>\n    <style>\n        * {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"root\">\n        <input type=\"text\" name=\"\" v-model=\"keywords\">\n        <button @click=\"sorttype = 0\">原顺序</button>\n        <button @click=\"sorttype = 1\">年龄升序</button>\n        <button @click=\"sorttype = 2\">年龄降序</button>\n        <ul>\n            <li v-for=\"(item, index) in filperson\" :key=\"item.id\">\n                {{item.name}} - {{item.age}}\n            </li>\n        </ul>\n    </div>\n    <script>\n        vue.config.productiontip = false;\n        const vm = new vue({\n            el: \"#root\",\n            data() {\n                return {\n                    keywords: \"\",\n                    // 排序类型 0：原顺序，1：升序，2：降序\n                    sorttype: 0,\n                    person: [\n                        { id: \"01\", name: \"张三\", age: 31 },\n                        { id: \"02\", name: \"王二\", age: 22 },\n                        { id: \"03\", name: \"李二\", age: 13 },\n                        { id: \"04\", name: \"张飞\", age: 45 },\n                        { id: \"05\", name: \"许飞\", age: 23 },\n                    ]\n                }\n            },\n            computed: {\n\n                filperson() {\n                    // 人员过滤\n                    const arr = this.person.filter((item) => {\n                        return item.name.indexof(this.keywords) !== -1;\n                    })\n\n                    // 年龄排序\n                    if (this.sorttype) {\n                        arr.sort((a, b) => {\n                            return this.sorttype === 1 ? a.age - b.age : b.age - a.age;\n                        })\n                    }\n                    return arr;\n                }\n            },\n        })\n    <\/script>\n</body>\n\n</html>\n\n\n# 2. key原理\n\n 1. 虚拟dom中key的作用： key是虚拟dom对象的标识，当数据发生变化时，vue会根据【新数据】生成【新的虚拟dom】, 随后vue进行【新虚拟dom】与【旧虚拟dom】的差异比较，比较规则如下：\n\n 2. 对比规则： (1). 旧虚拟dom中找到了与新虚拟dom相同的key： ①若虚拟dom中内容没变, 直接使用之前的真实dom ②若虚拟dom中内容变了, 则生成新的真实dom，随后替换掉页面中之前的真实dom\n    \n    (2). 旧虚拟dom中未找到与新虚拟dom相同的key创建新的真实dom，随后渲染到到页面。\n\n 3. 用index作为key可能会引发的问题： (1). 若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实dom更新 ==> 界面效果没问题, 但效率低 (2). 如果结构中还包含输入类的dom： 会产生错误dom更新 ==>界面有问题\n\n 4. 开发中如何选择key: (1). 最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。 (2). 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。\n\n\n# 8. vue指令\n\n# 1.常用内置指令\n\n * v-text: 更新元素的 textcontent\n\n * v-html: 更新元素的 innerhtml\n\n * v-if: 如果为true, 当前标签才会输出到页面\n\n * v-else: 如果为false, 当前标签才会输出到页面\n\n * v-show : 通过控制display样式来控制显示/隐藏\n\n * v-for : 遍历数组/对象\n\n * v-on: 绑定事件监听, 一般简写为@\n\n * v-bind : 强制绑定解析表达式, 可以省略v-bind\n\n * v-model: 双向数据绑定\n\n * v-text : 更新元素的 textcontent\n   \n   作用：向其所在的节点中渲染文本内容。 与插值语法的区别：v-text会替换掉节点中的内容，{{xx}}则不会\n\n * v-html : 更新元素的 innerhtml 作用：向指定节点中渲染包含html结构的内容。 与插值语法的区别： (1). v-html会替换掉节点中所有的内容，{{xx}}则不会。 (2). v-html可以识别html结构。 严重注意：v-html有安全性问题！！！！ (1). 在网站上动态渲染任意html是非常危险的，容易导致xss攻击。 (2). 一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！\n\n * **v-once😗*所在节点在初次动态渲染后，就视为静态内容了。以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。\n\n * **v-pre：**跳过其所在节点的编译过程。\n\n * ref : 为某个元素注册一个唯一标识, vue对象通过$refs属性访问这个元素对象\n\n * v-cloak : 使用它防止闪现表达式, 与css配合: [v-cloak] { display: none }\n   \n   本质是一个特殊属性，vue实例创建完毕并接管容器后，会删掉v-cloak属性。 使用css配合v-cloak可以解决网速慢时页面展示出{{xxx}}的问题\n\n# 2. 自定义指令\n\n自定义指令directives中的this为windows并不是vue\n\n<script>\n        // 局部指令\n        new vue({\n            el: '#root',\n            data: {},\n            directives: {\n                // 指令名: v-fbind 如果指令名有多个单词则使用'-'连接不能使用驼峰形式 例：fbind-text-or-number\n                'fbind': {\n                    // 指令与元素成功绑定时调用\n                    bind(element, binding) {\n                        element.value = binding.value\n                    },\n                    // 指令所在元素被插入页面时调用\n                    inserted(element, binding) {\n                        element.focus()\n                    },\n                    // 指令所在的模板被重新解析时调用\n                    update(element, binding) {\n                        element.value = binding.value\n                    }\n                }\n            }\n        })\n\n        // 全局指令\n        vue.directive('fbind', {\n            // 指令与元素成功绑定时\n            bind(element, binding) {\n                element.value = binding.value\n            },\n            // 指令所在元素被插入页面时\n            inserted(element, binding) {\n                element.focus()\n            },\n            // 指令所在的模板被重新解析时\n            update(element, binding) {\n                element.value = binding.value\n            }\n        })\n<\/script>\n\n\n\n# 9. 生命周期\n\n# 1. 定义\n\n * 生命周期回调函数、生命周期函数、生命周期钩子。\n * vue在关键时刻帮我们调用的一些特殊名称的函数。\n * 生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。\n * 生命周期函数中的this指向是vm 或 组件实例对象。\n\n# 2. 周期类别\n\n**beforecreate😗*初始化数据监测和数据代理之前调用\n\n> 此时data中的数据和methods中的方法不能访问\n\n**created😗*初始化数据监测和数据代理之后调用\n\n> 此时data中的数据和methods中的方法可以访问，在created后beforemount之前会开始解析vue模板生成虚拟dom\n\n**beforemount😗*挂载完成之前\n\n> 此时vue模板已经被解析且生成了虚拟dom所以此时修改dom是无效的\n\n**mounted😗*挂载完成后\n\n> vue完成模板解析并把初始的真实dom中的元素放入页面后（挂载完毕）调用mounted()\n\n**beforeupdate😗*页面更新之前\n\n> 此时model已经被更新了但是view还没有更新，在更新前到更新后之间会生成新的虚拟dom然后与旧的dom进行diff并对view进行渲染\n\n**updated😗*页面更新后\n\n> 此时页面与数据都更新完成\n\nbeforedestroy: 销毁之前\n\n**destroyed😗*销毁后\n\n**activated😗*路由组件被激活时触发\n\n**deactivated😗*路由组件失活时触发\n\n# 3. 执行情况\n\n 1. 在页面一加载就会调用beforecreate --\x3e created --\x3e beforemount --\x3e mounted此时会完成第一次的模板解析并进行view的渲染。\n 2. 此后每更新一次data都会调用beforecreate和created完成model对view的更新\n\n\n# 二、vue组件化编程\n\n\n# 1. 非单文件组件\n\n步骤：\n\n 1. 定义组件（创建组件）\n 2. 注册组件\n 3. 使用组件（写组件标签）\n\n组件命名：\n\n * kebab-case命名: my-school\n * camelcase命名: myschool\n\n# 1. 组件创建\n\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>组件使用</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"><\/script>\n</head>\n<body>\n    \x3c!-- 准备好一个容器--\x3e\n    <div id=\"root\">\n        <hello></hello>\n        <hr>\n        <h1>{{msg}}</h1>\n        <hr>\n        \x3c!-- 第三步：编写组件标签 --\x3e\n        <school></school>\n        <hr>\n        \x3c!-- 第三步：编写组件标签 --\x3e\n        <student></student>\n    </div>\n\n    <div id=\"root2\">\n        <hello></hello>\n    </div>\n</body>\n\n<script type=\"text/javascript\">\n    vue.config.productiontip = false\n\n    // 创建school组件 vue.extend({})与new vue({})里面配置对象基本类似\n    const school = vue.extend({\n        // 不需要绑定el:\"\",因为组件可能要为多个容器服务\n        template: `\n\t\t\t\t<div class=\"demo\">\n\t\t\t\t\t<h2>学校名称：{{schoolname}}</h2>\n\t\t\t\t\t<h2>学校地址：{{address}}</h2>\n\t\t\t\t\t<button @click=\"showname\">点我提示学校名</button>\t\n\t\t\t\t</div>\n\t\t\t`,\n        // 数据对象必须为函数返回的对象,防止不同容器数据对象指向同一地址\n        data() {\n            return {\n                schoolname: '尚硅谷',\n                address: '北京昌平'\n            }\n        },\n        methods: {\n            showname() {\n                alert(this.schoolname)\n            }\n        },\n    })\n\n    const student = vue.extend({\n        template: `\n\t\t\t\t<div>\n\t\t\t\t\t<h2>学生姓名：{{studentname}}</h2>\n\t\t\t\t\t<h2>学生年龄：{{age}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                studentname: '张三',\n                age: 18\n            }\n        }\n    })\n\n    // 创建hello组件\n    const hello = vue.extend({\n        template: `\n\t\t\t\t<div>\t\n\t\t\t\t\t<h2>你好啊！{{name}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                name: 'tom'\n            }\n        }\n    })\n\n    //创建vm\n    new vue({\n        el: '#root',\n        data: {\n            msg: '你好啊！'\n        },\n        // 局部注册组件\n        components: {\n            school,\n            student,\n            hello\n        }\n    })\n\t// 全局注册组件\n    vue.component('hello', hello)\n    new vue({\n        el: '#root2',\n    })\n<\/script>\n</html>\n\n\n# 2.组件嵌套\n\n<script type=\"text/javascript\">\n    vue.config.productiontip = false\n    // 1.创建student组件作为子组件\n    const student = vue.extend({\n        template: `\n\t\t\t\t<div>\n\t\t\t\t\t<h2>学生姓名：{{studentname}}</h2>\n\t\t\t\t\t<h2>学生年龄：{{age}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                studentname: '小明',\n                age: 18\n            }\n        }\n    })\n\n    // 2.创建school组件作为父组件\n    const school = vue.extend({\n        template: `\n\t\t\t\t<div>\n\t\t\t\t\t<h2>学校名称：{{schoolname}}</h2>\n                    <h2>学校地址：{{address}}</h2>\n                    <student></student>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                schoolname: '希望小学',\n                address: '中国'\n            }\n        },\n        // 组件中嵌套子组件\n        components: {\n            student\n        }\n    })\n\n    // 创建hello组件\n    const hello = vue.extend({\n        template: `\n\t\t\t\t<div>\t\n\t\t\t\t\t<h2>你好啊！{{name}}</h2>\n\t\t\t\t</div>\n\t\t\t`,\n        data() {\n            return {\n                name: '小明'\n            }\n        }\n    })\n\n    // 3.创建一个app组件来管理所有组件\n    const app = vue.extend({\n        template: `\n                <div>\n                    <school></school>\n                    <hello></hello>\n                </div>\n                `,\n        components: {\n            school,\n            hello\n        }\n    })\n\n    new vue({\n        template:`<app></app>`,\n        el: '#root',\n        data: {\n            msg: '你好啊！'\n        },\n        // 注册组件（局部注册）\n        components: {\n            app\n        }\n    })\n<\/script>\n\n\n# 3. 组件本质\n\n 1. 组件实质是一个vuecomponent构造函数\n 2. 使用vue.extend(options)创建组件时vue会定义一个vuecomponent并返回，所以每个vuecomponent都是不同的\n 3. vue解析模板使用组件时会new vuecomponent(options)\n\nvue.extend = function (extendoptions) {\n\t......\n      var sub = function vuecomponent (options) {\n        this._init(options);\n      };\n    ......\n      return sub\n    };\n  }\n\n\n# 4. 内置关系\n\n**prototype: ** 显式原型对象存在于类中\n\n__proto__ : 隐式原型对象存在于对象中\n\n每个对象都有一个原型对象，通过函数创建的对象也将拥有这个原型对象。原型是一个指向对象的指针。\n\n * 可以将原型理解为对象的父亲，对象从原型对象继承来属性\n * 所有函数的原型默认是 object的实例，所以这是可以使用tostring/tovalues/isprototypeof 等方法的原因\n * 使用原型对象为多个对象共享属性或方法\n * 如果对象本身不存在属性或方法将到原型上查找\n * 使用原型可以解决，通过构造函数创建对象时复制多个函数造成的内存占用问题\n * 原型包含 constructor 属性，指向构造函数\n * 对象包含 __proto__ 指向他的原型对象\n\n\n\n\n# 2. 单文件组件\n\n以.vue后缀结尾的文件就是一个组件\n\nschool.vue\n\n<template>\n  <div>\n    <h2>学校名:{{ name }}</h2>\n    <h2>学校地址:{{ address }}</h2>\n    <button @click=\"flag = !flag\">点击修改地址</button>\n    <br>\n    <input v-show=\"flag\" @keyup.enter=\"hidetext()\" v-model=\"address\" type=\"text\">\n    <hr>\n    <student></student>\n  </div>\n</template>\n<script>\nimport student from \"./student.vue\"\nexport default {\n  name: \"school\",\n  components: {\n    student,\n  },\n  data() {\n    return {\n      name: \"希望小学\",\n      address: \"中国\",\n      flag: false,\n    };\n  },\n  methods: {\n    hidetext() {\n      this.flag = !this.flag;\n    },\n  },\n};\n<\/script>\n\n\nstudent.vue\n\n<template>\n  <div>\n    <h2>学生姓名:{{ name }}</h2>\n    <h2>学生年龄:{{ age }}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"student\",\n  data() {\n    //这里存放数据\n    return {\n      name: \"小明\",\n      age: 13,\n    };\n  },\n};\n<\/script>\n\n\napp.vue: 管理所有组件\n\n<template>\n  <div>\n    <school></school>\n  </div>\n</template>\n\n<script>\nimport school from \"./school.vue\";\nexport default {\n  name: \"app\",\n  components: {\n    school,\n  },\n};\n<\/script>\n\n\nmain.js\n\nimport app from './app.vue'\n\nnew vue({\n\tel: '#root',\n\tcomponent: {app},\n})\n\n\n\n\n\n# 3. 相关小知识\n\n# 1. ref标签属性\n\n * 被用来给元素或子组件注册引用信息（id的替代者）\n * 应用在html标签上获取的是真实dom元素，应用在组件标签上是组件实例对象\n * 使用方式： 打标识：\n   \n   \n   .....\n   \n   或 获取：this.$refs.xxx\n\n# 2. props配置项\n\n作用：接受父组件传过来的数据\n\n说明: props中的数据是只读的不能进行修改,如果需要修改可以用data中的属性来接收props中需要修改的属性\n\n\x3c!-- 传递数据 --\x3e\n<school name=\"aa\" address=\"bb\"></school>\n\n<script>\n    // 第一种：简单接收\n    props: ['name','address']\n   \t// 第二种：限制类型\n    props: {\n    \tname:string,\n       \taddress: string    \n  \t}\n    // 第三种：限制类型，必要性，默认值\n    props: {\n        name: {\n          type: string,\n          required: true,\n        },\n        address: {\n          type: string,\n          default: \"xxx\",\n        }\n \t }\n<\/script>\n\n\n# 3. mixin配置项\n\n作用：将多个组件共用配置提取成一个混入对象\n\n// 1.定义混入(外部定义一个x.js)\ndefault const mx = {\ndata() {\n    return {\n        xxx:xxx\n    }\n},\n    ...\n}\n\n// 2.引入混入\n// (1)局部引入\nimport {mx} from 'xxx/x.js '\n// 使用\nmixins:[mx]\n// (2)全局引入\nvue.mixin(mx)\n\n\n\n# 4. 插件\n\n 1. 功能：用于增强vue\n 2. 本质：包含install方法的一个对象，install的第一个参数是vue，后面的参数是插件使用者传递的数据\n 3. 使用：vue.use(pl,args...)\n\nconst pl = {\n    install(vue,args...) {\n        ....\n    }\n}\n\n\n# 5. scoped-样式\n\n作用：让样式在局部生效，防止冲突。\n\n<style scoped>\n</style>\n\n\n# 6. nexttick\n\n作用：在下一次dom更新结束后执行指定回调\n\n说明：当数据改变后想要基于更新后的dom进行操作时使用\n\n语法：this.$nexttick(回调)\n\n# 7. slot-插槽\n\n * 作用：接受父组件传过来的html结构\n\n * 分类：默认插槽、具名插槽、作用域插槽\n\n * 使用：\n   \n   1. 默认插槽\n      \n      \x3c!-- 父组件 --\x3e\n      <template>\n          <search>\n              <div>xxx</div>\n          </search>\n      </template>\n      \n      \x3c!-- 子组件 --\x3e\n      <template>\n          <div>\n              <slot>默认内容</slot>\n          </div>\n      </template>\n      \n   \n   2. 具名插槽\n      \n      \x3c!-- 父组件 --\x3e\n      <template>\n          <search>\n              <div slot=\"center\">xxx</div>\n              <template slot=\"footer\">\n              \t<div>xxx</div>\n      \t\t</template>\n          </search>\n      </template>\n      \n      \x3c!-- 子组件 --\x3e\n      <template>\n          <div>\n              <slot name=\"center\">默认内容</slot>\n              <slot name=\"footer\">默认内容</slot>\n          </div>\n      </template>\n      \n   \n   3. 作用域插槽\n      \n      \x3c!-- 父组件 --\x3e\n      <template>\n          <search>\n              <div slot=\"center\" slot-scope=\"data\">{{data.msg}}</div>\n              <template slot=\"footer\">\n              \t<div>xxx</div>\n      \t\t</template>\n          </search>\n      </template>\n      \n      \x3c!-- 子组件 --\x3e\n      <template>\n          <div>\n              <slot name=\"center\" msg=\"向父组件传递的数据\">默认内容</slot>\n              <slot name=\"footer\">默认内容</slot>\n          </div>\n      </template>\n      \n\n\n# 4. 自定义事件\n\n\x3c!-- 方式一 通过v-on绑定一个custom事件触发deletename方法 --\x3e\n<school @custom=\"deletename\"></school>\n\x3c!-- 方式二 通过this.$refs.xxx.$on --\x3e\n<school ref=\"st\"></school>\nmounted() {\n\tthis.$refs.st.$on('custom', this.deletename)\n}\n\x3c!-- 子组件中触发事件 --\x3e\nthis.$emit('custom', studentname)\n\n\n\n局限：\n\n 1. 此方式只用于子组件向父组件发送消息(数据)\n 2. 问题: 隔代组件或兄弟组件间通信此种方式不合适\n\n\n# 5. 全局事件总线\n\nnew vue({\n\t......\n\tbeforecreate() {\n    \t// 安装全局事件总线，$bus就是当前应用的vm\n\t\tvue.prototype.$bus = this \n\t},\n    ......\n}) \n\n\n使用:\n\nmounted() {\n  // 父组件在总线上绑定事件\n  this.$bus.$on('xxxx',this.demo)\n}\n\n\n// 子组件触发事件\nmethods: {\n   xx() {\n     this.$bus.$emit('xxxx',param)  \n   } \n},\nbeforedestroy() {\n    // 组件销毁时用$off解绑当前组件所用到的事件。\n    this.$bus.$off(\"xxxx\")\n}\n\n\n\n# 三、vue脚手架使用\n\nnpm                                     yarn\n\nnpm init                                yarn init              // 初始化\nnpm i | install                         yarn  (install)        // 安装依赖包\nnpm i x --s | --save                    yarn add  x            // 安装生产依赖并保存包名\nnpm i x --d | --save-dev                yarn add x -d          // 安装开发依赖并保存包名\nnpm un | uninstall  x                   yarn remove            // 删除依赖包\nnpm i -g | npm -g i x                   yarn global add x      // 全局安装\nnpm un -g x                             yarn global remove x   // 全局下载\nnpm run dev                             yarn dev | run dev     // 运行命令\n\n\n\n# 1. 安装\n\nnpm install -g @vue/cli\n# or\nyarn global add @vue/cli\n\n\n检查其版本是否正确：\n\nvue --version\n\n\n\n# 2. 创建一个项目\n\nvue create hello-world\n\n\n帮助命令\n\nvue create --help\n\n\n  -p, --preset &lt;presetname>       忽略提示符并使用已保存的或远程的预设选项\n  -d, --default                   忽略提示符并使用默认预设选项\n  -i, --inlinepreset &lt;json>       忽略提示符并使用内联的 json 字符串预设选项\n  -m, --packagemanager &lt;command>  在安装依赖时使用指定的 npm 客户端\n  -r, --registry &lt;url>            在安装依赖时使用指定的 npm registry\n  -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息\n  -n, --no-git                    跳过 git 初始化\n  -f, --force                     覆写目标目录可能存在的配置\n  -c, --clone                     使用 git clone 获取远程预设选项\n  -x, --proxy                     使用指定的代理创建项目\n  -b, --bare                      创建项目时省略默认组件中的新手指导信息\n  -h, --help                      输出使用帮助信息\n\n\n使用图形化界面\n\n你也可以通过 vue ui 命令以图形化界面创建和管理项目：\n\nvue ui\n\n\n上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。\n\n\n# 3. 组件化编码流程\n\n(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。\n\n(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：\n\n1).一个组件在用：放在组件自身即可。\n\n2). 一些组件在用：放在他们共同的父组件上（状态提升）。\n\n(3).实现交互：从绑定事件开始。\n\nprops适用于： (1).父组件 ==> 子组件 通信\n\n(2).子组件 ==> 父组件 通信（要求父先给子一个函数）\n\n使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！\n\nprops传过来的若是对象类型的值，修改对象中的属性时vue不会报错，但不推荐这样做。\n\n\n# 4. 配置代理\n\nvue.config.js中配置代理规则:\n\n 1. \n\n// 这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到`http://localhost:4000`。\nmodule.exports = {\n  devserver: {\n    proxy: 'http://localhost:4000'\n  }\n}\n\n\n * 优点：配置简单\n * 缺点：不能配置多个代理以及是否走代理\n\n 2. \n\nmodule.exports = {\n  devserver: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:4000',\n        // 是否启用websocket\n        ws: true,\n        changeorigin: true,\n        // 匹配正则的路径替换为''\n        pathrewrite: {'^api': ''}\n      },\n      '/foo': {\n        target: 'http://localhost:5000'\n      }\n    }\n  }\n}\n\n\n\n# 四、vuex\n\n概念：在vue中实现集中式状态(数据)管理的一个插件，对多个组件的共享数据进行集中式管理，是一种组件间通信的方式\n\n状态自管理应用包含以下几个部分：\n\n * state，驱动应用的数据源；\n * view，以声明方式将 state 映射到视图；\n * actions，响应在 view 上的用户输入导致的状态变化。\n\n“单向数据流”理念的简单示意：\n\n多个组件共享状态时，单向数据流的简洁性很容易被破坏：\n\n * 多个组件依赖于同一数据\n\n * 不同组件的行为需要改变同一数据\n\n引入：\n\n./store/index.js\n\n/**\n * 创建vuex中的核心store\n */\nimport vue from 'vue';\nimport vuex from 'vuex';\n// 使用插件\nvue.use(vuex);\n// 响应组件中的动作\nconst actions = {};\n\n// 加工数据(state)\nconst mutations = {};\n\n// 存储数据\nconst state = {};\n\n// 当state中的数据需要经过加工后再使用时，可以使用getters加工。\nconst getters = {};\n\nexport  default new vuex.store({\n    actions,\n    mutations,\n    state,\n    getters\n})\n\n\n\nmain.js\n\nimport vue from 'vue'\nimport app from './app'\nimport store from './store/index'\nvue.config.productiontip = false\n\nnew vue({\n  render: h => h(app),\n  store,\n}).$mount('#app')\n\n\n\n使用：\n\nmethods: {\n  increment() {\n    // 分发 action\n    this.store.dispatch('increment',args)\n    // 直接处理 this.$store.commit('increment')\n    console.log(this.$store.state.count)\n  }\n}\n\nconst store = new vuex.store({\n  state: {\n    count: 0\n  },\n  // mutation 必须是同步函数\n  mutations: {\n    increment (state,value) {\n      state.count++\n    }\n  },\n  actions: {\n    // context为上下文相当于mini的store\n    increment (context,value) {\n      // 提交载荷（payload）\n      context.commit('increment')\n    }\n  }\n})\n\n\n\n# 1. 四个map方法的使用\n\n 1. mapstate方法：用于帮助我们映射state中的数据为计算属性\n    \n    computed: {\n        //借助mapstate生成计算属性：sum、school、subject（对象写法）\n         ...mapstate({sum:'sum',school:'school',subject:'subject'}),\n             \n        //借助mapstate生成计算属性：sum、school、subject（数组写法）\n        ...mapstate(['sum','school','subject']),\n    },\n    \n\n 2. mapgetters方法：用于帮助我们映射getters中的数据为计算属性\n    \n    computed: {\n        //借助mapgetters生成计算属性：bigsum（对象写法）\n        ...mapgetters({bigsum:'bigsum'}),\n    \n        //借助mapgetters生成计算属性：bigsum（数组写法）\n        ...mapgetters(['bigsum'])\n    },\n    \n\n 3. mapactions方法：用于帮助我们生成与actions对话的方法，即：包含$store.dispatch(xxx)的函数\n    \n    methods:{\n        //靠mapactions生成：incrementodd、incrementwait（对象形式）\n        ...mapactions({incrementodd:'jiaodd',incrementwait:'jiawait'})\n    \n        //靠mapactions生成：incrementodd、incrementwait（数组形式）\n        ...mapactions(['jiaodd','jiawait'])\n    }\n    \n\n 4. mapmutations方法：用于帮助我们生成与mutations对话的方法，即：包含$store.commit(xxx)的函数\n    \n    methods:{\n        //靠mapactions生成：increment、decrement（对象形式）\n        ...mapmutations({increment:'jia',decrement:'jian'}),\n        \n        //靠mapmutations生成：jia、jian（对象形式）\n        ...mapmutations(['jia','jian']),\n    }\n    \n\n> 备注：mapactions与mapmutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\n\n\n# 2. 模块化+命名空间\n\n 1. 目的：让代码更好维护，让多种数据分类更加明确。\n\n 2. 修改store.js\n    \n    const countabout = {\n      namespaced:true,//开启命名空间\n      state:{x:1},\n      mutations: { ... },\n      actions: { ... },\n      getters: {\n        bigsum(state){\n           return state.sum * 10\n        }\n      }\n    }\n    \n    const personabout = {\n      namespaced:true,//开启命名空间\n      state:{ ... },\n      mutations: { ... },\n      actions: { ... }\n    }\n    \n    const store = new vuex.store({\n      modules: {\n        countabout,\n        personabout\n      }\n    })\n    \n\n 3. 开启命名空间后，组件中读取state数据：\n    \n    //方式一：自己直接读取\n    this.$store.state.personabout.list\n    //方式二：借助mapstate读取：\n    ...mapstate('countabout',['sum','school','subject']),\n    \n\n 4. 开启命名空间后，组件中读取getters数据：\n    \n    //方式一：自己直接读取\n    this.$store.getters['personabout/firstpersonname']\n    //方式二：借助mapgetters读取：\n    ...mapgetters('countabout',['bigsum'])\n    \n\n 5. 开启命名空间后，组件中调用dispatch\n    \n    //方式一：自己直接dispatch\n    this.$store.dispatch('personabout/addpersonwang',person)\n    //方式二：借助mapactions：\n    ...mapactions('countabout',{incrementodd:'jiaodd',incrementwait:'jiawait'})\n    \n\n 6. 开启命名空间后，组件中调用commit\n    \n    //方式一：自己直接commit\n    this.$store.commit('personabout/add_person',person)\n    //方式二：借助mapmutations：\n    ...mapmutations('countabout',{increment:'jia',decrement:'jian'}),\n    \n\n\n# 五、vue router\n\n\n# 1. 基本使用\n\n 1. 安装vue-router，命令：yarn add vue-router\n\n 2. 应用插件：vue.use(vuerouter)\n\n 3. 编写router配置项:\n    \n    // 引入vuerouter\n    import vuerouter from 'vue-router'\n    // 引入组件\n    import about from '../components/about'\n    import home from '../components/home'\n    \n    // 创建router实例对象，去管理一组一组的路由规则\n    const router = new vuerouter({\n    \troutes:[\n    \t\t{\n    \t\t\tpath:'/about',\n    \t\t\tcomponent:about\n    \t\t},\n    \t\t{\n    \t\t\tpath:'/home',\n    \t\t\tcomponent:home\n    \t\t}\n    \t]\n    })\n    \n    // 暴露router\n    export default router\n    \n\n 4. 实现切换（active-class可配置高亮样式）\n    \n    <router-link active-class=\"active\" to=\"/about\">about</router-link>\n    \n\n 5. 指定展示位置\n    \n    <router-view></router-view>\n    \n\n\n# 2. 几个注意点\n\n 1. 路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。\n 2. 通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。\n 3. 每个组件都有自己的$route属性，里面存储着自己的路由信息。\n 4. 整个应用只有一个router，可以通过组件的$router属性获取到。\n\n\n# 3. 嵌套路由\n\n 1. 配置路由规则，使用children配置项：\n    \n    routes:[\n    \t{\n    \t\tpath:'/about',\n    \t\tcomponent:about,\n    \t},\n    \t{\n    \t\tpath:'/home',\n    \t\tcomponent:home,\n    \t\tchildren:[ //通过children配置子级路由\n    \t\t\t{\n    \t\t\t\tpath:'news', //此处一定不要写：/news\n    \t\t\t\tcomponent:news\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\tpath:'message',//此处一定不要写：/message\n    \t\t\t\tcomponent:message\n    \t\t\t}\n    \t\t]\n    \t}\n    ]\n    \n\n 2. 跳转（要写完整路径）：\n    \n    <router-link to=\"/home/news\">news</router-link>\n    \n\n\n# 4. 路由的query参数\n\n 1. 传递参数\n    \n    \x3c!-- 跳转并携带query参数，to的字符串写法 --\x3e\n    <router-link :to=\"/home/message/detail?id=666&title=你好\">跳转</router-link>\n    \t\t\t\t\n    \x3c!-- 跳转并携带query参数，to的对象写法 --\x3e\n    <router-link \n    \t:to=\"{\n    \t\tpath:'/home/message/detail',\n    \t\tquery:{\n    \t\t   id:666,\n                title:'你好'\n    \t\t}\n    \t}\"\n    >跳转</router-link>\n    \n\n 2. 接收参数：\n    \n    $route.query.id\n    $route.query.title\n    \n\n\n# 5. 命名路由\n\n 1. 作用：可以简化路由的跳转。\n\n 2. 如何使用\n    \n    1. 给路由命名：\n       \n       {\n       \tpath:'/demo',\n       \tcomponent:demo,\n       \tchildren:[\n       \t\t{\n       \t\t\tpath:'test',\n       \t\t\tcomponent:test,\n       \t\t\tchildren:[\n       \t\t\t\t{\n                           name:'hello' //给路由命名\n       \t\t\t\t\tpath:'welcome',\n       \t\t\t\t\tcomponent:hello,\n       \t\t\t\t}\n       \t\t\t]\n       \t\t}\n       \t]\n       }\n       \n    \n    2. 简化跳转：\n       \n       \x3c!-- 简化前，需要写完整的路径 --\x3e\n       <router-link to=\"/demo/test/welcome\">跳转</router-link>\n       \n       \x3c!-- 简化后，直接通过名字跳转 --\x3e\n       <router-link :to=\"{name:'hello'}\">跳转</router-link>\n       \n       \x3c!-- 简化写法配合传递参数 --\x3e\n       <router-link \n       \t:to=\"{\n       \t\tname:'hello',\n       \t\tquery:{\n       \t\t   id:666,\n                   title:'你好'\n       \t\t}\n       \t}\"\n       >跳转</router-link>\n       \n\n\n# 6. 路由的params参数\n\n 1. 配置路由，声明接收params参数\n    \n    {\n    \tpath:'/home',\n    \tcomponent:home,\n    \tchildren:[\n    \t\t{\n    \t\t\tpath:'news',\n    \t\t\tcomponent:news\n    \t\t},\n    \t\t{\n    \t\t\tcomponent:message,\n    \t\t\tchildren:[\n    \t\t\t\t{\n    \t\t\t\t\tname:'xiangqing',\n    \t\t\t\t\tpath:'detail/:id/:title', //使用占位符声明接收params参数\n    \t\t\t\t\tcomponent:detail\n    \t\t\t\t}\n    \t\t\t]\n    \t\t}\n    \t]\n    }\n    \n\n 2. 传递参数\n    \n    \x3c!-- 跳转并携带params参数，to的字符串写法 --\x3e\n    <router-link :to=\"/home/message/detail/666/你好\">跳转</router-link>\n    \t\t\t\t\n    \x3c!-- 跳转并携带params参数，to的对象写法 --\x3e\n    <router-link \n    \t:to=\"{\n    \t\tname:'xiangqing',\n    \t\tparams:{\n    \t\t   id:666,\n               title:'你好'\n    \t\t}\n    \t}\"\n    >跳转</router-link>\n    \n    \n    > 特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！\n\n 3. 接收参数：\n    \n    $route.params.id\n    $route.params.title\n    \n\n\n# 7.路由的props配置\n\n作用：让路由组件更方便的收到参数\n\n{\n\tname:'xiangqing',\n\tpath:'detail/:id',\n\tcomponent:detail,\n\n\t// 第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给detail组件\n\t// props:{a:900}\n\n\t// 第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给detail组件\n\t// props:true\n\t\n\t// 第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给detail组件\n\tprops(route){\n\t\treturn {\n\t\t\tid:route.query.id,\n\t\t\ttitle:route.query.title\n\t\t}\n\t}\n}\n\n\n\n# 8. replace属性\n\n 1. 作用：控制路由跳转时操作浏览器历史记录的模式\n 2. 浏览器的历史记录有两种写入方式：分别为push和replace，push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push\n 3. 如何开启replace模式：<router-link replace .......>news</router-link>\n\n\n# 9. 编程式路由导航\n\n 1. 作用：不借助<router-link>实现路由跳转，让路由跳转更加灵活\n\n 2. 具体编码：\n    \n    //$router的两个api\n    this.$router.push({\n    \tname:'xiangqing',\n    \t\tparams:{\n    \t\t\tid:xxx,\n    \t\t\ttitle:xxx\n    \t\t}\n    })\n    \n    this.$router.replace({\n    \tname:'xiangqing',\n    \t\tparams:{\n    \t\t\tid:xxx,\n    \t\t\ttitle:xxx\n    \t\t}\n    })\n    this.$router.forward() //前进\n    this.$router.back() //后退\n    this.$router.go() //可前进也可后退\n    \n\n\n# 10. 缓存路由组件\n\n 1. 作用：让不展示的路由组件保持挂载，不被销毁。\n\n 2. 具体编码：\n    \n    <keep-alive include=\"news\"> \n        <router-view></router-view>\n    </keep-alive>\n    \n\n\n# 11. 路由守卫\n\n作用：对路由进行权限控制\n\n分类：全局守卫、独享守卫、组件内守卫\n\n完整的导航解析流程:\n\n 1.  导航被触发。\n 2.  在失活的组件里调用 beforerouteleave 守卫。\n 3.  调用全局的 beforeeach 守卫。\n 4.  在重用的组件里调用 beforerouteupdate 守卫 (2.2+)。\n 5.  在路由配置里调用 beforeenter。\n 6.  解析异步路由组件。\n 7.  在被激活的组件里调用 beforerouteenter。\n 8.  调用全局的 beforeresolve 守卫 (2.5+)。\n 9.  导航被确认。\n 10. 调用全局的 aftereach 钩子。\n 11. 触发 dom 更新。\n 12. 调用 beforerouteenter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。\n\n# 全局守卫\n\n每个守卫方法接收三个参数：\n\n * to: route: 即将要进入的目标 路由对象\n\n * from: route: 当前导航正要离开的路由\n\n * next: function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数\n   \n   * next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。\n   * next(false): 中断当前的导航。如果浏览器的 url 改变了 (可能是用户手动或者浏览器后退按钮)，那么 url 地址会重置到 from 路由对应的地址。\n   * next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项\n   * next(error): (2.4.0+) 如果传入 next 的参数是一个 error 实例，则导航会被终止且该错误会被传递给 router.onerror() 注册过的回调\n\n// 1.全局前置守卫：初始化时执行、每次路由切换前执行\nrouter.beforeeach((to, from, next) => {\n  if (to.name !== 'login' && !isauthenticated) next({ name: 'login' })\n  else next()\n})\n\n// 2.全局后置守卫：初始化时执行、每次路由切换后执行\nrouter.aftereach((to,from)=>{\n\tconsole.log('aftereach',to,from)\n\tif(to.meta.title){ \n\t\tdocument.title = to.meta.title //修改网页的title\n\t}else{\n\t\tdocument.title = 'vue_test'\n\t}\n})\n\n// 3.全局解析守卫 2.5.0 新增\n// 在 2.5.0+ 你可以用 router.beforeresolve 注册一个全局守卫。这和 router.beforeeach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。\n\n\n# 独享守卫\n\n在路由配置上直接定义 beforeenter 守卫：\n\nconst router = new vuerouter({\n  routes: [\n    {\n      path: '/foo',\n      component: foo,\n      // 这些守卫与全局前置守卫的方法参数是一样的\n      beforeenter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n\n\n# 组件内守卫\n\n可以在路由组件内直接定义以下路由导航守卫：\n\n * beforerouteenter\n * beforerouteupdate (2.2 新增)\n * beforerouteleave\n\nconst foo = {\n  template: `...`,\n  beforerouteenter(to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforerouteupdate(to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforerouteleave(to, from, next) {\n    // 导航离开该组件的对应路由时调用\n    // 可以访问组件实例 `this`\n  }\n}\n\n\nbeforerouteenter 守卫 不能 访问 this，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。\n\n不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\nbeforerouteenter (to, from, next) {\n  next(vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n\n\n注意 beforerouteenter 是支持给 next 传递回调的唯一守卫。对于 beforerouteupdate 和 beforerouteleave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。\n\nbeforerouteupdate (to, from, next) {\n  // just use `this`\n  this.name = to.params.name\n  next()\n}\n\n\n这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。\n\nbeforerouteleave (to, from, next) {\n  const answer = window.confirm('do you really want to leave? you have unsaved changes!')\n  if (answer) {\n    next()\n  } else {\n    next(false)\n  }\n}\n",charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"vue3_base",frontmatter:{title:"vue3_base",date:"2021-12-15T22:22:00.000Z",categories:["前端"],tags:["vue"],permalink:"/pages/76f6e5/"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.vue3_base.html",relativePath:"01.前端/01.前端/02.vue3_base.md",key:"v-f581b5d6",path:"/pages/76f6e5/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"1.Vue3简介",slug:"_1-vue3简介",normalizedTitle:"1.vue3简介",charIndex:9},{level:3,title:"2.Vue3带来了什么",slug:"_2-vue3带来了什么",normalizedTitle:"2.vue3带来了什么",charIndex:182},{level:4,title:"1.性能的提升",slug:"_1-性能的提升",normalizedTitle:"1.性能的提升",charIndex:197},{level:4,title:"2.源码的升级",slug:"_2-源码的升级",normalizedTitle:"2.源码的升级",charIndex:272},{level:4,title:"3.拥抱TypeScript",slug:"_3-拥抱typescript",normalizedTitle:"3.拥抱typescript",charIndex:358},{level:4,title:"4.新的特性",slug:"_4-新的特性",normalizedTitle:"4.新的特性",charIndex:402},{level:2,title:"一、创建Vue3.0工程",slug:"一、创建vue3-0工程",normalizedTitle:"一、创建vue3.0工程",charIndex:697},{level:3,title:"1.使用 vue-cli 创建",slug:"_1-使用-vue-cli-创建",normalizedTitle:"1.使用 vue-cli 创建",charIndex:714},{level:3,title:"2.使用 vite 创建",slug:"_2-使用-vite-创建",normalizedTitle:"2.使用 vite 创建",charIndex:961},{level:2,title:"二、常用 Composition API",slug:"二、常用-composition-api",normalizedTitle:"二、常用 composition api",charIndex:1303},{level:3,title:"1.拉开序幕的setup",slug:"_1-拉开序幕的setup",normalizedTitle:"1.拉开序幕的setup",charIndex:1399},{level:3,title:"2.ref函数",slug:"_2-ref函数",normalizedTitle:"2.ref函数",charIndex:1914},{level:3,title:"3.reactive函数",slug:"_3-reactive函数",normalizedTitle:"3.reactive函数",charIndex:2237},{level:3,title:"4.Vue3.0中的响应式原理",slug:"_4-vue3-0中的响应式原理",normalizedTitle:"4.vue3.0中的响应式原理",charIndex:2441},{level:4,title:"vue2.x的响应式",slug:"vue2-x的响应式",normalizedTitle:"vue2.x的响应式",charIndex:2460},{level:4,title:"Vue3.0的响应式",slug:"vue3-0的响应式",normalizedTitle:"vue3.0的响应式",charIndex:2764},{level:3,title:"5.reactive对比ref",slug:"_5-reactive对比ref",normalizedTitle:"5.reactive对比ref",charIndex:3587},{level:3,title:"6.setup的两个注意点",slug:"_6-setup的两个注意点",normalizedTitle:"6.setup的两个注意点",charIndex:3957},{level:3,title:"7.计算属性与监视",slug:"_7-计算属性与监视",normalizedTitle:"7.计算属性与监视",charIndex:4262},{level:4,title:"1.computed函数",slug:"_1-computed函数",normalizedTitle:"1.computed函数",charIndex:4275},{level:4,title:"2.watch函数",slug:"_2-watch函数",normalizedTitle:"2.watch函数",charIndex:4847},{level:4,title:"3.watchEffect函数",slug:"_3-watcheffect函数",normalizedTitle:"3.watcheffect函数",charIndex:6064},{level:3,title:"8.生命周期",slug:"_8-生命周期",normalizedTitle:"8.生命周期",charIndex:6475},{level:3,title:"9.自定义hook函数",slug:"_9-自定义hook函数",normalizedTitle:"9.自定义hook函数",charIndex:6910},{level:3,title:"10.toRef",slug:"_10-toref",normalizedTitle:"10.toref",charIndex:7044},{level:2,title:"三、其它 Composition API",slug:"三、其它-composition-api",normalizedTitle:"三、其它 composition api",charIndex:7232},{level:3,title:"1.shallowReactive 与 shallowRef",slug:"_1-shallowreactive-与-shallowref",normalizedTitle:"1.shallowreactive 与 shallowref",charIndex:7257},{level:3,title:"2.readonly 与 shallowReadonly",slug:"_2-readonly-与-shallowreadonly",normalizedTitle:"2.readonly 与 shallowreadonly",charIndex:7509},{level:3,title:"3.toRaw 与 markRaw",slug:"_3-toraw-与-markraw",normalizedTitle:"3.toraw 与 markraw",charIndex:7635},{level:3,title:"4.customRef",slug:"_4-customref",normalizedTitle:"4.customref",charIndex:7883},{level:3,title:"5.provide 与 inject",slug:"_5-provide-与-inject",normalizedTitle:"5.provide 与 inject",charIndex:8794},{level:3,title:"6.响应式数据的判断",slug:"_6-响应式数据的判断",normalizedTitle:"6.响应式数据的判断",charIndex:9224},{level:2,title:"四、Composition API 的优势",slug:"四、composition-api-的优势",normalizedTitle:"四、composition api 的优势",charIndex:9407},{level:3,title:"1.Options API 存在的问题",slug:"_1-options-api-存在的问题",normalizedTitle:"1.options api 存在的问题",charIndex:9433},{level:3,title:"2.Composition API 的优势",slug:"_2-composition-api-的优势",normalizedTitle:"2.composition api 的优势",charIndex:9521},{level:2,title:"五、新的组件",slug:"五、新的组件",normalizedTitle:"五、新的组件",charIndex:9591},{level:3,title:"1.Fragment",slug:"_1-fragment",normalizedTitle:"1.fragment",charIndex:9602},{level:3,title:"2.Teleport",slug:"_2-teleport",normalizedTitle:"2.teleport",charIndex:9711},{level:3,title:"3.Suspense",slug:"_3-suspense",normalizedTitle:"3.suspense",charIndex:9990},{level:2,title:"六、其他",slug:"六、其他",normalizedTitle:"六、其他",charIndex:10543},{level:3,title:"1.全局API的转移",slug:"_1-全局api的转移",normalizedTitle:"1.全局api的转移",charIndex:10552},{level:3,title:"2.其他改变",slug:"_2-其他改变",normalizedTitle:"2.其他改变",charIndex:11347}],headersStr:"介绍 1.Vue3简介 2.Vue3带来了什么 1.性能的提升 2.源码的升级 3.拥抱TypeScript 4.新的特性 一、创建Vue3.0工程 1.使用 vue-cli 创建 2.使用 vite 创建 二、常用 Composition API 1.拉开序幕的setup 2.ref函数 3.reactive函数 4.Vue3.0中的响应式原理 vue2.x的响应式 Vue3.0的响应式 5.reactive对比ref 6.setup的两个注意点 7.计算属性与监视 1.computed函数 2.watch函数 3.watchEffect函数 8.生命周期 9.自定义hook函数 10.toRef 三、其它 Composition API 1.shallowReactive 与 shallowRef 2.readonly 与 shallowReadonly 3.toRaw 与 markRaw 4.customRef 5.provide 与 inject 6.响应式数据的判断 四、Composition API 的优势 1.Options API 存在的问题 2.Composition API 的优势 五、新的组件 1.Fragment 2.Teleport 3.Suspense 六、其他 1.全局API的转移 2.其他改变",content:"# 介绍\n\n\n# 1.Vue3简介\n\n * 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）\n * 耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者\n * github上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\n\n\n# 2.Vue3带来了什么\n\n# 1.性能的提升\n\n * 打包大小减少41%\n\n * 初次渲染快55%, 更新渲染快133%\n\n * 内存减少54%\n   \n   ......\n\n# 2.源码的升级\n\n * 使用Proxy代替defineProperty实现响应式\n\n * 重写虚拟DOM的实现和Tree-Shaking\n   \n   ......\n\n# 3.拥抱TypeScript\n\n * Vue3可以更好的支持TypeScript\n\n# 4.新的特性\n\n 1. Composition API（组合API）\n    \n    * setup配置\n    * ref与reactive\n    * watch与watchEffect\n    * provide与inject\n    * ......\n\n 2. 新的内置组件\n    \n    * Fragment\n    * Teleport\n    * Suspense\n\n 3. 其他改变\n    \n    * 新的生命周期钩子\n    * data 选项应始终被声明为一个函数\n    * 移除keyCode支持作为 v-on 的修饰符\n    * ......\n\n\n# 一、创建Vue3.0工程\n\n\n# 1.使用 vue-cli 创建\n\n官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\n\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n## 安装或者升级你的@vue/cli\nnpm install -g @vue/cli\n## 创建\nvue create vue_test\n## 启动\ncd vue_test\nnpm run serve\n\n\n\n# 2.使用 vite 创建\n\n官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\n\nvite官网：https://vitejs.cn\n\n * 什么是vite？—— 新一代前端构建工具。\n * 优势如下：\n   * 开发环境中，无需打包操作，可快速的冷启动。\n   * 轻量快速的热重载（HMR）。\n   * 真正的按需编译，不再等待整个应用编译完成。\n * 传统构建 与 vite构建对比图\n\n\n\n## 创建工程\nnpm init vite-app <project-name>\n## 进入工程目录\ncd <project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev\n\n\n\n# 二、常用 Composition API\n\n官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\n\n\n# 1.拉开序幕的setup\n\n 1. 理解：Vue3.0中一个新的配置项，值为一个函数。\n 2. setup是所有Composition API（组合API）“ 表演的舞台 ”。\n 3. 组件中所用到的：数据、方法等等，均要配置在setup中。\n 4. setup函数的两种返回值：\n    1. 若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\n    2. 若返回一个渲染函数：则可以自定义渲染内容。（了解）\n 5. 注意点：\n    1. 尽量不要与Vue2.x配置混用\n       * Vue2.x配置（data、methos、computed...）中可以访问到setup中的属性、方法。\n       * 但在setup中不能访问到Vue2.x配置（data、methos、computed...）。\n       * 如果有重名, setup优先。\n    2. setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）\n\n\n# 2.ref函数\n\n * 作用: 定义一个响应式的数据\n * 语法: const xxx = ref(initValue)\n   * 创建一个包含响应式数据的引用对象（reference对象，简称ref对象）。\n   * JS中操作数据： xxx.value\n   * 模板中读取数据: 不需要.value，直接：<div>{{xxx}}</div>\n * 备注：\n   * 接收的数据可以是：基本类型、也可以是对象类型。\n   * 基本类型的数据：响应式依然是靠Object.defineProperty()的get与set完成的。\n   * 对象类型的数据：内部 “ 求助 ” 了Vue3.0中的一个新函数—— reactive函数。\n\n\n# 3.reactive函数\n\n * 作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用ref函数）\n * 语法：const 代理对象= reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy的实例对象，简称proxy对象）\n * reactive定义的响应式数据是“深层次的”。\n * 内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\n\n\n# 4.Vue3.0中的响应式原理\n\n# vue2.x的响应式\n\n * 实现原理：\n   \n   * 对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持）。\n   \n   * 数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\n     \n     Object.defineProperty(data, 'count', {\n         get () {}, \n         set () {}\n     })\n     \n\n * 存在问题：\n   \n   * 新增属性、删除属性, 界面不会更新。\n   * 直接通过下标修改数组, 界面不会自动更新。\n\n# Vue3.0的响应式\n\n * 实现原理:\n   * 通过Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\n   * 通过Reflect（反射）: 对源对象的属性进行操作。\n   * MDN文档中描述的Proxy与Reflect：\n     \n     * Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n     \n     * Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n       \n       new Proxy(data, {\n       \t// 拦截读取属性值\n           get (target, prop) {\n           \treturn Reflect.get(target, prop)\n           },\n           // 拦截设置属性值或添加新属性\n           set (target, prop, value) {\n           \treturn Reflect.set(target, prop, value)\n           },\n           // 拦截删除属性\n           deleteProperty (target, prop) {\n           \treturn Reflect.deleteProperty(target, prop)\n           }\n       })\n       \n       proxy.name = 'tom'   \n       \n\n\n# 5.reactive对比ref\n\n * 从定义数据角度对比：\n   * ref用来定义：基本类型数据。\n   * reactive用来定义：对象（或数组）类型数据。\n   * 备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过reactive转为代理对象。\n * 从原理角度对比：\n   * ref通过Object.defineProperty()的get与set来实现响应式（数据劫持）。\n   * reactive通过使用Proxy来实现响应式（数据劫持）, 并通过Reflect操作源对象内部的数据。\n * 从使用角度对比：\n   * ref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。\n   * reactive定义的数据：操作数据与读取数据：均不需要.value。\n\n\n# 6.setup的两个注意点\n\n * setup执行的时机\n   \n   * 在beforeCreate之前执行一次，this是undefined。\n\n * setup的参数\n   \n   * props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。\n   * context：上下文对象\n     * attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 this.$attrs。\n     * slots: 收到的插槽内容, 相当于 this.$slots。\n     * emit: 分发自定义事件的函数, 相当于 this.$emit。\n\n\n# 7.计算属性与监视\n\n# 1.computed函数\n\n * 与Vue2.x中computed配置功能一致\n\n * 写法\n   \n   import {computed} from 'vue'\n   \n   setup(){\n       ...\n   \t//计算属性——简写\n       let fullName = computed(()=>{\n           return person.firstName + '-' + person.lastName\n       })\n       //计算属性——完整\n       let fullName = computed({\n           get(){\n               return person.firstName + '-' + person.lastName\n           },\n           set(value){\n               const nameArr = value.split('-')\n               person.firstName = nameArr[0]\n               person.lastName = nameArr[1]\n           }\n       })\n   }\n   \n\n# 2.watch函数\n\n * 与Vue2.x中watch配置功能一致\n\n * 两个小“坑”：\n   \n   * 监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。\n   * 监视reactive定义的响应式数据中某个属性时：deep配置有效。\n   \n   //情况一：监视ref定义的响应式数据\n   watch(sum,(newValue,oldValue)=>{\n   \tconsole.log('sum变化了',newValue,oldValue)\n   },{immediate:true})\n   \n   //情况二：监视多个ref定义的响应式数据\n   watch([sum,msg],(newValue,oldValue)=>{\n   \tconsole.log('sum或msg变化了',newValue,oldValue)\n   }) \n   \n   /* 情况三：监视reactive定义的响应式数据\n   \t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n   \t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n   */\n   watch(person,(newValue,oldValue)=>{\n   \tconsole.log('person变化了',newValue,oldValue)\n   },{immediate:true,deep:false}) //此处的deep配置不再奏效\n   \n   //情况四：监视reactive定义的响应式数据中的某个属性\n   watch(()=>person.job,(newValue,oldValue)=>{\n   \tconsole.log('person的job变化了',newValue,oldValue)\n   },{immediate:true,deep:true}) \n   \n   //情况五：监视reactive定义的响应式数据中的某些属性\n   watch([()=>person.job,()=>person.name],(newValue,oldValue)=>{\n   \tconsole.log('person的job变化了',newValue,oldValue)\n   },{immediate:true,deep:true})\n   \n   //特殊情况\n   watch(()=>person.job,(newValue,oldValue)=>{\n       console.log('person的job变化了',newValue,oldValue)\n   },{deep:true}) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\n   \n\n# 3.watchEffect函数\n\n * watch的套路是：既要指明监视的属性，也要指明监视的回调。\n\n * watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\n\n * watchEffect有点像computed：\n   \n   * 但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\n   * 而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。\n   \n   //watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\n   watchEffect(()=>{\n       const x1 = sum.value\n       const x2 = person.age\n       console.log('watchEffect配置的回调执行了')\n   })\n   \n\n\n# 8.生命周期\n\n * Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：\n   * beforeDestroy改名为 beforeUnmount\n   * destroyed改名为 unmounted\n * Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：\n   * beforeCreate===>setup()\n   * created=======>setup()\n   * beforeMount ===>onBeforeMount\n   * mounted=======>onMounted\n   * beforeUpdate===>onBeforeUpdate\n   * updated =======>onUpdated\n   * beforeUnmount ==>onBeforeUnmount\n   * unmounted =====>onUnmounted\n\n\n# 9.自定义hook函数\n\n * 什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。\n\n * 类似于vue2.x中的mixin。\n\n * 自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。\n\n\n# 10.toRef\n\n * 作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。\n\n * 语法：const name = toRef(person,'name')\n\n * 应用: 要将响应式对象中的某个属性单独提供给外部使用时。\n\n * 扩展：toRefs 与toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)\n\n\n# 三、其它 Composition API\n\n\n# 1.shallowReactive 与 shallowRef\n\n * shallowReactive：只处理对象最外层属性的响应式（浅响应式）。\n\n * shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n\n * 什么时候使用?\n   \n   * 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowReactive。\n   * 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowRef。\n\n\n# 2.readonly 与 shallowReadonly\n\n * readonly: 让一个响应式数据变为只读的（深只读）。\n * shallowReadonly：让一个响应式数据变为只读的（浅只读）。\n * 应用场景: 不希望数据被修改时。\n\n\n# 3.toRaw 与 markRaw\n\n * toRaw：\n   * 作用：将一个由reactive生成的响应式对象转为普通对象。\n   * 使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\n * markRaw：\n   * 作用：标记一个对象，使其永远不会再成为响应式对象。\n   * 应用场景:\n     1. 有些值不应被设置为响应式的，例如复杂的第三方类库等。\n     2. 当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\n\n\n# 4.customRef\n\n * 作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n\n * 实现防抖效果：\n   \n   <template>\n   \t<input type=\"text\" v-model=\"keyword\">\n   \t<h3>{{keyword}}</h3>\n   </template>\n   \n   <script>\n   \timport {ref,customRef} from 'vue'\n   \texport default {\n   \t\tname:'Demo',\n   \t\tsetup(){\n   \t\t\t// let keyword = ref('hello') //使用Vue准备好的内置ref\n   \t\t\t//自定义一个myRef\n   \t\t\tfunction myRef(value,delay){\n   \t\t\t\tlet timer\n   \t\t\t\t//通过customRef去实现自定义\n   \t\t\t\treturn customRef((track,trigger)=>{\n   \t\t\t\t\treturn{\n   \t\t\t\t\t\tget(){\n   \t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的\n   \t\t\t\t\t\t\treturn value\n   \t\t\t\t\t\t},\n   \t\t\t\t\t\tset(newValue){\n   \t\t\t\t\t\t\tclearTimeout(timer)\n   \t\t\t\t\t\t\ttimer = setTimeout(()=>{\n   \t\t\t\t\t\t\t\tvalue = newValue\n   \t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面\n   \t\t\t\t\t\t\t},delay)\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t})\n   \t\t\t}\n   \t\t\tlet keyword = myRef('hello',500) //使用程序员自定义的ref\n   \t\t\treturn {\n   \t\t\t\tkeyword\n   \t\t\t}\n   \t\t}\n   \t}\n   <\/script>\n   \n\n\n# 5.provide 与 inject\n\n * 作用：实现祖与后代组件间通信\n\n * 套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据\n\n * 具体写法：\n   \n   1. 祖组件中：\n      \n      setup(){\n      \t......\n          let car = reactive({name:'奔驰',price:'40万'})\n          provide('car',car)\n          ......\n      }\n      \n   \n   2. 后代组件中：\n      \n      setup(props,context){\n      \t......\n          const car = inject('car')\n          return {car}\n      \t......\n      }\n      \n\n\n# 6.响应式数据的判断\n\n * isRef: 检查一个值是否为一个 ref 对象\n * isReactive: 检查一个对象是否是由 reactive 创建的响应式代理\n * isReadonly: 检查一个对象是否是由 readonly 创建的只读代理\n * isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理\n\n\n# 四、Composition API 的优势\n\n\n# 1.Options API 存在的问题\n\n使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\n\n\n\n\n\n# 2.Composition API 的优势\n\n我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\n\n\n\n\n\n# 五、新的组件\n\n\n# 1.Fragment\n\n * 在Vue2中: 组件必须有一个根标签\n * 在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\n * 好处: 减少标签层级, 减小内存占用\n\n\n# 2.Teleport\n\n * 什么是Teleport？—— Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。\n   \n   <teleport to=\"移动位置\">\n   \t<div v-if=\"isShow\" class=\"mask\">\n   \t\t<div class=\"dialog\">\n   \t\t\t<h3>我是一个弹窗</h3>\n   \t\t\t<button @click=\"isShow = false\">关闭弹窗</button>\n   \t\t</div>\n   \t</div>\n   </teleport>\n   \n\n\n# 3.Suspense\n\n * 等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n\n * 使用步骤：\n   \n   * 异步引入组件\n     \n     import {defineAsyncComponent} from 'vue'\n     const Child = defineAsyncComponent(()=>import('./components/Child.vue'))\n     \n   \n   * 使用Suspense包裹组件，并配置好default 与 fallback\n     \n     <template>\n     \t<div class=\"app\">\n     \t\t<h3>我是App组件</h3>\n     \t\t<Suspense>\n     \t\t\t<template v-slot:default>\n     \t\t\t\t<Child/>\n     \t\t\t</template>\n     \t\t\t<template v-slot:fallback>\n     \t\t\t\t<h3>加载中.....</h3>\n     \t\t\t</template>\n     \t\t</Suspense>\n     \t</div>\n     </template>\n     \n\n\n# 六、其他\n\n\n# 1.全局API的转移\n\n * Vue 2.x 有许多全局 API 和配置。\n   \n   * 例如：注册全局组件、注册全局指令等。\n     \n     //注册全局组件\n     Vue.component('MyButton', {\n       data: () => ({\n         count: 0\n       }),\n       template: '<button @click=\"count++\">Clicked {{ count }} times.</button>'\n     })\n     \n     //注册全局指令\n     Vue.directive('focus', {\n       inserted: el => el.focus()\n     }\n     \n\n * Vue3.0中对这些API做出了调整：\n   \n   * 将全局的API，即：Vue.xxx调整到应用实例（app）上\n     \n     2.X 全局 API（VUE）            3.X 实例 API (APP)\n     Vue.config.xxxx            app.config.xxxx\n     Vue.config.productionTip   移除\n     Vue.component              app.component\n     Vue.directive              app.directive\n     Vue.mixin                  app.mixin\n     Vue.use                    app.use\n     Vue.prototype              app.config.globalProperties\n\n\n# 2.其他改变\n\n * data选项应始终被声明为一个函数。\n\n * 过度类名的更改：\n   \n   * Vue2.x写法\n     \n     .v-enter,\n     .v-leave-to {\n       opacity: 0;\n     }\n     .v-leave,\n     .v-enter-to {\n       opacity: 1;\n     }\n     \n   \n   * Vue3.x写法\n     \n     .v-enter-from,\n     .v-leave-to {\n       opacity: 0;\n     }\n     \n     .v-leave-from,\n     .v-enter-to {\n       opacity: 1;\n     }\n     \n\n * 移除keyCode作为 v-on 的修饰符，同时也不再支持config.keyCodes\n\n * 移除v-on.native修饰符\n   \n   * 父组件中绑定事件\n     \n     <my-component\n       v-on:close=\"handleComponentEvent\"\n       v-on:click=\"handleNativeClickEvent\"\n     />\n     \n   \n   * 子组件中声明自定义事件\n     \n     <script>\n       export default {\n         emits: ['close']\n       }\n     <\/script>\n     \n\n * 移除过滤器（filter）\n   \n   > 过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\n\n * ......",normalizedContent:"# 介绍\n\n\n# 1.vue3简介\n\n * 2020年9月18日，vue.js发布3.0版本，代号：one piece（海贼王）\n * 耗时2年多、2600+次提交、30+个rfc、600+次pr、99位贡献者\n * github上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\n\n\n# 2.vue3带来了什么\n\n# 1.性能的提升\n\n * 打包大小减少41%\n\n * 初次渲染快55%, 更新渲染快133%\n\n * 内存减少54%\n   \n   ......\n\n# 2.源码的升级\n\n * 使用proxy代替defineproperty实现响应式\n\n * 重写虚拟dom的实现和tree-shaking\n   \n   ......\n\n# 3.拥抱typescript\n\n * vue3可以更好的支持typescript\n\n# 4.新的特性\n\n 1. composition api（组合api）\n    \n    * setup配置\n    * ref与reactive\n    * watch与watcheffect\n    * provide与inject\n    * ......\n\n 2. 新的内置组件\n    \n    * fragment\n    * teleport\n    * suspense\n\n 3. 其他改变\n    \n    * 新的生命周期钩子\n    * data 选项应始终被声明为一个函数\n    * 移除keycode支持作为 v-on 的修饰符\n    * ......\n\n\n# 一、创建vue3.0工程\n\n\n# 1.使用 vue-cli 创建\n\n官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\n\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n## 安装或者升级你的@vue/cli\nnpm install -g @vue/cli\n## 创建\nvue create vue_test\n## 启动\ncd vue_test\nnpm run serve\n\n\n\n# 2.使用 vite 创建\n\n官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\n\nvite官网：https://vitejs.cn\n\n * 什么是vite？—— 新一代前端构建工具。\n * 优势如下：\n   * 开发环境中，无需打包操作，可快速的冷启动。\n   * 轻量快速的热重载（hmr）。\n   * 真正的按需编译，不再等待整个应用编译完成。\n * 传统构建 与 vite构建对比图\n\n\n\n## 创建工程\nnpm init vite-app <project-name>\n## 进入工程目录\ncd <project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev\n\n\n\n# 二、常用 composition api\n\n官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\n\n\n# 1.拉开序幕的setup\n\n 1. 理解：vue3.0中一个新的配置项，值为一个函数。\n 2. setup是所有composition api（组合api）“ 表演的舞台 ”。\n 3. 组件中所用到的：数据、方法等等，均要配置在setup中。\n 4. setup函数的两种返回值：\n    1. 若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\n    2. 若返回一个渲染函数：则可以自定义渲染内容。（了解）\n 5. 注意点：\n    1. 尽量不要与vue2.x配置混用\n       * vue2.x配置（data、methos、computed...）中可以访问到setup中的属性、方法。\n       * 但在setup中不能访问到vue2.x配置（data、methos、computed...）。\n       * 如果有重名, setup优先。\n    2. setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个promise实例，但需要suspense和异步组件的配合）\n\n\n# 2.ref函数\n\n * 作用: 定义一个响应式的数据\n * 语法: const xxx = ref(initvalue)\n   * 创建一个包含响应式数据的引用对象（reference对象，简称ref对象）。\n   * js中操作数据： xxx.value\n   * 模板中读取数据: 不需要.value，直接：<div>{{xxx}}</div>\n * 备注：\n   * 接收的数据可以是：基本类型、也可以是对象类型。\n   * 基本类型的数据：响应式依然是靠object.defineproperty()的get与set完成的。\n   * 对象类型的数据：内部 “ 求助 ” 了vue3.0中的一个新函数—— reactive函数。\n\n\n# 3.reactive函数\n\n * 作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用ref函数）\n * 语法：const 代理对象= reactive(源对象)接收一个对象（或数组），返回一个代理对象（proxy的实例对象，简称proxy对象）\n * reactive定义的响应式数据是“深层次的”。\n * 内部基于 es6 的 proxy 实现，通过代理对象操作源对象内部数据进行操作。\n\n\n# 4.vue3.0中的响应式原理\n\n# vue2.x的响应式\n\n * 实现原理：\n   \n   * 对象类型：通过object.defineproperty()对属性的读取、修改进行拦截（数据劫持）。\n   \n   * 数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\n     \n     object.defineproperty(data, 'count', {\n         get () {}, \n         set () {}\n     })\n     \n\n * 存在问题：\n   \n   * 新增属性、删除属性, 界面不会更新。\n   * 直接通过下标修改数组, 界面不会自动更新。\n\n# vue3.0的响应式\n\n * 实现原理:\n   * 通过proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\n   * 通过reflect（反射）: 对源对象的属性进行操作。\n   * mdn文档中描述的proxy与reflect：\n     \n     * proxy：https://developer.mozilla.org/zh-cn/docs/web/javascript/reference/global_objects/proxy\n     \n     * reflect：https://developer.mozilla.org/zh-cn/docs/web/javascript/reference/global_objects/reflect\n       \n       new proxy(data, {\n       \t// 拦截读取属性值\n           get (target, prop) {\n           \treturn reflect.get(target, prop)\n           },\n           // 拦截设置属性值或添加新属性\n           set (target, prop, value) {\n           \treturn reflect.set(target, prop, value)\n           },\n           // 拦截删除属性\n           deleteproperty (target, prop) {\n           \treturn reflect.deleteproperty(target, prop)\n           }\n       })\n       \n       proxy.name = 'tom'   \n       \n\n\n# 5.reactive对比ref\n\n * 从定义数据角度对比：\n   * ref用来定义：基本类型数据。\n   * reactive用来定义：对象（或数组）类型数据。\n   * 备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过reactive转为代理对象。\n * 从原理角度对比：\n   * ref通过object.defineproperty()的get与set来实现响应式（数据劫持）。\n   * reactive通过使用proxy来实现响应式（数据劫持）, 并通过reflect操作源对象内部的数据。\n * 从使用角度对比：\n   * ref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。\n   * reactive定义的数据：操作数据与读取数据：均不需要.value。\n\n\n# 6.setup的两个注意点\n\n * setup执行的时机\n   \n   * 在beforecreate之前执行一次，this是undefined。\n\n * setup的参数\n   \n   * props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。\n   * context：上下文对象\n     * attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 this.$attrs。\n     * slots: 收到的插槽内容, 相当于 this.$slots。\n     * emit: 分发自定义事件的函数, 相当于 this.$emit。\n\n\n# 7.计算属性与监视\n\n# 1.computed函数\n\n * 与vue2.x中computed配置功能一致\n\n * 写法\n   \n   import {computed} from 'vue'\n   \n   setup(){\n       ...\n   \t//计算属性——简写\n       let fullname = computed(()=>{\n           return person.firstname + '-' + person.lastname\n       })\n       //计算属性——完整\n       let fullname = computed({\n           get(){\n               return person.firstname + '-' + person.lastname\n           },\n           set(value){\n               const namearr = value.split('-')\n               person.firstname = namearr[0]\n               person.lastname = namearr[1]\n           }\n       })\n   }\n   \n\n# 2.watch函数\n\n * 与vue2.x中watch配置功能一致\n\n * 两个小“坑”：\n   \n   * 监视reactive定义的响应式数据时：oldvalue无法正确获取、强制开启了深度监视（deep配置失效）。\n   * 监视reactive定义的响应式数据中某个属性时：deep配置有效。\n   \n   //情况一：监视ref定义的响应式数据\n   watch(sum,(newvalue,oldvalue)=>{\n   \tconsole.log('sum变化了',newvalue,oldvalue)\n   },{immediate:true})\n   \n   //情况二：监视多个ref定义的响应式数据\n   watch([sum,msg],(newvalue,oldvalue)=>{\n   \tconsole.log('sum或msg变化了',newvalue,oldvalue)\n   }) \n   \n   /* 情况三：监视reactive定义的响应式数据\n   \t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldvalue！！\n   \t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n   */\n   watch(person,(newvalue,oldvalue)=>{\n   \tconsole.log('person变化了',newvalue,oldvalue)\n   },{immediate:true,deep:false}) //此处的deep配置不再奏效\n   \n   //情况四：监视reactive定义的响应式数据中的某个属性\n   watch(()=>person.job,(newvalue,oldvalue)=>{\n   \tconsole.log('person的job变化了',newvalue,oldvalue)\n   },{immediate:true,deep:true}) \n   \n   //情况五：监视reactive定义的响应式数据中的某些属性\n   watch([()=>person.job,()=>person.name],(newvalue,oldvalue)=>{\n   \tconsole.log('person的job变化了',newvalue,oldvalue)\n   },{immediate:true,deep:true})\n   \n   //特殊情况\n   watch(()=>person.job,(newvalue,oldvalue)=>{\n       console.log('person的job变化了',newvalue,oldvalue)\n   },{deep:true}) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\n   \n\n# 3.watcheffect函数\n\n * watch的套路是：既要指明监视的属性，也要指明监视的回调。\n\n * watcheffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\n\n * watcheffect有点像computed：\n   \n   * 但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\n   * 而watcheffect更注重的是过程（回调函数的函数体），所以不用写返回值。\n   \n   //watcheffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\n   watcheffect(()=>{\n       const x1 = sum.value\n       const x2 = person.age\n       console.log('watcheffect配置的回调执行了')\n   })\n   \n\n\n# 8.生命周期\n\n * vue3.0中可以继续使用vue2.x中的生命周期钩子，但有有两个被更名：\n   * beforedestroy改名为 beforeunmount\n   * destroyed改名为 unmounted\n * vue3.0也提供了 composition api 形式的生命周期钩子，与vue2.x中钩子对应关系如下：\n   * beforecreate===>setup()\n   * created=======>setup()\n   * beforemount ===>onbeforemount\n   * mounted=======>onmounted\n   * beforeupdate===>onbeforeupdate\n   * updated =======>onupdated\n   * beforeunmount ==>onbeforeunmount\n   * unmounted =====>onunmounted\n\n\n# 9.自定义hook函数\n\n * 什么是hook？—— 本质是一个函数，把setup函数中使用的composition api进行了封装。\n\n * 类似于vue2.x中的mixin。\n\n * 自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。\n\n\n# 10.toref\n\n * 作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。\n\n * 语法：const name = toref(person,'name')\n\n * 应用: 要将响应式对象中的某个属性单独提供给外部使用时。\n\n * 扩展：torefs 与toref功能一致，但可以批量创建多个 ref 对象，语法：torefs(person)\n\n\n# 三、其它 composition api\n\n\n# 1.shallowreactive 与 shallowref\n\n * shallowreactive：只处理对象最外层属性的响应式（浅响应式）。\n\n * shallowref：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n\n * 什么时候使用?\n   \n   * 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowreactive。\n   * 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowref。\n\n\n# 2.readonly 与 shallowreadonly\n\n * readonly: 让一个响应式数据变为只读的（深只读）。\n * shallowreadonly：让一个响应式数据变为只读的（浅只读）。\n * 应用场景: 不希望数据被修改时。\n\n\n# 3.toraw 与 markraw\n\n * toraw：\n   * 作用：将一个由reactive生成的响应式对象转为普通对象。\n   * 使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\n * markraw：\n   * 作用：标记一个对象，使其永远不会再成为响应式对象。\n   * 应用场景:\n     1. 有些值不应被设置为响应式的，例如复杂的第三方类库等。\n     2. 当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\n\n\n# 4.customref\n\n * 作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n\n * 实现防抖效果：\n   \n   <template>\n   \t<input type=\"text\" v-model=\"keyword\">\n   \t<h3>{{keyword}}</h3>\n   </template>\n   \n   <script>\n   \timport {ref,customref} from 'vue'\n   \texport default {\n   \t\tname:'demo',\n   \t\tsetup(){\n   \t\t\t// let keyword = ref('hello') //使用vue准备好的内置ref\n   \t\t\t//自定义一个myref\n   \t\t\tfunction myref(value,delay){\n   \t\t\t\tlet timer\n   \t\t\t\t//通过customref去实现自定义\n   \t\t\t\treturn customref((track,trigger)=>{\n   \t\t\t\t\treturn{\n   \t\t\t\t\t\tget(){\n   \t\t\t\t\t\t\ttrack() //告诉vue这个value值是需要被“追踪”的\n   \t\t\t\t\t\t\treturn value\n   \t\t\t\t\t\t},\n   \t\t\t\t\t\tset(newvalue){\n   \t\t\t\t\t\t\tcleartimeout(timer)\n   \t\t\t\t\t\t\ttimer = settimeout(()=>{\n   \t\t\t\t\t\t\t\tvalue = newvalue\n   \t\t\t\t\t\t\t\ttrigger() //告诉vue去更新界面\n   \t\t\t\t\t\t\t},delay)\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t})\n   \t\t\t}\n   \t\t\tlet keyword = myref('hello',500) //使用程序员自定义的ref\n   \t\t\treturn {\n   \t\t\t\tkeyword\n   \t\t\t}\n   \t\t}\n   \t}\n   <\/script>\n   \n\n\n# 5.provide 与 inject\n\n * 作用：实现祖与后代组件间通信\n\n * 套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据\n\n * 具体写法：\n   \n   1. 祖组件中：\n      \n      setup(){\n      \t......\n          let car = reactive({name:'奔驰',price:'40万'})\n          provide('car',car)\n          ......\n      }\n      \n   \n   2. 后代组件中：\n      \n      setup(props,context){\n      \t......\n          const car = inject('car')\n          return {car}\n      \t......\n      }\n      \n\n\n# 6.响应式数据的判断\n\n * isref: 检查一个值是否为一个 ref 对象\n * isreactive: 检查一个对象是否是由 reactive 创建的响应式代理\n * isreadonly: 检查一个对象是否是由 readonly 创建的只读代理\n * isproxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理\n\n\n# 四、composition api 的优势\n\n\n# 1.options api 存在的问题\n\n使用传统optionsapi中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\n\n\n\n\n\n# 2.composition api 的优势\n\n我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\n\n\n\n\n\n# 五、新的组件\n\n\n# 1.fragment\n\n * 在vue2中: 组件必须有一个根标签\n * 在vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个fragment虚拟元素中\n * 好处: 减少标签层级, 减小内存占用\n\n\n# 2.teleport\n\n * 什么是teleport？—— teleport 是一种能够将我们的组件html结构移动到指定位置的技术。\n   \n   <teleport to=\"移动位置\">\n   \t<div v-if=\"isshow\" class=\"mask\">\n   \t\t<div class=\"dialog\">\n   \t\t\t<h3>我是一个弹窗</h3>\n   \t\t\t<button @click=\"isshow = false\">关闭弹窗</button>\n   \t\t</div>\n   \t</div>\n   </teleport>\n   \n\n\n# 3.suspense\n\n * 等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n\n * 使用步骤：\n   \n   * 异步引入组件\n     \n     import {defineasynccomponent} from 'vue'\n     const child = defineasynccomponent(()=>import('./components/child.vue'))\n     \n   \n   * 使用suspense包裹组件，并配置好default 与 fallback\n     \n     <template>\n     \t<div class=\"app\">\n     \t\t<h3>我是app组件</h3>\n     \t\t<suspense>\n     \t\t\t<template v-slot:default>\n     \t\t\t\t<child/>\n     \t\t\t</template>\n     \t\t\t<template v-slot:fallback>\n     \t\t\t\t<h3>加载中.....</h3>\n     \t\t\t</template>\n     \t\t</suspense>\n     \t</div>\n     </template>\n     \n\n\n# 六、其他\n\n\n# 1.全局api的转移\n\n * vue 2.x 有许多全局 api 和配置。\n   \n   * 例如：注册全局组件、注册全局指令等。\n     \n     //注册全局组件\n     vue.component('mybutton', {\n       data: () => ({\n         count: 0\n       }),\n       template: '<button @click=\"count++\">clicked {{ count }} times.</button>'\n     })\n     \n     //注册全局指令\n     vue.directive('focus', {\n       inserted: el => el.focus()\n     }\n     \n\n * vue3.0中对这些api做出了调整：\n   \n   * 将全局的api，即：vue.xxx调整到应用实例（app）上\n     \n     2.x 全局 api（vue）            3.x 实例 api (app)\n     vue.config.xxxx            app.config.xxxx\n     vue.config.productiontip   移除\n     vue.component              app.component\n     vue.directive              app.directive\n     vue.mixin                  app.mixin\n     vue.use                    app.use\n     vue.prototype              app.config.globalproperties\n\n\n# 2.其他改变\n\n * data选项应始终被声明为一个函数。\n\n * 过度类名的更改：\n   \n   * vue2.x写法\n     \n     .v-enter,\n     .v-leave-to {\n       opacity: 0;\n     }\n     .v-leave,\n     .v-enter-to {\n       opacity: 1;\n     }\n     \n   \n   * vue3.x写法\n     \n     .v-enter-from,\n     .v-leave-to {\n       opacity: 0;\n     }\n     \n     .v-leave-from,\n     .v-enter-to {\n       opacity: 1;\n     }\n     \n\n * 移除keycode作为 v-on 的修饰符，同时也不再支持config.keycodes\n\n * 移除v-on.native修饰符\n   \n   * 父组件中绑定事件\n     \n     <my-component\n       v-on:close=\"handlecomponentevent\"\n       v-on:click=\"handlenativeclickevent\"\n     />\n     \n   \n   * 子组件中声明自定义事件\n     \n     <script>\n       export default {\n         emits: ['close']\n       }\n     <\/script>\n     \n\n * 移除过滤器（filter）\n   \n   > 过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 javascript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\n\n * ......",charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"Nginx",frontmatter:{title:"Nginx",date:"2021-12-3",categories:["后端"],tags:["nginx"],permalink:"/pages/a18ea7/"},regularPath:"/02.%E5%90%8E%E7%AB%AF/01.%E5%90%8E%E7%AB%AF/03.Nginx.html",relativePath:"02.后端/01.后端/03.Nginx.md",key:"v-0396ec6a",path:"/pages/a18ea7/",headers:[{level:2,title:"一、概念",slug:"一、概念",normalizedTitle:"一、概念",charIndex:2},{level:2,title:"二、配置",slug:"二、配置",normalizedTitle:"二、配置",charIndex:1198},{level:2,title:"三、高可用",slug:"三、高可用",normalizedTitle:"三、高可用",charIndex:3580}],headersStr:"一、概念 二、配置 三、高可用",content:"# 一、概念\n\n一个高性能的HTTP和代理web服务器\n\n特点：\n\n * 占用内存少\n * 并发能力强\n\n作用：\n\n * 反向代理\n   \n   正向代理: 一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并制定目标（原始服务器），然后代理向原始服务器转发请求并将获得的内容返回给客户端，客户端才能使用正向代理\n   \n   A知道C让B去做\n   \n   反向代理: 以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求的客户端，此时代理服务器对外表现为一个反向代理服务器 A不知道C但B却访问C\n\n * 负载均衡\n   \n   1. 轮询（默认） 每个请求按时间顺序逐一分配到不同服务器\n   2. weight 权重，默认为1，值越大被分配的客户端越多\n   3. ip_hash 每个请求按访问IP的hash结果分配，每个访客固定访问一个服务器\n   4. fair 按后端服务器的响应时间来分配，响应时间短的优先分配\n   \n   upstream mysvr {   \n         server 192.168.10.121:8080;\n         server 192.168.10.121:8081;\n       }\n   server {\n           keepalive_requests 120; #单连接请求上限次数。\n           listen       4545;   #监听端口\n           server_name  127.0.0.1;   #监听地址       \n           location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。\n              proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表       \n           } \n       }\n   \n\n * 动静分离\n   \n   server {\n       listen       4545;   #监听端口\n       server_name  127.0.0.1;   #监听地址       \n       location  /www/ {\n           root  /data/;\n           index index.html index.htm;\n   \t} \n       location  /www/ {\n           root  /data/;\n           autoindex on;\n       } \n   }\n   \n\n\n# 二、配置\n\n配置文件：\n\n * 全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。\n * events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。\n * http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。\n * server块：配置虚拟主机的相关参数，一个http中可以有多个server。\n * location块：配置请求的路由，以及各种页面的处理情况。\n\n########### 每个指令必须有分号结束#################\n#user administrator administrators;  #配置用户或者组，默认为nobody nobody\n#worker_processes 2;  #允许生成的进程数，默认为1\n#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址\nerror_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg\nevents {\n    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on\n    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off\n    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\n    worker_connections  1024;    #最大连接数，默认为512\n}\nhttp {\n    include       mime.types;   #文件扩展名与文件类型映射表\n    default_type  application/octet-stream; #默认文件类型，默认为text/plain\n    #access_log off; #取消服务日志    \n    log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式\n    access_log log/access.log myFormat;  #combined为日志格式的默认值\n    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。\n    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。\n    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。\n\n    upstream mysvr {   \n      server 127.0.0.1:7878;\n      server 192.168.10.121:3333 backup;  #热备\n    }\n    error_page 404 https://www.baidu.com; #错误页\n    server {\n        keepalive_requests 120; #单连接请求上限次数。\n        listen       4545;   #监听端口\n        server_name  127.0.0.1;   #监听地址       \n        location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。\n           #root path;  #根目录\n           #index vv.txt;  #设置默认页\n           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表\n           deny 127.0.0.1;  #拒绝的ip\n           allow 172.18.5.54; #允许的ip           \n        } \n    }\n}\n\n\n * $remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；\n * $remote_user ：用来记录客户端用户名称；\n * $time_local ： 用来记录访问时间与时区；\n * $request ： 用来记录请求的url与http协议；\n * $status ： 用来记录请求状态；成功是200；\n * $body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n * $http_referer ：用来记录从那个页面链接访问过来的；\n * $http_user_agent ：记录客户端浏览器的相关信息；\n\n\n# 三、高可用\n\n需求：\n\n * 两台Nginx服务器\n * 安装keepalived软件\n * 虚拟IP\n\n配置：\n\n 1. 安装keepalived\n    \n    # 安装完成在 /etc 里面生成目录 keepalived，有文件 keepalived.conf\n    yum install keepalived --y\n    \n\n 2. 修改/etc/keepalived/keepalivec.conf 配置文件\n    \n    global_defs {\n    \t# 指定keepalived在发生切换时需要发送email到的对象，一行一个\n        notification_email {\n            acassen@firewall.loc\n            failover@firewall.loc\n            sysadmin@firewall.loc\n    \t}\n    \tnotification_email_from Alexandre.Cassen@firewall.loc #指定发件人\n        smtp_server 192.168.17.129 #指定smtp服务器地址\n        smtp_connect_timeout 30#指定smtp连接超时时间\n        router_id LVS_DEVEL #运行keepalived机器的一个标识 在/ect/hosts下载配置\n    }\n    # 检测脚本\n    vrrp_script chk_http_port { \n        script \"/usr/local/src/nginx_check.sh\"\n        interval 2  #（检测脚本执行的间隔） \n        weight 2    #权重 \n    } \n    vrrp_instance VI_1 { \n        state BACKUP   # 备份服务器上将 MASTER 改为 BACKUP \n        interface ens33    # 服务器网卡(ifconfig查看)\n        virtual_router_id 51   # 主、备机的 virtual_router_id 必须相同 \n        priority 90    # 主、备机取不同的优先级，主机值较大，备份机值较小 \n        advert_int 1 \n        authentication {\n            auth_type PASS\n            auth_pass 1111\n        }\n        # 虚拟ip\n        virtual_ipaddress {\n        \t192.168.17.50 // VRRP H 虚拟地址\n        }\n    }\n    \n\n 3. 在/usr/local/src 添加检测脚本nginx_check.sh\n    \n    #!/bin/bash\n    A=`ps -C nginx –no-header |wc -l`\n    if [ $A -eq 0 ];then\n     /usr/local/nginx/sbin/nginx\n     sleep 2\n     if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then\n     killall keepalived\n     fi\n    fi\n    ",normalizedContent:"# 一、概念\n\n一个高性能的http和代理web服务器\n\n特点：\n\n * 占用内存少\n * 并发能力强\n\n作用：\n\n * 反向代理\n   \n   正向代理: 一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并制定目标（原始服务器），然后代理向原始服务器转发请求并将获得的内容返回给客户端，客户端才能使用正向代理\n   \n   a知道c让b去做\n   \n   反向代理: 以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求的客户端，此时代理服务器对外表现为一个反向代理服务器 a不知道c但b却访问c\n\n * 负载均衡\n   \n   1. 轮询（默认） 每个请求按时间顺序逐一分配到不同服务器\n   2. weight 权重，默认为1，值越大被分配的客户端越多\n   3. ip_hash 每个请求按访问ip的hash结果分配，每个访客固定访问一个服务器\n   4. fair 按后端服务器的响应时间来分配，响应时间短的优先分配\n   \n   upstream mysvr {   \n         server 192.168.10.121:8080;\n         server 192.168.10.121:8081;\n       }\n   server {\n           keepalive_requests 120; #单连接请求上限次数。\n           listen       4545;   #监听端口\n           server_name  127.0.0.1;   #监听地址       \n           location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。\n              proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表       \n           } \n       }\n   \n\n * 动静分离\n   \n   server {\n       listen       4545;   #监听端口\n       server_name  127.0.0.1;   #监听地址       \n       location  /www/ {\n           root  /data/;\n           index index.html index.htm;\n   \t} \n       location  /www/ {\n           root  /data/;\n           autoindex on;\n       } \n   }\n   \n\n\n# 二、配置\n\n配置文件：\n\n * 全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。\n * events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。\n * http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。\n * server块：配置虚拟主机的相关参数，一个http中可以有多个server。\n * location块：配置请求的路由，以及各种页面的处理情况。\n\n########### 每个指令必须有分号结束#################\n#user administrator administrators;  #配置用户或者组，默认为nobody nobody\n#worker_processes 2;  #允许生成的进程数，默认为1\n#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址\nerror_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg\nevents {\n    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on\n    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off\n    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\n    worker_connections  1024;    #最大连接数，默认为512\n}\nhttp {\n    include       mime.types;   #文件扩展名与文件类型映射表\n    default_type  application/octet-stream; #默认文件类型，默认为text/plain\n    #access_log off; #取消服务日志    \n    log_format myformat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式\n    access_log log/access.log myformat;  #combined为日志格式的默认值\n    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。\n    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。\n    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。\n\n    upstream mysvr {   \n      server 127.0.0.1:7878;\n      server 192.168.10.121:3333 backup;  #热备\n    }\n    error_page 404 https://www.baidu.com; #错误页\n    server {\n        keepalive_requests 120; #单连接请求上限次数。\n        listen       4545;   #监听端口\n        server_name  127.0.0.1;   #监听地址       \n        location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。\n           #root path;  #根目录\n           #index vv.txt;  #设置默认页\n           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表\n           deny 127.0.0.1;  #拒绝的ip\n           allow 172.18.5.54; #允许的ip           \n        } \n    }\n}\n\n\n * $remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；\n * $remote_user ：用来记录客户端用户名称；\n * $time_local ： 用来记录访问时间与时区；\n * $request ： 用来记录请求的url与http协议；\n * $status ： 用来记录请求状态；成功是200；\n * $body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n * $http_referer ：用来记录从那个页面链接访问过来的；\n * $http_user_agent ：记录客户端浏览器的相关信息；\n\n\n# 三、高可用\n\n需求：\n\n * 两台nginx服务器\n * 安装keepalived软件\n * 虚拟ip\n\n配置：\n\n 1. 安装keepalived\n    \n    # 安装完成在 /etc 里面生成目录 keepalived，有文件 keepalived.conf\n    yum install keepalived --y\n    \n\n 2. 修改/etc/keepalived/keepalivec.conf 配置文件\n    \n    global_defs {\n    \t# 指定keepalived在发生切换时需要发送email到的对象，一行一个\n        notification_email {\n            acassen@firewall.loc\n            failover@firewall.loc\n            sysadmin@firewall.loc\n    \t}\n    \tnotification_email_from alexandre.cassen@firewall.loc #指定发件人\n        smtp_server 192.168.17.129 #指定smtp服务器地址\n        smtp_connect_timeout 30#指定smtp连接超时时间\n        router_id lvs_devel #运行keepalived机器的一个标识 在/ect/hosts下载配置\n    }\n    # 检测脚本\n    vrrp_script chk_http_port { \n        script \"/usr/local/src/nginx_check.sh\"\n        interval 2  #（检测脚本执行的间隔） \n        weight 2    #权重 \n    } \n    vrrp_instance vi_1 { \n        state backup   # 备份服务器上将 master 改为 backup \n        interface ens33    # 服务器网卡(ifconfig查看)\n        virtual_router_id 51   # 主、备机的 virtual_router_id 必须相同 \n        priority 90    # 主、备机取不同的优先级，主机值较大，备份机值较小 \n        advert_int 1 \n        authentication {\n            auth_type pass\n            auth_pass 1111\n        }\n        # 虚拟ip\n        virtual_ipaddress {\n        \t192.168.17.50 // vrrp h 虚拟地址\n        }\n    }\n    \n\n 3. 在/usr/local/src 添加检测脚本nginx_check.sh\n    \n    #!/bin/bash\n    a=`ps -c nginx –no-header |wc -l`\n    if [ $a -eq 0 ];then\n     /usr/local/nginx/sbin/nginx\n     sleep 2\n     if [ `ps -c nginx --no-header |wc -l` -eq 0 ];then\n     killall keepalived\n     fi\n    fi\n    ",charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"redis",frontmatter:{title:"redis",date:"2022-1-2",categories:["后端"],tags:["redis"],permalink:"/pages/9d202d/"},regularPath:"/02.%E5%90%8E%E7%AB%AF/01.%E5%90%8E%E7%AB%AF/05.Redis2.html",relativePath:"02.后端/01.后端/05.Redis2.md",key:"v-32ae2db2",path:"/pages/9d202d/",headers:[{level:2,title:"Redis",slug:"redis",normalizedTitle:"redis",charIndex:2},{level:3,title:"简单介绍",slug:"简单介绍",normalizedTitle:"简单介绍",charIndex:12},{level:3,title:"redis的安装",slug:"redis的安装",normalizedTitle:"redis的安装",charIndex:714},{level:3,title:"为什么使用NOSQL",slug:"为什么使用nosql",normalizedTitle:"为什么使用nosql",charIndex:982},{level:4,title:"单机 MySQL 的美好时代",slug:"单机-mysql-的美好时代",normalizedTitle:"单机 mysql 的美好时代",charIndex:996},{level:4,title:"Memcached(缓存)+MySQL+垂直拆分",slug:"memcached-缓存-mysql-垂直拆分",normalizedTitle:"memcached(缓存)+mysql+垂直拆分",charIndex:1275},{level:4,title:"Mysql主从读写分离",slug:"mysql主从读写分离",normalizedTitle:"mysql主从读写分离",charIndex:1690},{level:4,title:"分库分表+水平拆分+mysql集群",slug:"分库分表-水平拆分-mysql集群",normalizedTitle:"分库分表+水平拆分+mysql集群",charIndex:1834},{level:3,title:"四种NoSQL对比",slug:"四种nosql对比",normalizedTitle:"四种nosql对比",charIndex:2160},{level:3,title:"3V+3高",slug:"_3v-3高",normalizedTitle:"3v+3高",charIndex:2176},{level:3,title:"ACID",slug:"acid",normalizedTitle:"acid",charIndex:2350},{level:3,title:"CAP",slug:"cap",normalizedTitle:"cap",charIndex:2863},{level:3,title:"",slug:"为何cap三者不可兼得",normalizedTitle:"",charIndex:0},{level:3,title:"Base",slug:"base",normalizedTitle:"base",charIndex:252},{level:3,title:"分布式和集群",slug:"分布式和集群",normalizedTitle:"分布式和集群",charIndex:5113},{level:2,title:"Redis的数据类型",slug:"redis的数据类型",normalizedTitle:"redis的数据类型",charIndex:5205},{level:3,title:"公用命令",slug:"公用命令",normalizedTitle:"公用命令",charIndex:5334},{level:3,title:"key的命名建议",slug:"key的命名建议",normalizedTitle:"key的命名建议",charIndex:5776},{level:3,title:"String",slug:"string",normalizedTitle:"string",charIndex:5919},{level:3,title:"hash",slug:"hash",normalizedTitle:"hash",charIndex:1611},{level:3,title:"list",slug:"list",normalizedTitle:"list",charIndex:5243},{level:3,title:"set",slug:"set",normalizedTitle:"set",charIndex:5248},{level:3,title:"zset",slug:"zset",normalizedTitle:"zset",charIndex:5252},{level:2,title:"解析配置文件",slug:"解析配置文件",normalizedTitle:"解析配置文件",charIndex:10263},{level:2,title:"Redis的持久化",slug:"redis的持久化",normalizedTitle:"redis的持久化",charIndex:21805},{level:3,title:"RDB",slug:"rdb",normalizedTitle:"rdb",charIndex:11730},{level:4,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:14},{level:4,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:10265},{level:4,title:"Fork",slug:"fork",normalizedTitle:"fork",charIndex:22697},{level:4,title:"触发条件",slug:"触发条件",normalizedTitle:"触发条件",charIndex:22760},{level:4,title:"如何恢复",slug:"如何恢复",normalizedTitle:"如何恢复",charIndex:23081},{level:4,title:"优势",slug:"优势",normalizedTitle:"优势",charIndex:23279},{level:4,title:"劣势",slug:"劣势",normalizedTitle:"劣势",charIndex:23358},{level:4,title:"使用场景",slug:"使用场景",normalizedTitle:"使用场景",charIndex:592},{level:3,title:"AOF",slug:"aof",normalizedTitle:"aof",charIndex:16466},{level:4,title:"介绍",slug:"介绍-2",normalizedTitle:"介绍",charIndex:14},{level:4,title:"如何恢复",slug:"如何恢复-2",normalizedTitle:"如何恢复",charIndex:23081},{level:5,title:"正常恢复",slug:"正常恢复",normalizedTitle:"正常恢复",charIndex:24605},{level:5,title:"异常恢复",slug:"异常恢复",normalizedTitle:"异常恢复",charIndex:24676},{level:4,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:4,title:"优势",slug:"优势-2",normalizedTitle:"优势",charIndex:23279},{level:4,title:"劣势",slug:"劣势-2",normalizedTitle:"劣势",charIndex:23358},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:8657},{level:2,title:"Redis的事务",slug:"redis的事务",normalizedTitle:"redis的事务",charIndex:25562},{level:3,title:"是什么？",slug:"是什么",normalizedTitle:"是什么？",charIndex:1150},{level:3,title:"能干嘛？",slug:"能干嘛",normalizedTitle:"能干嘛？",charIndex:25649},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:6905},{level:3,title:"怎么玩？",slug:"怎么玩",normalizedTitle:"怎么玩？",charIndex:25925},{level:3,title:"乐观锁和悲观锁",slug:"乐观锁和悲观锁",normalizedTitle:"乐观锁和悲观锁",charIndex:2124},{level:3,title:"Watch监控",slug:"watch监控",normalizedTitle:"watch监控",charIndex:26796},{level:3,title:"3阶段",slug:"_3阶段",normalizedTitle:"3阶段",charIndex:27045},{level:3,title:"3特性",slug:"_3特性",normalizedTitle:"3特性",charIndex:27177},{level:2,title:"Redis的发布订阅(一般不用)",slug:"redis的发布订阅-一般不用",normalizedTitle:"redis的发布订阅(一般不用)",charIndex:27333},{level:2,title:"Redis的复制（Master/Slave）",slug:"redis的复制-master-slave",normalizedTitle:"redis的复制（master/slave）",charIndex:27892},{level:3,title:"是什么？",slug:"是什么-2",normalizedTitle:"是什么？",charIndex:1150},{level:3,title:"能干嘛？",slug:"能干嘛-2",normalizedTitle:"能干嘛？",charIndex:25649},{level:3,title:"怎么玩？",slug:"怎么玩-2",normalizedTitle:"怎么玩？",charIndex:25925},{level:3,title:"常用的主从方式",slug:"常用的主从方式",normalizedTitle:"常用的主从方式",charIndex:28142},{level:4,title:"一主二仆",slug:"一主二仆",normalizedTitle:"一主二仆",charIndex:28153},{level:4,title:"薪火相传",slug:"薪火相传",normalizedTitle:"薪火相传",charIndex:29316},{level:4,title:"反客为主",slug:"反客为主",normalizedTitle:"反客为主",charIndex:29490},{level:4,title:"哨兵模式（sentinel）",slug:"哨兵模式-sentinel",normalizedTitle:"哨兵模式（sentinel）",charIndex:29541},{level:3,title:"复制原理",slug:"复制原理",normalizedTitle:"复制原理",charIndex:30035},{level:3,title:"复制的缺点",slug:"复制的缺点",normalizedTitle:"复制的缺点",charIndex:30331},{level:3,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:5258},{level:2,title:"Redis集群",slug:"redis集群",normalizedTitle:"redis集群",charIndex:18164},{level:3,title:"什么是Redis集群？",slug:"什么是redis集群",normalizedTitle:"什么是redis集群？",charIndex:30894},{level:3,title:"集群搭建",slug:"集群搭建",normalizedTitle:"集群搭建",charIndex:31064},{level:3,title:"集群命令",slug:"集群命令",normalizedTitle:"集群命令",charIndex:31273},{level:3,title:"节点",slug:"节点",normalizedTitle:"节点",charIndex:13344},{level:3,title:"SLOTS",slug:"slots",normalizedTitle:"slots",charIndex:31593},{level:3,title:"Redis Cluster原理",slug:"redis-cluster原理",normalizedTitle:"redis cluster原理",charIndex:33116},{level:3,title:"在集群中录入值(组的概念)",slug:"在集群中录入值-组的概念",normalizedTitle:"在集群中录入值(组的概念)",charIndex:33535}],headersStr:"Redis 简单介绍 redis的安装 为什么使用NOSQL 单机 MySQL 的美好时代 Memcached(缓存)+MySQL+垂直拆分 Mysql主从读写分离 分库分表+水平拆分+mysql集群 四种NoSQL对比 3V+3高 ACID CAP  Base 分布式和集群 Redis的数据类型 公用命令 key的命名建议 String hash list set zset 解析配置文件 Redis的持久化 RDB 介绍 配置文件 Fork 触发条件 如何恢复 优势 劣势 使用场景 AOF 介绍 如何恢复 正常恢复 异常恢复  优势 劣势 总结 Redis的事务 是什么？ 能干嘛？ 常用命令 怎么玩？ 乐观锁和悲观锁 Watch监控 3阶段 3特性 Redis的发布订阅(一般不用) Redis的复制（Master/Slave） 是什么？ 能干嘛？ 怎么玩？ 常用的主从方式 一主二仆 薪火相传 反客为主 哨兵模式（sentinel） 复制原理 复制的缺点 命令 Redis集群 什么是Redis集群？ 集群搭建 集群命令 节点 SLOTS Redis Cluster原理 在集群中录入值(组的概念)",content:'# Redis\n\n\n# 简单介绍\n\nRedis：开源、免费、非关系型数据库、K-V数据库、内存数据库，支持持久化、事务和备份，集群(支持16个库)等高可用功能。并且性能极高(可以达到100000+的QPS)，易扩展，丰富的数据类型，所有操作都是单线程,原子性的。\n\nNOSQL：非关系型数据库，数据与数据之间没有关联关系。就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题\n\n类型\n\n 1. 键值(key-value)存储数据库\n 2. 列存储数据库：键仍然存在，但是指向了多个列，HBase (eg：博客平台(标签和文章)，日志)\n 3. 文档型数据库 MongoDb (eg：淘宝商品的评价)\n 4. 图形数据库 Neo4j （eg：好友列表）\n\n> 扩展:\n> \n> MongoDB是一个基于分布式文件存储的数据库。有C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\n> \n> MongoDB是一个介于关系型数据库和非关系型数据库之间的产品，是非关系数据库当中功能最丰富，最像关系型数据库的。\n> \n> 文档(document)是MongoDB中数据的基本单元，非常类似于关系型数据库系统中的行(但是比行要复杂的多); 集合(collection)就是一组文档，如果说MongoDB中的文档类似于关系型数据库中的行，那么集合就如同表;\n\n使用场景:\n\n 1. 数据模型比较简单\n 2. 需要灵活更强的IT系统\n 3. 对数据库性能要求比较高\n 4. 不需要高度的数据一致性\n 5. 对于给定的key，比较容易映射复杂值的环境\n\nSQL:关系型数据库，表与表之间建立关联关系\n\n\n# redis的安装\n\n#拉取镜像\ndocker pull redis\n#挂载数据卷并运行容器\ndocker run -p 6379:6379 --name redis -v /root/redis/data:/data -v /root/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes --requirepass "xxx"\n\n\n\n# 为什么使用NOSQL\n\n# 单机 MySQL 的美好时代\n\n在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。 在那个时候，更多的都是静态网页，动态交互类型的网站不多。\n\n\n\nDAL : Data Access Layer（数据访问层 – Hibernate，MyBatis）\n\n上述架构下，我们来看看数据存储的瓶颈是什么？\n\n>  1. 数据量的总大小一个机器放不下时。\n>  2. 数据的索引（B+ Tree）一个机器的内存放不下时。\n>  3. 访问量(读写混合)一个实例不能承受。\n\n如果满足了上述1 or 3个时，只能对数据库的整体架构进行重构。\n\n\n# Memcached(缓存)+MySQL+垂直拆分\n\n关于垂直拆分和水平拆分的简单介绍\n\n后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用缓存技术来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过文件缓存来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的IO压力。在这个时候，Memcached就自然的成为一个非常时尚的技术产品。\n\n\n\nMemcached作为一个独立的分布式的缓存服务器，为多个web服务器提供了一个共享的高性能缓存服务，在Memcached服务器上，又发展了根据hash算法来进行多台Memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端。\n\n# Mysql主从读写分离\n\n由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性。Mysql的master-slave模式成为这个时候的网站标配了。\n\n# 分库分表+水平拆分+mysql集群\n\n在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于MyISAM在写数据的时候会使用表锁，在高并发写数据的情况下会出现严重的锁问题，大量的高并发MySQL应用开始使用InnoDB引擎代替MyISAM。\n\n> ps：这就是为什么 MySQL 在 5.6 版本之后使用 InnoDB 做为默认存储引擎的原因 – MyISAM 写会锁表，InnoDB 有行锁，，并且是事务优先，发生冲突的几率低，并发性能高。\n> \n> 注意锁的几个概念：行锁和表锁，读锁和写锁，乐观锁和悲观锁，还有一个间隙锁\n> \n> 详情请看锁的介绍\n\n\n\n\n# 四种NoSQL对比\n\n\n\n\n# 3V+3高\n\ngraph TB\nsubgraph 互联网需求的3高\n3h((3高))--\x3eh1[高并发]\n3h--\x3eh2[高可用]\n3h--\x3eh3[高性能]\nend\n\nsubgraph 大数据时代的3V\n3v((3v))--\x3eV1[海量Volumn]\n3v--\x3ev2[多样Variety]\n3v--\x3ev3[实时Velocity]\nend\n\n\n\n# ACID\n\n事务是由一组SQL语句组成的逻辑处理单元，事务具有4属性，通常称为事务的ACID属性。\n\n * 原子性（Actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。\n\n * 一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以操持完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。\n   \n   eg：有3个人进行转账操作，为了保证一致性（即3个人 的账号金额总数不变），那在我写代码的时候，如果写了代码：A=A-5000;此时数据时不一致的。那就必须要写上，B=B+5000，或者是C=C+5000，这样的代码才能保证了数据库的一致性状态。\n\n * 隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦 然。具体看下面的几个隔离级别和并发问题。\n\n * 持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持\n\n\n# CAP\n\nC：consistency，数据在多个副本中能保持一致的状态。\n\nA：Availability，整个系统在任何时刻都能提供可用的服务，通常达到99.99%四个九可以称为高可用\n\nP：Partition tolerance，分区容错性，在分布式中，由于网络的原因无法避免有时候出现数据不一致的情况，系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择，换句话说，系统可以跨网络分区线性的伸缩和扩展。\n\nCAP理论的核心：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。\n\n * CA：单点集群，满足一致性，可用性的系统，通常在可扩展上不太强大。应用：传统的Oracle数据库\n * CP：满足一致性，分区容错性的系统，通常性能不是特别高。应用：Redis，MongoDB，银行\n * AP：满足可用性，分区容错性，通常可能对一致性要求低一些。应用：大多数网站架构的选择\n\n\n\nCAP理论就是说在分布式存储系统中，最多只能实现上面的两个。而由于当前的网络硬件肯定会出现延迟丢包等问题。所以\n\n分区容忍性是我们必须需要实现的\n\n所以我们只能在一致性和高可用之间进行权衡，没有NoSQL系统能同时保证三点。为什么呢？\n\n\n# 为何CAP三者不可兼得\n\n现在我们就来证明一下，为什么不能同时满足三个特性？\n\n假设有两台服务器，一台放着应用A和数据库V，一台放着应用B和数据库V，他们之间的网络可以互通，也就相当于分布式系统的两个部分。\n\n在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。\n\n\n\n当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库V0也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。\n\n上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性，那么这样能不能同时满足一致性和可用性呢？\n\n\n\n假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；\n\n如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。\n\n上面的过程比较简单，但也说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。这就需要我们在搭建系统时进行取舍了。\n\n\n# Base\n\nBase就是为了解决关系型数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。\n\nBase其实是下面三个术语的缩写：\n\n * 基本可用（Basically Available）\n * 软状态（Soft state）状态可以有一段时间不同步\n * 最终一致（Eventually consistent）最终数据是一致的就可以了，而不是时时保持强一致\n\n它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法。\n\n以案例转账为例，我们把用户A给用户B转账分成四个阶段，第一个阶段用户A准备转账，第二个阶段从用户A账户扣减余额，第三个阶段对用户B增加余额，第四个阶段完成转账。系统需要记录操作过程中每一步骤的状态，一旦系统出现故障，系统能够自动发现没有完成的任务，然后，根据任务所处的状态，继续执行任务，最终完成任务，达到一致的最终状态。\n\n在实际应用中，上面这个过程通常是通过持久化执行任务的状态和环境信息，一旦出现问题，定时任务会捞取未执行完的任务，继续未执行完的任务，直到执行完成为止，或者取消已经完成的部分操作回到原始状态。这种方法在任务完成每个阶段的时候，都要更新数据库中任务的状态，这在大规模高并发系统中不会有太好的性能，一个更好的办法是用Write-Ahead Log（写前日志），这和数据库的Bin Log（操作日志）相似，在做每一个操作步骤，都先写入日志，如果操作遇到问题而停止的时候，可以读取日志按照步骤进行恢复，并且继续执行未完成的工作，最后达到一致。写前日志可以利用机械硬盘的追加写而达到较好性能，因此，这是一种专业化的实现方式，多数业务系系统还是使用数据库记录的字段来记录任务的执行状态，也就是记录中间的“软状态”，一个任务的状态流转一般可以通过数据库的行级锁来实现，这比使用Write-Ahead Log实现更简单、更快速。\n\n\n# 分布式和集群\n\n分布式：不同的多台服务器上面部署不同的服务模块（工程）\n\n集群：不同的多台服务器上面部署相同的服务模块。通过分布式调度软件进行统一的调度，对外提供服务和访问。\n\n\n# Redis的数据类型\n\n> Redis五种数据类型：string、hash、list、set、zset\n\n命令参考：\n\n * http://redisdoc.com/\n * http://c.biancheng.net/redis_command/\n\n\n# 公用命令\n\n>  * del key\n>  * dump key：序列化给定key，返回被序列化的值\n>  * exists key：检查key是否存在\n>  * expire key second：为key设定过期时间,以秒计算,可以不写second，默认为秒\n>  * ttl key：返回key剩余时间,-1为永久,-2为失效\n>  * persist key：移除key的过期时间，key将持久保存\n>  * keys pattern：查询所有符号给定模式的key eg：keys *\n>  * randomkey：随机返回一个key\n>  * rename key newkey：修改key的名称\n>  * move key db：移动key至指定数据库中 eg:move a 1\n>  * type key：返回key所储存的值的类型\n\n> expirekey second的使用场景： 1、限时的优惠活动 2、网站数据缓存 3、手机验证码 4、限制网站访客频率\n\n\n# key的命名建议\n\n>  1. key不要太长，尽量不要超过1024字节。不仅消耗内存，也会降低查找的效率\n>  2. key不要太短，太短可读性会降低\n>  3. 在一个项目中，key最好使用统一的命名模式，如user:123:password\n>  4. key区分大小写\n\n\n# String\n\n> string类型是二进制安全的，redis的string可以包含任何数据，如图像、序列化对象。一个键最多能存储512MB。二进制安全是指，在传输数据的时候，能保证二进制数据的信息安全，也就是不会被篡改、破译；如果被攻击，能够及时检测出来\n\n>  * set key_name value：命令不区分大小写，但是key_name区分大小写\n>  * setnx key value：当key不存在时设置key的值。（SET if Not eXists）,分布式锁的问题\n>  * setex：创建一个key，并且设置他的过期时间\n>  * get key_name\n>  * getrange key start end：获取key中字符串的子字符串，从start开始，end结束\n>  * setrange key offset value：设置从offset往后的值\n>  * mget key1 [key2 …]：获取多个key\n>  * getset key_name value：返回key的旧值,并设定key的值。当key不存在，返回nil\n>  * strlen key：返回key所存储的字符串的长度\n>  * incr key_name ：INCR命令key中存储的值+1,如果不存在key，则key中的值话先被初始化为0再加1\n>  * INCRBY KEY_NAME 增量\n>  * DECR KEY_NAME：key中的值自减一\n>  * DECRBY KEY_NAME\n>  * append key_name value：字符串拼接，追加至末尾，如果不存在，为其赋值\n\n> String应用场景： 1、String通常用于保存单个字符串或JSON字符串数据 2、因为String是二进制安全的，所以可以把保密要求高的图片文件内容作为字符串来存储 3、计数器：常规Key-Value缓存应用，如微博数、粉丝数。INCR本身就具有原子性特性，所以不会有线程安全问题\n\n\n# hash\n\nRedis hash是一个string类型的field和value的映射表，hash特别适用于存储对象。每个hash可以存储232-1(40亿左右)键值对。可以看成KEY和VALUE的MAP容器。相比于JSON，hash占用很少的内存空间。\n\n常用命令\n\n>  * hset key_name field value：为指定的key设定field和value\n>  * hmset key field value[field1,value1]\n>  * hsetnx：当不存在才创建该field\n>  * hget key field\n>  * hmget key field[field1]\n>  * hgetall key：返回hash表中所有字段和值\n>  * hkeys key：获取hash表所有字段\n>  * hvals key：获取hash表所有值\n>  * hlen key：获取hash表中的字段数量\n>  * hdel key field [field1]：删除一个或多个hash表的字段\n>  * hexists：在key里面是否存在指定的field\n>  * hincrby key field increment：增加某个field的值\n\n应用场景\n\n> Hash的应用场景，通常用来存储一个用户信息的对象数据。\n> \n>  1. 相比于存储对象的string类型的json串，json串修改单个属性需要将整个值取出来。而hash不需要。\n>  2. 相比于多个key-value存储对象，hash节省了很多内存空间\n>  3. 如果hash的属性值被删除完，那么hash的key也会被redis删除\n\n\n# list\n\n类似于Java中的LinkedList。\n\n常用命令\n\n>  * lpush key value1 [value2]：从左往右插入\n> \n>  * eg:lpush list 1 2 3 lrange list 0 -1 输出：3 2 1\n> \n>  * rpush key value1 [value2]: 从右往左插入\n> \n>  * eg:rpush list 1 2 3 lrange list 0 -1 输出：1 2 3\n> \n>  * lpushx key value：从左侧插入值，如果list不存在，则不操作\n> \n>  * rpushx key value：从右侧插入值，如果list不存在，则不操作\n> \n>  * llen key：获取列表长度\n> \n>  * lindex key index：获取指定索引的元素,从零开始\n> \n>  * lrange key start stop：获取列表指定范围的元素\n> \n>  * lpop key ：从左侧移除第一个元素\n> \n>  * rpop key：移除列表最后一个元素\n> \n>  * irem:删除指定个数的同一元素\n> \n>  * eg:irem list 2 3 删掉了集合中的两个三\n> \n>  * blpop key [key1] timeout：移除并获取列表第一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止\n> \n>  * brpop key [key1] timeout：移除并获取列表最后一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止\n> \n>  * ltrim key start stop ：对列表进行修改，让列表只保留指定区间的元素，不在指定区间的元素就会被删除\n> \n>  * eg:list1中元素1 2 3 4 5 ltrim list1 2 3 list1剩余元素:3 4\n> \n>  * lset key index value ：指定索引的值\n> \n>  * linsert key before|after world value：在列表元素前或则后插入元素\n\n应用场景\n\n>  1. 对数据大的集合数据删减\n>     \n>        列表显示、关注列表、粉丝列表、留言评价...分页、热点新闻等\n> \n>  2. 任务队列    list通常用来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样通过order by来排序\n\n> 补充：\n> \n>  * rpoplpush list1 list2 移除list1最后一个元素，并将该元素添加到list2并返回此元素 用此命令可以实现订单下单流程、用户系统登录注册短信等。\n\n性能总结\n\n> 它是一个字符串链表，left、right都可以插入添加； 如果键不存在，创建新的链表； 如果键已存在，新增内容； 如果值全移除，对应的键也就消失了。 链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。\n\n\n# set\n\n唯一、无序\n\n>  * sadd key value1[value2]：向集合添加成员\n> \n>  * scard key：返回集合成员数\n> \n>  * smembers key：返回集合中所有成员\n> \n>  * sismember key member：判断memeber元素是否是集合key成员的成员\n> \n>  * srandmember key [count]：返回集合中一个或多个随机数\n> \n>  * srem key member1 [member2]：移除集合中一个或多个成员\n> \n>  * spop key：移除并返回集合中的一个随机元素\n> \n>  * smove source destination member：将member元素从source集合移动到destination集合\n> \n>  * sdiff key1 [key2]：返回给定的第一个集合和其他集合的差集(即在key1中的值而在其他key中找不到)\n> \n>  * sdiffstore destination key1[key2]：返回给定的第一个集合与其他的集合的差集并存储在destination中\n>    \n>    eg：set1：1 2 3 set2：3 4 5 6 sdiffstore set3 set1 set2 smembers set3 result：1 2\n> \n>  * sinter key1 [key2]:返回所有集合的交集\n> \n>  * sunion key1 [key2]：返回所有集合的并集\n\n> 对两个集合间的数据[计算]进行交集、并集、差集运算 1、以非常方便的实现如共同关注、共同喜好、二度好友等功能。对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存储到一个新的集合中。 2、利用唯一性，可以统计访问网站的所有独立 IP\n\n\n# zset\n\n有序且不重复。每个元素都会关联一个double类型的分数，Redis通过分数进行从小到大的排序。分数可以重复\n\n>  * zadd key score1 memeber1\n> \n>  * zcard key ：获取集合中的元素数量\n> \n>  * zcount key min max 计算在有序集合中指定区间分数的成员数\n> \n>  * zcount key min max 计算在有序集合中指定区间分数的成员数\n> \n>  * zrange key start stop 指定输出索引范围内的成员\n> \n>  * zrangebyscore key min max 指定输出score区间内的成员\n> \n>  * zrank key member：返回有序集合指定成员的索引\n> \n>  * zrevrange key start stop ：返回有序集中指定区间内的成员，通过索引，分数从高到底\n> \n>  * zrem key member [member …] 移除有序集合中的一个或多个成员\n> \n>  * zremrangebyrank key start stop 移除有序集合中给定的索引区间的所有成员(第一名是0)(低到高排序）\n> \n>  * zremrangebyscore key min max 移除有序集合中给定的分数区间的所有成员\n\n> 常用于排行榜：\n> \n>  1. 如推特可以以发表时间作为score来存储\n>  2. 存储成绩\n>  3. 还可以用zset来做带权重的队列，让重要的任务先执行\n\n\n# 解析配置文件\n\n############################################# GENERAL #############################################\n#是否在后台运行；no：不是后台运行\ndaemonize yes\n \n#是否开启保护模式，默认开启。要是配置里没有指定bind和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。\nprotected-mode yes\n \n#redis的进程文件\npidfile /var/run/redis/redis-server.pid\n \n#redis监听的端口号。\nport 6379\n \n#此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。\ntcp-backlog 511\n \n#指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求\n#bind 127.0.0.1\n#bind 0.0.0.0\n \n#配置unix socket来让redis支持监听本地连接。\n# unixsocket /var/run/redis/redis.sock\n \n#配置unix socket使用文件的权限\n# unixsocketperm 700\n \n# 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。\ntimeout 0\n \n#tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。\ntcp-keepalive 0\n \n#指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）\nloglevel notice\n \n#指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。\nlogfile /var/log/redis/redis-server.log\n \n#是否打开记录syslog功能\n# syslog-enabled no\n \n#syslog的标识符。\n# syslog-ident redis\n \n#日志的来源、设备\n# syslog-facility local0\n \n#数据库的数量，默认使用的数据库是DB 0。可以通过SELECT命令选择一个db\ndatabases 16\n \n######################################## SNAPSHOTTING(RDB) ########################################### \n# redis是基于内存的数据库，可以通过设置该值定期写入磁盘。\n# 注释掉“save”这一行配置项就可以让保存数据库功能失效\n# 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） \n# 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） \n# 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）\nsave 900 1\nsave 300 10\nsave 60 10000\n \n#当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误\nstop-writes-on-bgsave-error yes\n \n#使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间\nrdbcompression yes\n \n#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。\nrdbchecksum yes\n \n#rdb文件的名称\ndbfilename dump.rdb\n \n#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录\ndir /data\n \n########################################## 主从复制 #############################################  \n#复制选项，slave复制对应的master。\n# slaveof <masterip> <masterport>\n \n#如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。\n# masterauth <master-password>\n \n#当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master in progress”。\nslave-serve-stale-data yes\n \n#作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。\nslave-read-only yes\n \n#是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。\nrepl-diskless-sync no\n \n#diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。\nrepl-diskless-sync-delay 5\n \n#slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。\n# repl-ping-slave-period 10\n \n#复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。\n# repl-timeout 60\n \n#是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。\nrepl-disable-tcp-nodelay no\n \n#复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。\n# repl-backlog-size 5mb\n \n#master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。\n# repl-backlog-ttl 3600\n \n#当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。\nslave-priority 100\n \n#redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。\n# min-slaves-to-write 3\n \n#延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。\n# min-slaves-max-lag 10\n \n# 设置1或另一个设置为0禁用这个特性。\n# Setting one or the other to 0 disables the feature.\n# By default min-slaves-to-write is set to 0 (feature disabled) and\n# min-slaves-max-lag is set to 10.\n \n\n############################################# SECURITY #############################################\n \n#requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。注意只有密码没有用户名。\n# requirepass foobared\n \n#把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n \n#设置成一个空的值，可以禁止一个命令\n# rename-command CONFIG ""\n \n########################################### LIMITS(进程限制) ########################################### \n \n# 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。\n# maxclients 10000\n \n#redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。\n# maxmemory <bytes>\n \n#内存容量超过maxmemory后的处理策略。\n#volatile-lru：利用LRU算法移除设置过过期时间的key。\n#volatile-random：随机移除设置过过期时间的key。\n#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）\n#allkeys-lru：利用LRU算法移除任何key。\n#allkeys-random：随机移除任何key。\n#noeviction：不移除任何key，只是返回一个写错误。\n#上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort。\n# maxmemory-policy noeviction\n \n#lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。\n# maxmemory-samples 5\n \n####################################### APPEND ONLY MODE(AOF) ####################################### \n \n#默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。\nappendonly no\n \n#aof文件名\nappendfilename "appendonly.aof"\n \n#aof持久化策略的配置\n#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。\n#always表示每次写入都执行fsync，以保证数据同步到磁盘。\n#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。\nappendfsync everysec\n \n# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。Linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。\nno-appendfsync-on-rewrite no\n \n#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。\nauto-aof-rewrite-percentage 100\n#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写\nauto-aof-rewrite-min-size 64mb\n \n#aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。\naof-load-truncated yes\n \n \n############### LUA SCRIPTING ###############\n \n# 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。\nlua-time-limit 5000\n \n \n############### 集群相关 ###############\n \n#集群开关，默认是不开启集群模式。\n# cluster-enabled yes\n \n#集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突\n# cluster-config-file nodes-6379.conf\n \n#节点互连超时的阀值。集群节点超时毫秒数\n# cluster-node-timeout 15000\n \n#在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：\n#比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period\n#如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 \n# cluster-slave-validity-factor 10\n \n#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。\n# cluster-migration-barrier 1\n \n#默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。\n# cluster-require-full-coverage yes\n \n \n############### SLOW LOG 慢查询日志 ###############\n \n###slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。\n#执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。\nslowlog-log-slower-than 10000\n \n#慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。\nslowlog-max-len 128\n \n############### 延迟监控 ###############\n#延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。\nlatency-monitor-threshold 0\n \n############### EVENT NOTIFICATION 订阅通知 ###############\n#键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。\n#notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：\n##K 键空间通知，所有通知以 __keyspace@__ 为前缀\n##E 键事件通知，所有通知以 __keyevent@__ 为前缀\n##g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知\n##$ 字符串命令的通知\n##l 列表命令的通知\n##s 集合命令的通知\n##h 哈希命令的通知\n##z 有序集合命令的通知\n##x 过期事件：每当有过期键被删除时发送\n##e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送\n##A 参数 g$lshzxe 的别名\n#输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications\n \nnotify-keyspace-events ""\n \n############### ADVANCED CONFIG 高级配置 ###############\n#数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash\nhash-max-ziplist-entries 512\n#value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash。\nhash-max-ziplist-value 64\n \n#数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。\nlist-max-ziplist-entries 512\n#value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。\nlist-max-ziplist-value 64\n \n#数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set。\nset-max-intset-entries 512\n \n#数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。\nzset-max-ziplist-entries 128\n#value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。\nzset-max-ziplist-value 64\n \n#value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。\nhll-sparse-max-bytes 3000\n \n#Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。\nactiverehashing yes\n \n##对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。\n#对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。\nclient-output-buffer-limit normal 0 0 0\n#对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。\nclient-output-buffer-limit slave 256mb 64mb 60\n#对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。\nclient-output-buffer-limit pubsub 32mb 8mb 60\n \n#redis执行任务的频率为1s除以hz。\nhz 10\n \n#在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。\naof-rewrite-incremental-fsync yes\n\n\n\n# Redis的持久化\n\n\n# RDB\n\n# 介绍\n\n       在指定的时间间隔内生成内存中整个数据集的持久化快照。快照文件默认被存储在当前文件夹中，名称为dump.rdb，可以通过dir和dbfilename参数来修改默认值。\n\n        Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。  整个过程中，主进程是不进行任何的IO操作的，这就确保了极高的性能。\n\n# 配置文件\n\n# redis是基于内存的数据库，可以通过设置该值定期写入磁盘。\n# 注释掉“save”这一行配置项就可以让保存数据库功能失效\n# 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） \n# 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） \n# 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）\nsave 900 1\nsave 300 10\nsave 60 10000\n \n#当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误\nstop-writes-on-bgsave-error yes\n \n#使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间\nrdbcompression yes\n \n#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。\nrdbchecksum yes\n \n#rdb文件的名称\ndbfilename dump.rdb\n \n#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录\ndir /data\n\n\n# Fork\n\n      fork的作用相当于复制一个与当前进程一样的进程。但是是一个全新的进程，并作为原进程的子进程。\n\n# 触发条件\n\n 1. 通过配制文件中的save条件（可自己配置）\n    \n    save 900 1\n    save 300 10\n    save 60 10000\n    \n\n 2. 手动通过save和bgsave命令\n\n * save：save时只管保存，其他不管，全部阻塞\n * bgsave：redis会在后台异步的进行快照操作，同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的事件\n\n 3. 通过flushall命令，也会产生dump.rdb文件，但是里面是空的，无意义。\n 4. 通过shutdown命令，安全退出，也会生成快照文件（和异常退出形成对比，比如：kill杀死进程的方式）\n\n# 如何恢复\n\nappendonly no\ndbfilename dump.rdb\ndir /var/lib/redis  #可以自行指定\n\n\nappendonly 设置成no，redis启动时会把/var/lib/redis 目录下的dump.rdb 中的数据恢复。dir 和dbfilename 都可以设置。appendonly 设置成yes 时候不会将dump.rdb文件中的数据恢复。\n\n# 优势\n\n 1. 恢复数据的速度很快，适合大规模的数据恢复，而又对部分数据不敏感的情况\n 2. dump.db文件是一个压缩的二进制文件，文件暂用空间小\n\n# 劣势\n\n 1. 当出现异常退出时，会丢失最后一次快照后的数据\n 2. 当fork的时候，内存的中的数据会被克隆一份，大致两倍的膨胀需要考虑。而且，当数据过大时，fork操作占用过多的系统资源，造成主服务器进程假死。\n\n# 使用场景\n\n 1. 数据备份\n 2. 可容忍部分数据丢失\n 3. 跨数据中心的容灾备份\n\n\n# AOF\n\n# 介绍\n\n以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来（读操作补不可记录），只许追加文件但不可以改写文件，redis启动之初会读取改文件重新构建数据。保存的是appendonly.aof文件\n\naof机制默认关闭，可以通过appendonly = yes参数开启aof机制，通过appendfilename = myaoffile.aof指定aof文件名称。\n\naof持久化的一些策略配置\n\n#aof持久化策略的配置\n#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。\n#always表示每次写入都执行fsync，以保证数据同步到磁盘。\n#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。\nappendfsync everysec\n\n\n对于触发aof重写机制也可以通过配置文件来进行设置：\n\n# aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。\nauto-aof-rewrite-percentage 100\n# 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写\nauto-aof-rewrite-min-size 64mb\n\n\n当aof重写时会引发重写和持久化追加同时发生的问题，可以通过no-appendfsync-on-rewrite no进行配置\n\n# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。Linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。\nno-appendfsync-on-rewrite no\n\n\n# 如何恢复\n\n# 正常恢复\n\n       将文件放到dir指定的文件夹下，当redis启动的时候会自动加载数据，注意：aof文件的优先级比dump大。\n\n# 异常恢复\n\n * 有些操作可以直接到appendonly.aof文件里去修改。\n   \n   eg：使用了flushall这个命令，此刻持久化文件中就会有这么一条命令记录，把它删掉就可以了\n\n * 写坏的文件可以通过 redis-check-aof --fix进行修复\n\n#\n\n# 优势\n\n 1. 根据不同的策略，可以实现每秒，每一次修改操作的同步持久化，就算在最恶劣的情况下只会丢失不会超过两秒数据。\n\n 2. 当文件太大时，会触发重写机制，确保文件不会太大。\n\n 3. 文件可以简单的读懂\n\n# 劣势\n\n 1. aof文件的大小太大，就算有重写机制，但重写所造成的阻塞问题是不可避免的\n 2. aof文件恢复速度慢\n\n\n# 总结\n\n * 如果你只希望你的数据在服务器运行的时候存在，可以不使用任何的持久化方式\n\n * 一般建议同时开启两种持久化方式。AOF进行数据的持久化，确保数据不会丢失太多，而RDB更适合用于备份数据库，留着一个做万一的手段。\n\n * 性能建议：因为RDB文件只用做后备用途，建议只在slave上持久化RDB文件，而且只要在15分钟备份一次就够了，只保留900 1这条规则。如果Enalbe AOF,好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。 代价： 1、带来了持续的IO； 2、AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。\n\n如果不Enable AOF,仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是 如果Master/Slave同时宕掉，会丢失10几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微 博就选用了这种架构。\n\n\n# Redis的事务\n\n\n# 是什么？\n\n可以一次执行多个命令，本质是一组命令的集合。一个事物中的所有命令都会被序列化，按顺序的串行执行而不会被其他命令插入，不许加塞。\n\n\n# 能干嘛？\n\n一个队列中，一次性的，顺序的，排他的执行一系列命令。\n\n\n# 常用命令\n\n命令                描述\nmulti             标记一个事务的开始\nexec              执行所有事务块内的命令\ndiscard           取消事务，放弃执行事务块内的所有命令\nwatch key [key]   监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\nunwatch           取消watch命令对所有 key 的监视。\n\n\n# 怎么玩？\n\n 1. 正常执行\n    \n    \n\n 2. 放弃事务\n    \n    \n\n 3. 全体连坐\n\n 4. 冤头债主\n\n\n\n\n# 乐观锁和悲观锁\n\n说明：乐观锁和悲观锁是两种思想，用于解决并发场景下的数据竞争问题\n\n * 乐观锁：乐观锁在操作数据时非常乐观，认为别人不会同时修改数据。因此乐观锁不会上锁，只是在执行更新的时候判断一下在此期间别人是否修改了数据：如果别人修改了数据则放弃操作，否则执行操作。\n   \n   * 实现：版本号机制、CAS\n   \n   * **CAS:**如果内存位置V的值等于预期的A值，则将该位置更新为新值B，否则不进行任何操作。\n   \n   * 版本号:\n     \n     1. 当某个线程查询数据时，将该数据的版本号一起查出来；\n     \n     2. 当该线程更新数据时，判断当前版本号与之前读取的版本号是否一致，如果一致才进行操作。\n\n * 悲观锁：悲观锁在操作数据时比较悲观，认为别人会同时修改数据。因此操作数据时直接把数据锁住，直到操作完成后才会释放锁；上锁期间其他人不能修改数据。\n   \n   * 实现：加锁\n\n优缺点和适用场景:\n\n * 功能限制 与悲观锁相比，乐观锁适用的场景受到了更多的限制，无论是CAS还是版本号机制。\n\n例如，CAS只能保证单个变量操作的原子性，当涉及到多个变量时，CAS是无能为力的，而synchronized则可以通过对整个代码块加锁来处理。\n\n再比如版本号机制，如果query的时候是针对表1，而update的时候是针对表2，也很难通过简单的版本号来实现乐观锁。\n\n * 竞争激烈程度 如果悲观锁和乐观锁都可以使用，那么选择就要考虑竞争的激烈程度：\n\n当竞争不激烈 (出现并发冲突的概率小)时，乐观锁更有优势，因为悲观锁会锁住代码块或数据，其他线程无法同时访问，影响并发，而且加锁和释放锁都需要消耗额外的资源。\n\n当竞争激烈(出现并发冲突的概率大)时，悲观锁更有优势，因为乐观锁在执行更新时频繁失败，需要不断重试，浪费CPU资源。\n\n\n# Watch监控\n\nwatch指令，类似乐观锁，如果key的值已经被修改了，那么整个事务队列都不会被执行,同时返回一个Nullmulti-bulk应答以通知调用者事务执行失败。\n\n注意：一旦执行了exec或者discard，之前加的所有监控锁都会被取消掉了。\n\n例子：\n\n * 初始化信用卡的可用余额和欠额\n   \n   \n\n * 无加塞篡改\n   \n   \n\n * 有加塞篡改，当watch的key被修改，后面的那个事务全部执行失败\n   \n   \n\n * unwatch\n   \n   \n\n\n# 3阶段\n\n开启:以multi开启事务\n\n入队:将多个命令入队到事务中,接到这些命令不会立刻执行,而是放到等待执行的事务队列里面\n\n执行：有exec命令触发事务\n\ngraph LR \nkai((开启))==>ru((入队))\nru==>zhi((执行))\n\n\n\n# 3特性\n\n单独的隔离操作：事务中的所有命令都会序列化，按顺序的执行。事务在等待执行的时候，不会被其他客户端发送来的米命令请求打断\n\n没有隔离级别的概念：队列中的所有命令没有提交exec之前都是不会被执行的\n\n不保证原子性：redis中如果一条命令执行失败，其后的命令仍然会被执行，没有回滚，参考冤头债主\n\n\n# Redis的发布订阅(一般不用)\n\n发布订阅\n\nRedis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。\n\nRedis 客户端可以订阅任意数量的频道。\n\n下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：\n\n\n当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：\n\n\n\n      命令\n\n>  * subscribe channel [channel…]：订阅一个或多个频道的信息\n>  * psubscribe pattern [pattern…]：订阅一个或多个符合规定模式的频道\n>  * publish channel message ：将信息发送到指定频道\n>  * unsubscribe [channel[channel…]]：退订频道\n>  * punsubscribe [pattern[pattern…]]：退订所有给定模式的频道\n\n\n      应用场景\n\n> 构建实时的消息系统，比如普通聊天、群聊等功能。 1、博客网站订阅，当作者发布就可以推送给粉丝 2、微信公众号模式\n\n\n\n\n# Redis的复制（Master/Slave）\n\n\n# 是什么？\n\n就是我们常说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主\n\n\n# 能干嘛？\n\n读写分离\n\n容灾恢复\n\n\n# 怎么玩？\n\n配从(库)不配主(库)\n\n从库配置\n\n#配置从库\nslaveof 主库ip 主库端口\n#查看主从信息\ninfo replication\n\n\n每次与master断开后，都需要重新连接，除非你配置进redis.conf文件\n\n\n# 常用的主从方式\n\n# 一主二仆\n\n含义：就是一个Master两个Slave\n\n\n\n通过info replication查看主从信息\n\n# Replication\nrole:master\nconnected_slaves:0\nmaster_replid:f6baff9abfda12ca58048cfce4b0e2c1f4683da1\nmaster_replid2:e8fe596d47d9d1d923d56d884b28128b78d2c1e0\nmaster_repl_offset:0\nsecond_repl_offset:1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6379\nmaster_link_status:down\nmaster_last_io_seconds_ago:-1\nmaster_sync_in_progress:0\nslave_repl_offset:0\nmaster_link_down_since_seconds:1585217521\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_replid:adbec19afa734e84a333b07ea2f33c43c73fe743\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n\n注意:\n\n 1. 第一次slave1 和slave2切入点，是全量复制，之后是增量复制\n    \n    \n\n 2. 主机可以写，但是从机不可以写，从机只能读\n    \n    \n\n 3. 主机shutdowm后从机待机状态，等主机回来后，主机新增记录从机可以顺利复制\n\n 4. 从机shutdowm后，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件\n\n 5. 从机复制到的数据，会被本机持久化。就算shutdown断开连接依然会有数据。\n\n 6. 重新连接或者变更master，会清除之前的数据，重新建立拷贝最新的数据\n\n# 薪火相传\n\n含义:就是上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力。\n\n\n\n注意事项和一主二仆差不多,但注意虽然有slave是相对master，但是依然是slave [查看](#zhu yi)\n\n# 反客为主\n\nSLAVEOF no one\n\n\n使当前数据库停止与其他数据库的同步，转成主数据库\n\n# 哨兵模式（sentinel）\n\n反客为主的自动版，能够后台监控Master库是否故障，如果故障了根据投票数自动将slave库转换为主库。一组sentinel能\n\n同时监控多个Master。\n\n使用步骤：\n\n 1. 在Master对应redis.conf同目录下新建sentinel.conf文件，名字绝对不能错；\n\n 2. 配置哨兵，在sentinel.conf文件中填入内容(可以配置多个)：\n    \n    #说明：最后一个数字1，表示主机挂掉后slave投票看让谁接替成为主机，得票数多少后成为主机。\n    sentinel monitor 被监控数据库名字（自己起名字） ip port 1\n    \n\n 3. 启动哨兵模式(路径按照自己的需求进行配置)：\n    \n    redis-sentinel  /myredis/sentinel.conf\n    \n\n注意：\n\n 1. 当master挂掉后，会通过选票进行选出下一个master。而且只有使用了sentinel.conf启动的才能开启选票\n\n 2. 当原来的master后来后，很不幸变成了slave。\n\n\n# 复制原理\n\n 1. Slave启动成功连接到master后会发送一个sync命令；\n\n 2. Master接到命令启动后的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master\n    \n    将传送整个数据文件到slave，以完成一次完全同步；\n\n 3. 全量复制：而slave服务在数据库文件数据后，将其存盘并加载到内存中；\n\n 4. 增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步；\n\n 5. 但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。\n\n[结合这几个注意事项](#zhu yi)\n\n\n# 复制的缺点\n\n延时，由于所有的写操作都是在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使得这个问题更加严重。\n\n\n# 命令\n\n命令                                                  作用\nslaveof 主库ip 主库端口                                   配置从库\ninfo replication                                    查看redis主从复制的情况\nslaveof no one                                      使当前数据库停止与其他数据库的同步，转成主数据库\nsentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1   配置哨兵，监视master\nredis-sentinel /myredis/sentinel.conf               以哨兵模式启动redis\n\n\n# Redis集群\n\n容量不够，redis如何扩容？\n\n并发写操作，redis如何分摊？\n\n\n# 什么是Redis集群？\n\nRedis集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N\n\nRedis集群通过分区（partition）来提供一定程度的可用性（availability）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。\n\n\n# 集群搭建\n\n搭建看这篇文章,有效\n\ngraph LR\nyi((导入安装包))--\x3eer((修改配置文件))\ner((修改配置文件))--\x3esan((创建基本镜像))\nsan--\x3esi((创建节点镜像))\nsi--\x3e|启动6个容器|wu((进入一个redis-cli))\nwu--\x3e|cluster meet|liu((集群添加节点))\nliu--\x3eqi((配置槽点))\nqi--\x3eba((配置主从高可用))\n\n\n\n# 集群命令\n\nCLUSTER INFO 打印集群的信息 \nCLUSTER NODES 列出集群当前已知的所有节点（node），以及这些节点的相关信息。  \n\n//节点(node) \nCLUSTER MEET <ip> <port> 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。 \nCLUSTER FORGET <node_id> 从集群中移除 node_id 指定的节点。 \nCLUSTER REPLICATE <node_id> 将当前节点设置为 node_id 指定的节点的从节点。 \nCLUSTER SAVECONFIG 将节点的配置文件保存到硬盘里面。  \n\n//槽(slot) \nCLUSTER ADDSLOTS <slot> [slot ...] 将一个或多个槽（slot）指派（assign）给当前节点。 \nCLUSTER DELSLOTS <slot> [slot ...] 移除一个或多个槽对当前节点的指派。 \nCLUSTER FLUSHSLOTS 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。 \nCLUSTER SETSLOT <slot> NODE <node_id> 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽>，然后再进行指派。 \nCLUSTER SETSLOT <slot> MIGRATING <node_id> 将本节点的槽 slot 迁移到 node_id 指定的节点中。 \nCLUSTER SETSLOT <slot> IMPORTING <node_id> 从 node_id 指定的节点中导入槽 slot 到本节点。 \nCLUSTER SETSLOT <slot> STABLE 取消对槽 slot 的导入（import）或者迁移（migrate）。  \n\n//键 (key) \nCLUSTER KEYSLOT <key> 计算键 key 应该被放置在哪个槽上。 \nCLUSTER COUNTKEYSINSLOT <slot> 返回槽 slot 目前包含的键值对数量。 \nCLUSTER GETKEYSINSLOT <slot> <count> 返回 count 个 slot 槽中的键。\n\n\n\n# 节点\n\n 1. 一个集群至少要有三个主节点，即要有六个节点。\n\n 2. 分配原则尽量保证每个主数据库运行在不同的ip地址，每个从库和主库不在一个ip地址。\n\n 3. 当主节点崩了，从节点能自动升为主节点；当主节点再次恢复时，主节点变为slave。参考哨兵模式。\n\n 4. redis.conf有个参数cluster-require-full-coverage\n    \n    #默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。\n    # cluster-require-full-coverage yes\n    \n\n\n# SLOTS\n\n * 一个Redis 集群包含16384个插槽(hash slot)， 数据库中的每个键都属于这16384个插槽的其中一个，集群使用公式CRC1 6(key)% 16384来计算键key属于哪个槽(如果有组的话就只算组的部分)，其中CRC16(key)语句用于计算键key的CRC16校验和。\n\n * 集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点。其中:\n   \n   * 节点A负责处理0号至5500号插槽\n   * 节点B负责处理5501号至11000号插槽\n   * 节点C负责处理11001号至16383号插槽\n\n             (注意：每个节点分配的插槽具体数字可能不同，当然可以通过一个小脚本来指定)\n\n一个疑问：为什么是16384(2^14)，而不是65535(2^16)呢？\n\n在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用char进行bitmap压缩后是2kb（16384÷8÷1024=2kb），也就是说使用2k的空间创建了16k的槽数65535=65k，压缩后就是8kb（65536÷8÷1024=8kb），也就是说需要需要8k的心跳包。\n\n\n# Redis Cluster原理\n\n 1. node1和node2首先进行握手meet，知道彼此的存在\n 2. 握手成功后，两个节点会定期发送ping/pong消息，交换数据信息(消息头，消息体)\n 3. 消息头里面有个字段：unsigned char myslots[CLUSTER_SLOTS/8]，每一位代表一个槽，如果该位是1，代表该槽属于这个节点\n 4. 消息体中会携带一定数量的其他节点的信息，大约占集群节点总数量的十分之一，至少是3个节点的信息。节点数量越多，消息体内容越大。\n 5. 每秒都在发送ping消息。每秒随机选取5个节点，找出最久没有通信的节点发送ping消息。\n 6. 每100毫秒都会扫描本地节点列表，如果发现节点最近一次接受pong消息的时间大于cluster-node-timeout/2,则立即发送ping消息\n\nredis集群的主节点数量基本不可能超过1000个，超过的话可能会导致网络拥堵。\n\n\n# 在集群中录入值(组的概念)\n\nredis-cli客户端提供-c参数实现自动重定向\n\nredis-cli -c -p 6379\n\n\n不在一个slot下的键值，是不能使用mget，mset等多键操作\n\n可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。\n\nset user:{info}:name xxx\nset age{info} 12\nset {info}email 12345@qq.com\nhset user{info} name jiang\nhset user{info} age 19\nhset user{info} eamil 12345@qq.com\n\n#结果\n172.17.0.3:6379> keys *\n1) "user{info}"\n2) "{info}email"\n3) "user:{info}:name"\n4) "age{info}"\n------------------------------------------------------\n172.17.0.3:6379> hkeys user{info}\n1) "name"\n2) "age"\n3) "eamil"\n',normalizedContent:'# redis\n\n\n# 简单介绍\n\nredis：开源、免费、非关系型数据库、k-v数据库、内存数据库，支持持久化、事务和备份，集群(支持16个库)等高可用功能。并且性能极高(可以达到100000+的qps)，易扩展，丰富的数据类型，所有操作都是单线程,原子性的。\n\nnosql：非关系型数据库，数据与数据之间没有关联关系。就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题\n\n类型\n\n 1. 键值(key-value)存储数据库\n 2. 列存储数据库：键仍然存在，但是指向了多个列，hbase (eg：博客平台(标签和文章)，日志)\n 3. 文档型数据库 mongodb (eg：淘宝商品的评价)\n 4. 图形数据库 neo4j （eg：好友列表）\n\n> 扩展:\n> \n> mongodb是一个基于分布式文件存储的数据库。有c++语言编写。旨在为web应用提供可扩展的高性能数据存储解决方案。\n> \n> mongodb是一个介于关系型数据库和非关系型数据库之间的产品，是非关系数据库当中功能最丰富，最像关系型数据库的。\n> \n> 文档(document)是mongodb中数据的基本单元，非常类似于关系型数据库系统中的行(但是比行要复杂的多); 集合(collection)就是一组文档，如果说mongodb中的文档类似于关系型数据库中的行，那么集合就如同表;\n\n使用场景:\n\n 1. 数据模型比较简单\n 2. 需要灵活更强的it系统\n 3. 对数据库性能要求比较高\n 4. 不需要高度的数据一致性\n 5. 对于给定的key，比较容易映射复杂值的环境\n\nsql:关系型数据库，表与表之间建立关联关系\n\n\n# redis的安装\n\n#拉取镜像\ndocker pull redis\n#挂载数据卷并运行容器\ndocker run -p 6379:6379 --name redis -v /root/redis/data:/data -v /root/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes --requirepass "xxx"\n\n\n\n# 为什么使用nosql\n\n# 单机 mysql 的美好时代\n\n在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。 在那个时候，更多的都是静态网页，动态交互类型的网站不多。\n\n\n\ndal : data access layer（数据访问层 – hibernate，mybatis）\n\n上述架构下，我们来看看数据存储的瓶颈是什么？\n\n>  1. 数据量的总大小一个机器放不下时。\n>  2. 数据的索引（b+ tree）一个机器的内存放不下时。\n>  3. 访问量(读写混合)一个实例不能承受。\n\n如果满足了上述1 or 3个时，只能对数据库的整体架构进行重构。\n\n\n# memcached(缓存)+mysql+垂直拆分\n\n关于垂直拆分和水平拆分的简单介绍\n\n后来，随着访问量的上升，几乎大部分使用mysql架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用缓存技术来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过文件缓存来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的io压力。在这个时候，memcached就自然的成为一个非常时尚的技术产品。\n\n\n\nmemcached作为一个独立的分布式的缓存服务器，为多个web服务器提供了一个共享的高性能缓存服务，在memcached服务器上，又发展了根据hash算法来进行多台memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端。\n\n# mysql主从读写分离\n\n由于数据库的写入压力增加，memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性。mysql的master-slave模式成为这个时候的网站标配了。\n\n# 分库分表+水平拆分+mysql集群\n\n在memcached的高速缓存，mysql的主从复制，读写分离的基础之上，这时mysql主库的写压力开始出现瓶颈，而数据量的持续猛增，由于myisam在写数据的时候会使用表锁，在高并发写数据的情况下会出现严重的锁问题，大量的高并发mysql应用开始使用innodb引擎代替myisam。\n\n> ps：这就是为什么 mysql 在 5.6 版本之后使用 innodb 做为默认存储引擎的原因 – myisam 写会锁表，innodb 有行锁，，并且是事务优先，发生冲突的几率低，并发性能高。\n> \n> 注意锁的几个概念：行锁和表锁，读锁和写锁，乐观锁和悲观锁，还有一个间隙锁\n> \n> 详情请看锁的介绍\n\n\n\n\n# 四种nosql对比\n\n\n\n\n# 3v+3高\n\ngraph tb\nsubgraph 互联网需求的3高\n3h((3高))--\x3eh1[高并发]\n3h--\x3eh2[高可用]\n3h--\x3eh3[高性能]\nend\n\nsubgraph 大数据时代的3v\n3v((3v))--\x3ev1[海量volumn]\n3v--\x3ev2[多样variety]\n3v--\x3ev3[实时velocity]\nend\n\n\n\n# acid\n\n事务是由一组sql语句组成的逻辑处理单元，事务具有4属性，通常称为事务的acid属性。\n\n * 原子性（actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。\n\n * 一致性（consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以操持完整性；事务结束时，所有的内部数据结构（如b树索引或双向链表）也都必须是正确的。\n   \n   eg：有3个人进行转账操作，为了保证一致性（即3个人 的账号金额总数不变），那在我写代码的时候，如果写了代码：a=a-5000;此时数据时不一致的。那就必须要写上，b=b+5000，或者是c=c+5000，这样的代码才能保证了数据库的一致性状态。\n\n * 隔离性（isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦 然。具体看下面的几个隔离级别和并发问题。\n\n * 持久性（durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持\n\n\n# cap\n\nc：consistency，数据在多个副本中能保持一致的状态。\n\na：availability，整个系统在任何时刻都能提供可用的服务，通常达到99.99%四个九可以称为高可用\n\np：partition tolerance，分区容错性，在分布式中，由于网络的原因无法避免有时候出现数据不一致的情况，系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在c和a之间做出选择，换句话说，系统可以跨网络分区线性的伸缩和扩展。\n\ncap理论的核心：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。\n\n * ca：单点集群，满足一致性，可用性的系统，通常在可扩展上不太强大。应用：传统的oracle数据库\n * cp：满足一致性，分区容错性的系统，通常性能不是特别高。应用：redis，mongodb，银行\n * ap：满足可用性，分区容错性，通常可能对一致性要求低一些。应用：大多数网站架构的选择\n\n\n\ncap理论就是说在分布式存储系统中，最多只能实现上面的两个。而由于当前的网络硬件肯定会出现延迟丢包等问题。所以\n\n分区容忍性是我们必须需要实现的\n\n所以我们只能在一致性和高可用之间进行权衡，没有nosql系统能同时保证三点。为什么呢？\n\n\n# 为何cap三者不可兼得\n\n现在我们就来证明一下，为什么不能同时满足三个特性？\n\n假设有两台服务器，一台放着应用a和数据库v，一台放着应用b和数据库v，他们之间的网络可以互通，也就相当于分布式系统的两个部分。\n\n在满足一致性的时候，两台服务器 n1和n2，一开始两台服务器的数据是一样的，db0=db0。在满足可用性的时候，用户不管是请求n1或者n2，都会得到立即响应。在满足分区容错性的情况下，n1和n2有任何一方宕机，或者网络不通的时候，都不会影响n1和n2彼此之间的正常运作。\n\n\n\n当用户通过n1中的a应用请求数据更新到服务器db0后，这时n1中的服务器db0变为db1，通过分布式系统的数据同步更新操作，n2服务器中的数据库v0也更新为了db1，这时，用户通过b向数据库发起请求得到的数据就是即时更新后的数据db1。\n\n上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，n1和n2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性，那么这样能不能同时满足一致性和可用性呢？\n\n\n\n假设n1和n2之间通信的时候网络突然出现故障，有用户向n1发送数据更新请求，那n1中的数据db0将被更新为db1，由于网络是断开的，n2中的数据库仍旧是db0；\n\n如果这个时候，有用户向n2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据db1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据db0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据db1。\n\n上面的过程比较简单，但也说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。这就需要我们在搭建系统时进行取舍了。\n\n\n# base\n\nbase就是为了解决关系型数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。\n\nbase其实是下面三个术语的缩写：\n\n * 基本可用（basically available）\n * 软状态（soft state）状态可以有一段时间不同步\n * 最终一致（eventually consistent）最终数据是一致的就可以了，而不是时时保持强一致\n\n它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里base就是解决这个问题的办法。\n\n以案例转账为例，我们把用户a给用户b转账分成四个阶段，第一个阶段用户a准备转账，第二个阶段从用户a账户扣减余额，第三个阶段对用户b增加余额，第四个阶段完成转账。系统需要记录操作过程中每一步骤的状态，一旦系统出现故障，系统能够自动发现没有完成的任务，然后，根据任务所处的状态，继续执行任务，最终完成任务，达到一致的最终状态。\n\n在实际应用中，上面这个过程通常是通过持久化执行任务的状态和环境信息，一旦出现问题，定时任务会捞取未执行完的任务，继续未执行完的任务，直到执行完成为止，或者取消已经完成的部分操作回到原始状态。这种方法在任务完成每个阶段的时候，都要更新数据库中任务的状态，这在大规模高并发系统中不会有太好的性能，一个更好的办法是用write-ahead log（写前日志），这和数据库的bin log（操作日志）相似，在做每一个操作步骤，都先写入日志，如果操作遇到问题而停止的时候，可以读取日志按照步骤进行恢复，并且继续执行未完成的工作，最后达到一致。写前日志可以利用机械硬盘的追加写而达到较好性能，因此，这是一种专业化的实现方式，多数业务系系统还是使用数据库记录的字段来记录任务的执行状态，也就是记录中间的“软状态”，一个任务的状态流转一般可以通过数据库的行级锁来实现，这比使用write-ahead log实现更简单、更快速。\n\n\n# 分布式和集群\n\n分布式：不同的多台服务器上面部署不同的服务模块（工程）\n\n集群：不同的多台服务器上面部署相同的服务模块。通过分布式调度软件进行统一的调度，对外提供服务和访问。\n\n\n# redis的数据类型\n\n> redis五种数据类型：string、hash、list、set、zset\n\n命令参考：\n\n * http://redisdoc.com/\n * http://c.biancheng.net/redis_command/\n\n\n# 公用命令\n\n>  * del key\n>  * dump key：序列化给定key，返回被序列化的值\n>  * exists key：检查key是否存在\n>  * expire key second：为key设定过期时间,以秒计算,可以不写second，默认为秒\n>  * ttl key：返回key剩余时间,-1为永久,-2为失效\n>  * persist key：移除key的过期时间，key将持久保存\n>  * keys pattern：查询所有符号给定模式的key eg：keys *\n>  * randomkey：随机返回一个key\n>  * rename key newkey：修改key的名称\n>  * move key db：移动key至指定数据库中 eg:move a 1\n>  * type key：返回key所储存的值的类型\n\n> expirekey second的使用场景： 1、限时的优惠活动 2、网站数据缓存 3、手机验证码 4、限制网站访客频率\n\n\n# key的命名建议\n\n>  1. key不要太长，尽量不要超过1024字节。不仅消耗内存，也会降低查找的效率\n>  2. key不要太短，太短可读性会降低\n>  3. 在一个项目中，key最好使用统一的命名模式，如user:123:password\n>  4. key区分大小写\n\n\n# string\n\n> string类型是二进制安全的，redis的string可以包含任何数据，如图像、序列化对象。一个键最多能存储512mb。二进制安全是指，在传输数据的时候，能保证二进制数据的信息安全，也就是不会被篡改、破译；如果被攻击，能够及时检测出来\n\n>  * set key_name value：命令不区分大小写，但是key_name区分大小写\n>  * setnx key value：当key不存在时设置key的值。（set if not exists）,分布式锁的问题\n>  * setex：创建一个key，并且设置他的过期时间\n>  * get key_name\n>  * getrange key start end：获取key中字符串的子字符串，从start开始，end结束\n>  * setrange key offset value：设置从offset往后的值\n>  * mget key1 [key2 …]：获取多个key\n>  * getset key_name value：返回key的旧值,并设定key的值。当key不存在，返回nil\n>  * strlen key：返回key所存储的字符串的长度\n>  * incr key_name ：incr命令key中存储的值+1,如果不存在key，则key中的值话先被初始化为0再加1\n>  * incrby key_name 增量\n>  * decr key_name：key中的值自减一\n>  * decrby key_name\n>  * append key_name value：字符串拼接，追加至末尾，如果不存在，为其赋值\n\n> string应用场景： 1、string通常用于保存单个字符串或json字符串数据 2、因为string是二进制安全的，所以可以把保密要求高的图片文件内容作为字符串来存储 3、计数器：常规key-value缓存应用，如微博数、粉丝数。incr本身就具有原子性特性，所以不会有线程安全问题\n\n\n# hash\n\nredis hash是一个string类型的field和value的映射表，hash特别适用于存储对象。每个hash可以存储232-1(40亿左右)键值对。可以看成key和value的map容器。相比于json，hash占用很少的内存空间。\n\n常用命令\n\n>  * hset key_name field value：为指定的key设定field和value\n>  * hmset key field value[field1,value1]\n>  * hsetnx：当不存在才创建该field\n>  * hget key field\n>  * hmget key field[field1]\n>  * hgetall key：返回hash表中所有字段和值\n>  * hkeys key：获取hash表所有字段\n>  * hvals key：获取hash表所有值\n>  * hlen key：获取hash表中的字段数量\n>  * hdel key field [field1]：删除一个或多个hash表的字段\n>  * hexists：在key里面是否存在指定的field\n>  * hincrby key field increment：增加某个field的值\n\n应用场景\n\n> hash的应用场景，通常用来存储一个用户信息的对象数据。\n> \n>  1. 相比于存储对象的string类型的json串，json串修改单个属性需要将整个值取出来。而hash不需要。\n>  2. 相比于多个key-value存储对象，hash节省了很多内存空间\n>  3. 如果hash的属性值被删除完，那么hash的key也会被redis删除\n\n\n# list\n\n类似于java中的linkedlist。\n\n常用命令\n\n>  * lpush key value1 [value2]：从左往右插入\n> \n>  * eg:lpush list 1 2 3 lrange list 0 -1 输出：3 2 1\n> \n>  * rpush key value1 [value2]: 从右往左插入\n> \n>  * eg:rpush list 1 2 3 lrange list 0 -1 输出：1 2 3\n> \n>  * lpushx key value：从左侧插入值，如果list不存在，则不操作\n> \n>  * rpushx key value：从右侧插入值，如果list不存在，则不操作\n> \n>  * llen key：获取列表长度\n> \n>  * lindex key index：获取指定索引的元素,从零开始\n> \n>  * lrange key start stop：获取列表指定范围的元素\n> \n>  * lpop key ：从左侧移除第一个元素\n> \n>  * rpop key：移除列表最后一个元素\n> \n>  * irem:删除指定个数的同一元素\n> \n>  * eg:irem list 2 3 删掉了集合中的两个三\n> \n>  * blpop key [key1] timeout：移除并获取列表第一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止\n> \n>  * brpop key [key1] timeout：移除并获取列表最后一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止\n> \n>  * ltrim key start stop ：对列表进行修改，让列表只保留指定区间的元素，不在指定区间的元素就会被删除\n> \n>  * eg:list1中元素1 2 3 4 5 ltrim list1 2 3 list1剩余元素:3 4\n> \n>  * lset key index value ：指定索引的值\n> \n>  * linsert key before|after world value：在列表元素前或则后插入元素\n\n应用场景\n\n>  1. 对数据大的集合数据删减\n>     \n>        列表显示、关注列表、粉丝列表、留言评价...分页、热点新闻等\n> \n>  2. 任务队列    list通常用来实现一个消息队列，而且可以确保先后顺序，不必像mysql那样通过order by来排序\n\n> 补充：\n> \n>  * rpoplpush list1 list2 移除list1最后一个元素，并将该元素添加到list2并返回此元素 用此命令可以实现订单下单流程、用户系统登录注册短信等。\n\n性能总结\n\n> 它是一个字符串链表，left、right都可以插入添加； 如果键不存在，创建新的链表； 如果键已存在，新增内容； 如果值全移除，对应的键也就消失了。 链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。\n\n\n# set\n\n唯一、无序\n\n>  * sadd key value1[value2]：向集合添加成员\n> \n>  * scard key：返回集合成员数\n> \n>  * smembers key：返回集合中所有成员\n> \n>  * sismember key member：判断memeber元素是否是集合key成员的成员\n> \n>  * srandmember key [count]：返回集合中一个或多个随机数\n> \n>  * srem key member1 [member2]：移除集合中一个或多个成员\n> \n>  * spop key：移除并返回集合中的一个随机元素\n> \n>  * smove source destination member：将member元素从source集合移动到destination集合\n> \n>  * sdiff key1 [key2]：返回给定的第一个集合和其他集合的差集(即在key1中的值而在其他key中找不到)\n> \n>  * sdiffstore destination key1[key2]：返回给定的第一个集合与其他的集合的差集并存储在destination中\n>    \n>    eg：set1：1 2 3 set2：3 4 5 6 sdiffstore set3 set1 set2 smembers set3 result：1 2\n> \n>  * sinter key1 [key2]:返回所有集合的交集\n> \n>  * sunion key1 [key2]：返回所有集合的并集\n\n> 对两个集合间的数据[计算]进行交集、并集、差集运算 1、以非常方便的实现如共同关注、共同喜好、二度好友等功能。对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存储到一个新的集合中。 2、利用唯一性，可以统计访问网站的所有独立 ip\n\n\n# zset\n\n有序且不重复。每个元素都会关联一个double类型的分数，redis通过分数进行从小到大的排序。分数可以重复\n\n>  * zadd key score1 memeber1\n> \n>  * zcard key ：获取集合中的元素数量\n> \n>  * zcount key min max 计算在有序集合中指定区间分数的成员数\n> \n>  * zcount key min max 计算在有序集合中指定区间分数的成员数\n> \n>  * zrange key start stop 指定输出索引范围内的成员\n> \n>  * zrangebyscore key min max 指定输出score区间内的成员\n> \n>  * zrank key member：返回有序集合指定成员的索引\n> \n>  * zrevrange key start stop ：返回有序集中指定区间内的成员，通过索引，分数从高到底\n> \n>  * zrem key member [member …] 移除有序集合中的一个或多个成员\n> \n>  * zremrangebyrank key start stop 移除有序集合中给定的索引区间的所有成员(第一名是0)(低到高排序）\n> \n>  * zremrangebyscore key min max 移除有序集合中给定的分数区间的所有成员\n\n> 常用于排行榜：\n> \n>  1. 如推特可以以发表时间作为score来存储\n>  2. 存储成绩\n>  3. 还可以用zset来做带权重的队列，让重要的任务先执行\n\n\n# 解析配置文件\n\n############################################# general #############################################\n#是否在后台运行；no：不是后台运行\ndaemonize yes\n \n#是否开启保护模式，默认开启。要是配置里没有指定bind和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。\nprotected-mode yes\n \n#redis的进程文件\npidfile /var/run/redis/redis-server.pid\n \n#redis监听的端口号。\nport 6379\n \n#此参数确定了tcp连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。\ntcp-backlog 511\n \n#指定 redis 只接收来自于该 ip 地址的请求，如果不进行设置，那么将处理所有请求\n#bind 127.0.0.1\n#bind 0.0.0.0\n \n#配置unix socket来让redis支持监听本地连接。\n# unixsocket /var/run/redis/redis.sock\n \n#配置unix socket使用文件的权限\n# unixsocketperm 700\n \n# 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。\ntimeout 0\n \n#tcp keepalive参数。如果设置不为0，就使用配置tcp的so_keepalive值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。\ntcp-keepalive 0\n \n#指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）\nloglevel notice\n \n#指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。\nlogfile /var/log/redis/redis-server.log\n \n#是否打开记录syslog功能\n# syslog-enabled no\n \n#syslog的标识符。\n# syslog-ident redis\n \n#日志的来源、设备\n# syslog-facility local0\n \n#数据库的数量，默认使用的数据库是db 0。可以通过select命令选择一个db\ndatabases 16\n \n######################################## snapshotting(rdb) ########################################### \n# redis是基于内存的数据库，可以通过设置该值定期写入磁盘。\n# 注释掉“save”这一行配置项就可以让保存数据库功能失效\n# 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） \n# 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） \n# 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）\nsave 900 1\nsave 300 10\nsave 60 10000\n \n#当rdb持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解rdb持久化是否有错误\nstop-writes-on-bgsave-error yes\n \n#使用压缩rdb文件，rdb文件压缩使用lzf压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间\nrdbcompression yes\n \n#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上crc64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。\nrdbchecksum yes\n \n#rdb文件的名称\ndbfilename dump.rdb\n \n#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录\ndir /data\n \n########################################## 主从复制 #############################################  \n#复制选项，slave复制对应的master。\n# slaveof <masterip> <masterport>\n \n#如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。\n# masterauth <master-password>\n \n#当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去info和slavof命令之外的任何请求都会返回一个错误”sync with master in progress”。\nslave-serve-stale-data yes\n \n#作为从服务器，默认情况下是只读的（yes），可以修改成no，用于写（不建议）。\nslave-read-only yes\n \n#是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。\nrepl-diskless-sync no\n \n#diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。\nrepl-diskless-sync-delay 5\n \n#slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。\n# repl-ping-slave-period 10\n \n#复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。\n# repl-timeout 60\n \n#是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。\nrepl-disable-tcp-nodelay no\n \n#复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。\n# repl-backlog-size 5mb\n \n#master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。\n# repl-backlog-ttl 3600\n \n#当master不可用，sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。\nslave-priority 100\n \n#redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于n，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证n个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。\n# min-slaves-to-write 3\n \n#延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。\n# min-slaves-max-lag 10\n \n# 设置1或另一个设置为0禁用这个特性。\n# setting one or the other to 0 disables the feature.\n# by default min-slaves-to-write is set to 0 (feature disabled) and\n# min-slaves-max-lag is set to 10.\n \n\n############################################# security #############################################\n \n#requirepass配置可以让用户使用auth命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。注意只有密码没有用户名。\n# requirepass foobared\n \n#把危险的命令给修改成其他名称。比如config命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。\n# rename-command config b840fc02d524045429941cc15f59e41cb7be6c52\n \n#设置成一个空的值，可以禁止一个命令\n# rename-command config ""\n \n########################################### limits(进程限制) ########################################### \n \n# 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。\n# maxclients 10000\n \n#redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。\n# maxmemory <bytes>\n \n#内存容量超过maxmemory后的处理策略。\n#volatile-lru：利用lru算法移除设置过过期时间的key。\n#volatile-random：随机移除设置过过期时间的key。\n#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以ttl）\n#allkeys-lru：利用lru算法移除任何key。\n#allkeys-random：随机移除任何key。\n#noeviction：不移除任何key，只是返回一个写错误。\n#上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort。\n# maxmemory-policy noeviction\n \n#lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。\n# maxmemory-samples 5\n \n####################################### append only mode(aof) ####################################### \n \n#默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，append only file是另一种持久化方式，可以提供更好的持久化特性。redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时redis都会先把这个文件的数据读入内存里，先忽略rdb文件。\nappendonly no\n \n#aof文件名\nappendfilename "appendonly.aof"\n \n#aof持久化策略的配置\n#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。\n#always表示每次写入都执行fsync，以保证数据同步到磁盘。\n#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。\nappendfsync everysec\n \n# 在aof重写或者写入rdb文件的时候，会执行大量io，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。\nno-appendfsync-on-rewrite no\n \n#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候redis能够调用bgrewriteaof对日志文件进行重写。当前aof文件大小是上次日志重写得到aof文件大小的二倍（设置为100）时，自动启动新的日志重写过程。\nauto-aof-rewrite-percentage 100\n#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写\nauto-aof-rewrite-min-size 64mb\n \n#aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复aof文件才可以。\naof-load-truncated yes\n \n \n############### lua scripting ###############\n \n# 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。只有script kill和shutdown nosave可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。\nlua-time-limit 5000\n \n \n############### 集群相关 ###############\n \n#集群开关，默认是不开启集群模式。\n# cluster-enabled yes\n \n#集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有redis生成并更新，每个redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突\n# cluster-config-file nodes-6379.conf\n \n#节点互连超时的阀值。集群节点超时毫秒数\n# cluster-node-timeout 15000\n \n#在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：\n#比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period\n#如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 \n# cluster-slave-validity-factor 10\n \n#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。\n# cluster-migration-barrier 1\n \n#默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。\n# cluster-require-full-coverage yes\n \n \n############### slow log 慢查询日志 ###############\n \n###slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有io操作。\n#执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。\nslowlog-log-slower-than 10000\n \n#慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 slowlog reset 来释放内存。\nslowlog-max-len 128\n \n############### 延迟监控 ###############\n#延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用latency打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过config set命令动态设置。\nlatency-monitor-threshold 0\n \n############### event notification 订阅通知 ###############\n#键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 redis 数据集的事件。因为开启键空间通知功能需要消耗一些 cpu ，所以在默认配置下，该功能处于关闭状态。\n#notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：\n##k 键空间通知，所有通知以 __keyspace@__ 为前缀\n##e 键事件通知，所有通知以 __keyevent@__ 为前缀\n##g del 、 expire 、 rename 等类型无关的通用命令的通知\n##$ 字符串命令的通知\n##l 列表命令的通知\n##s 集合命令的通知\n##h 哈希命令的通知\n##z 有序集合命令的通知\n##x 过期事件：每当有过期键被删除时发送\n##e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送\n##a 参数 g$lshzxe 的别名\n#输入的参数中至少要有一个 k 或者 e，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications\n \nnotify-keyspace-events ""\n \n############### advanced config 高级配置 ###############\n#数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash\nhash-max-ziplist-entries 512\n#value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash。\nhash-max-ziplist-value 64\n \n#数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。\nlist-max-ziplist-entries 512\n#value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。\nlist-max-ziplist-value 64\n \n#数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set。\nset-max-intset-entries 512\n \n#数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。\nzset-max-ziplist-entries 128\n#value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。\nzset-max-ziplist-value 64\n \n#value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对cpu要求不高，对空间要求较高的，建议设置到10000左右。\nhll-sparse-max-bytes 3000\n \n#redis将在每100毫秒时使用1毫秒的cpu时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。\nactiverehashing yes\n \n##对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。\n#对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。\nclient-output-buffer-limit normal 0 0 0\n#对于slave client和moniter client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。\nclient-output-buffer-limit slave 256mb 64mb 60\n#对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。\nclient-output-buffer-limit pubsub 32mb 8mb 60\n \n#redis执行任务的频率为1s除以hz。\nhz 10\n \n#在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32mb执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。\naof-rewrite-incremental-fsync yes\n\n\n\n# redis的持久化\n\n\n# rdb\n\n# 介绍\n\n       在指定的时间间隔内生成内存中整个数据集的持久化快照。快照文件默认被存储在当前文件夹中，名称为dump.rdb，可以通过dir和dbfilename参数来修改默认值。\n\n        redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。  整个过程中，主进程是不进行任何的io操作的，这就确保了极高的性能。\n\n# 配置文件\n\n# redis是基于内存的数据库，可以通过设置该值定期写入磁盘。\n# 注释掉“save”这一行配置项就可以让保存数据库功能失效\n# 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） \n# 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） \n# 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）\nsave 900 1\nsave 300 10\nsave 60 10000\n \n#当rdb持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解rdb持久化是否有错误\nstop-writes-on-bgsave-error yes\n \n#使用压缩rdb文件，rdb文件压缩使用lzf压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间\nrdbcompression yes\n \n#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上crc64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。\nrdbchecksum yes\n \n#rdb文件的名称\ndbfilename dump.rdb\n \n#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录\ndir /data\n\n\n# fork\n\n      fork的作用相当于复制一个与当前进程一样的进程。但是是一个全新的进程，并作为原进程的子进程。\n\n# 触发条件\n\n 1. 通过配制文件中的save条件（可自己配置）\n    \n    save 900 1\n    save 300 10\n    save 60 10000\n    \n\n 2. 手动通过save和bgsave命令\n\n * save：save时只管保存，其他不管，全部阻塞\n * bgsave：redis会在后台异步的进行快照操作，同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的事件\n\n 3. 通过flushall命令，也会产生dump.rdb文件，但是里面是空的，无意义。\n 4. 通过shutdown命令，安全退出，也会生成快照文件（和异常退出形成对比，比如：kill杀死进程的方式）\n\n# 如何恢复\n\nappendonly no\ndbfilename dump.rdb\ndir /var/lib/redis  #可以自行指定\n\n\nappendonly 设置成no，redis启动时会把/var/lib/redis 目录下的dump.rdb 中的数据恢复。dir 和dbfilename 都可以设置。appendonly 设置成yes 时候不会将dump.rdb文件中的数据恢复。\n\n# 优势\n\n 1. 恢复数据的速度很快，适合大规模的数据恢复，而又对部分数据不敏感的情况\n 2. dump.db文件是一个压缩的二进制文件，文件暂用空间小\n\n# 劣势\n\n 1. 当出现异常退出时，会丢失最后一次快照后的数据\n 2. 当fork的时候，内存的中的数据会被克隆一份，大致两倍的膨胀需要考虑。而且，当数据过大时，fork操作占用过多的系统资源，造成主服务器进程假死。\n\n# 使用场景\n\n 1. 数据备份\n 2. 可容忍部分数据丢失\n 3. 跨数据中心的容灾备份\n\n\n# aof\n\n# 介绍\n\n以日志的形式来记录每个写操作，将redis执行过的所有写指令记录下来（读操作补不可记录），只许追加文件但不可以改写文件，redis启动之初会读取改文件重新构建数据。保存的是appendonly.aof文件\n\naof机制默认关闭，可以通过appendonly = yes参数开启aof机制，通过appendfilename = myaoffile.aof指定aof文件名称。\n\naof持久化的一些策略配置\n\n#aof持久化策略的配置\n#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。\n#always表示每次写入都执行fsync，以保证数据同步到磁盘。\n#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。\nappendfsync everysec\n\n\n对于触发aof重写机制也可以通过配置文件来进行设置：\n\n# aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候redis能够调用bgrewriteaof对日志文件进行重写。当前aof文件大小是上次日志重写得到aof文件大小的二倍（设置为100）时，自动启动新的日志重写过程。\nauto-aof-rewrite-percentage 100\n# 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写\nauto-aof-rewrite-min-size 64mb\n\n\n当aof重写时会引发重写和持久化追加同时发生的问题，可以通过no-appendfsync-on-rewrite no进行配置\n\n# 在aof重写或者写入rdb文件的时候，会执行大量io，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。\nno-appendfsync-on-rewrite no\n\n\n# 如何恢复\n\n# 正常恢复\n\n       将文件放到dir指定的文件夹下，当redis启动的时候会自动加载数据，注意：aof文件的优先级比dump大。\n\n# 异常恢复\n\n * 有些操作可以直接到appendonly.aof文件里去修改。\n   \n   eg：使用了flushall这个命令，此刻持久化文件中就会有这么一条命令记录，把它删掉就可以了\n\n * 写坏的文件可以通过 redis-check-aof --fix进行修复\n\n#\n\n# 优势\n\n 1. 根据不同的策略，可以实现每秒，每一次修改操作的同步持久化，就算在最恶劣的情况下只会丢失不会超过两秒数据。\n\n 2. 当文件太大时，会触发重写机制，确保文件不会太大。\n\n 3. 文件可以简单的读懂\n\n# 劣势\n\n 1. aof文件的大小太大，就算有重写机制，但重写所造成的阻塞问题是不可避免的\n 2. aof文件恢复速度慢\n\n\n# 总结\n\n * 如果你只希望你的数据在服务器运行的时候存在，可以不使用任何的持久化方式\n\n * 一般建议同时开启两种持久化方式。aof进行数据的持久化，确保数据不会丢失太多，而rdb更适合用于备份数据库，留着一个做万一的手段。\n\n * 性能建议：因为rdb文件只用做后备用途，建议只在slave上持久化rdb文件，而且只要在15分钟备份一次就够了，只保留900 1这条规则。如果enalbe aof,好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的aof文件就可以了。 代价： 1、带来了持续的io； 2、aof rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少aof rewrite的频率，aof重写的基础大小默认值64m太小了，可以设到5g以上。默认超过原大小100%大小时重写可以改到适当的数值。\n\n如果不enable aof,仅靠master-slave replication 实现高可用性也可以。能省掉一大笔io也减少了rewrite时带来的系统波动。代价是 如果master/slave同时宕掉，会丢失10几分钟的数据，启动脚本也要比较两个master/slave中的rdb文件，载入较新的那个。新浪微 博就选用了这种架构。\n\n\n# redis的事务\n\n\n# 是什么？\n\n可以一次执行多个命令，本质是一组命令的集合。一个事物中的所有命令都会被序列化，按顺序的串行执行而不会被其他命令插入，不许加塞。\n\n\n# 能干嘛？\n\n一个队列中，一次性的，顺序的，排他的执行一系列命令。\n\n\n# 常用命令\n\n命令                描述\nmulti             标记一个事务的开始\nexec              执行所有事务块内的命令\ndiscard           取消事务，放弃执行事务块内的所有命令\nwatch key [key]   监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\nunwatch           取消watch命令对所有 key 的监视。\n\n\n# 怎么玩？\n\n 1. 正常执行\n    \n    \n\n 2. 放弃事务\n    \n    \n\n 3. 全体连坐\n\n 4. 冤头债主\n\n\n\n\n# 乐观锁和悲观锁\n\n说明：乐观锁和悲观锁是两种思想，用于解决并发场景下的数据竞争问题\n\n * 乐观锁：乐观锁在操作数据时非常乐观，认为别人不会同时修改数据。因此乐观锁不会上锁，只是在执行更新的时候判断一下在此期间别人是否修改了数据：如果别人修改了数据则放弃操作，否则执行操作。\n   \n   * 实现：版本号机制、cas\n   \n   * **cas:**如果内存位置v的值等于预期的a值，则将该位置更新为新值b，否则不进行任何操作。\n   \n   * 版本号:\n     \n     1. 当某个线程查询数据时，将该数据的版本号一起查出来；\n     \n     2. 当该线程更新数据时，判断当前版本号与之前读取的版本号是否一致，如果一致才进行操作。\n\n * 悲观锁：悲观锁在操作数据时比较悲观，认为别人会同时修改数据。因此操作数据时直接把数据锁住，直到操作完成后才会释放锁；上锁期间其他人不能修改数据。\n   \n   * 实现：加锁\n\n优缺点和适用场景:\n\n * 功能限制 与悲观锁相比，乐观锁适用的场景受到了更多的限制，无论是cas还是版本号机制。\n\n例如，cas只能保证单个变量操作的原子性，当涉及到多个变量时，cas是无能为力的，而synchronized则可以通过对整个代码块加锁来处理。\n\n再比如版本号机制，如果query的时候是针对表1，而update的时候是针对表2，也很难通过简单的版本号来实现乐观锁。\n\n * 竞争激烈程度 如果悲观锁和乐观锁都可以使用，那么选择就要考虑竞争的激烈程度：\n\n当竞争不激烈 (出现并发冲突的概率小)时，乐观锁更有优势，因为悲观锁会锁住代码块或数据，其他线程无法同时访问，影响并发，而且加锁和释放锁都需要消耗额外的资源。\n\n当竞争激烈(出现并发冲突的概率大)时，悲观锁更有优势，因为乐观锁在执行更新时频繁失败，需要不断重试，浪费cpu资源。\n\n\n# watch监控\n\nwatch指令，类似乐观锁，如果key的值已经被修改了，那么整个事务队列都不会被执行,同时返回一个nullmulti-bulk应答以通知调用者事务执行失败。\n\n注意：一旦执行了exec或者discard，之前加的所有监控锁都会被取消掉了。\n\n例子：\n\n * 初始化信用卡的可用余额和欠额\n   \n   \n\n * 无加塞篡改\n   \n   \n\n * 有加塞篡改，当watch的key被修改，后面的那个事务全部执行失败\n   \n   \n\n * unwatch\n   \n   \n\n\n# 3阶段\n\n开启:以multi开启事务\n\n入队:将多个命令入队到事务中,接到这些命令不会立刻执行,而是放到等待执行的事务队列里面\n\n执行：有exec命令触发事务\n\ngraph lr \nkai((开启))==>ru((入队))\nru==>zhi((执行))\n\n\n\n# 3特性\n\n单独的隔离操作：事务中的所有命令都会序列化，按顺序的执行。事务在等待执行的时候，不会被其他客户端发送来的米命令请求打断\n\n没有隔离级别的概念：队列中的所有命令没有提交exec之前都是不会被执行的\n\n不保证原子性：redis中如果一条命令执行失败，其后的命令仍然会被执行，没有回滚，参考冤头债主\n\n\n# redis的发布订阅(一般不用)\n\n发布订阅\n\nredis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。\n\nredis 客户端可以订阅任意数量的频道。\n\n下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：\n\n\n当有新消息通过 publish 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：\n\n\n\n      命令\n\n>  * subscribe channel [channel…]：订阅一个或多个频道的信息\n>  * psubscribe pattern [pattern…]：订阅一个或多个符合规定模式的频道\n>  * publish channel message ：将信息发送到指定频道\n>  * unsubscribe [channel[channel…]]：退订频道\n>  * punsubscribe [pattern[pattern…]]：退订所有给定模式的频道\n\n\n      应用场景\n\n> 构建实时的消息系统，比如普通聊天、群聊等功能。 1、博客网站订阅，当作者发布就可以推送给粉丝 2、微信公众号模式\n\n\n\n\n# redis的复制（master/slave）\n\n\n# 是什么？\n\n就是我们常说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slave以读为主\n\n\n# 能干嘛？\n\n读写分离\n\n容灾恢复\n\n\n# 怎么玩？\n\n配从(库)不配主(库)\n\n从库配置\n\n#配置从库\nslaveof 主库ip 主库端口\n#查看主从信息\ninfo replication\n\n\n每次与master断开后，都需要重新连接，除非你配置进redis.conf文件\n\n\n# 常用的主从方式\n\n# 一主二仆\n\n含义：就是一个master两个slave\n\n\n\n通过info replication查看主从信息\n\n# replication\nrole:master\nconnected_slaves:0\nmaster_replid:f6baff9abfda12ca58048cfce4b0e2c1f4683da1\nmaster_replid2:e8fe596d47d9d1d923d56d884b28128b78d2c1e0\nmaster_repl_offset:0\nsecond_repl_offset:1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n\n# replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6379\nmaster_link_status:down\nmaster_last_io_seconds_ago:-1\nmaster_sync_in_progress:0\nslave_repl_offset:0\nmaster_link_down_since_seconds:1585217521\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_replid:adbec19afa734e84a333b07ea2f33c43c73fe743\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n\n注意:\n\n 1. 第一次slave1 和slave2切入点，是全量复制，之后是增量复制\n    \n    \n\n 2. 主机可以写，但是从机不可以写，从机只能读\n    \n    \n\n 3. 主机shutdowm后从机待机状态，等主机回来后，主机新增记录从机可以顺利复制\n\n 4. 从机shutdowm后，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件\n\n 5. 从机复制到的数据，会被本机持久化。就算shutdown断开连接依然会有数据。\n\n 6. 重新连接或者变更master，会清除之前的数据，重新建立拷贝最新的数据\n\n# 薪火相传\n\n含义:就是上一个slave可以是下一个slave的master，slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力。\n\n\n\n注意事项和一主二仆差不多,但注意虽然有slave是相对master，但是依然是slave [查看](#zhu yi)\n\n# 反客为主\n\nslaveof no one\n\n\n使当前数据库停止与其他数据库的同步，转成主数据库\n\n# 哨兵模式（sentinel）\n\n反客为主的自动版，能够后台监控master库是否故障，如果故障了根据投票数自动将slave库转换为主库。一组sentinel能\n\n同时监控多个master。\n\n使用步骤：\n\n 1. 在master对应redis.conf同目录下新建sentinel.conf文件，名字绝对不能错；\n\n 2. 配置哨兵，在sentinel.conf文件中填入内容(可以配置多个)：\n    \n    #说明：最后一个数字1，表示主机挂掉后slave投票看让谁接替成为主机，得票数多少后成为主机。\n    sentinel monitor 被监控数据库名字（自己起名字） ip port 1\n    \n\n 3. 启动哨兵模式(路径按照自己的需求进行配置)：\n    \n    redis-sentinel  /myredis/sentinel.conf\n    \n\n注意：\n\n 1. 当master挂掉后，会通过选票进行选出下一个master。而且只有使用了sentinel.conf启动的才能开启选票\n\n 2. 当原来的master后来后，很不幸变成了slave。\n\n\n# 复制原理\n\n 1. slave启动成功连接到master后会发送一个sync命令；\n\n 2. master接到命令启动后的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master\n    \n    将传送整个数据文件到slave，以完成一次完全同步；\n\n 3. 全量复制：而slave服务在数据库文件数据后，将其存盘并加载到内存中；\n\n 4. 增量复制：master继续将新的所有收集到的修改命令依次传给slave，完成同步；\n\n 5. 但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。\n\n[结合这几个注意事项](#zhu yi)\n\n\n# 复制的缺点\n\n延时，由于所有的写操作都是在master上操作，然后同步更新到slave上，所以从master同步到slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave机器数量的增加也会使得这个问题更加严重。\n\n\n# 命令\n\n命令                                                  作用\nslaveof 主库ip 主库端口                                   配置从库\ninfo replication                                    查看redis主从复制的情况\nslaveof no one                                      使当前数据库停止与其他数据库的同步，转成主数据库\nsentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1   配置哨兵，监视master\nredis-sentinel /myredis/sentinel.conf               以哨兵模式启动redis\n\n\n# redis集群\n\n容量不够，redis如何扩容？\n\n并发写操作，redis如何分摊？\n\n\n# 什么是redis集群？\n\nredis集群实现了对redis的水平扩容，即启动n个redis节点，将整个数据库分布存储在这n个节点中，每个节点存储总数据的1/n\n\nredis集群通过分区（partition）来提供一定程度的可用性（availability）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。\n\n\n# 集群搭建\n\n搭建看这篇文章,有效\n\ngraph lr\nyi((导入安装包))--\x3eer((修改配置文件))\ner((修改配置文件))--\x3esan((创建基本镜像))\nsan--\x3esi((创建节点镜像))\nsi--\x3e|启动6个容器|wu((进入一个redis-cli))\nwu--\x3e|cluster meet|liu((集群添加节点))\nliu--\x3eqi((配置槽点))\nqi--\x3eba((配置主从高可用))\n\n\n\n# 集群命令\n\ncluster info 打印集群的信息 \ncluster nodes 列出集群当前已知的所有节点（node），以及这些节点的相关信息。  \n\n//节点(node) \ncluster meet <ip> <port> 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。 \ncluster forget <node_id> 从集群中移除 node_id 指定的节点。 \ncluster replicate <node_id> 将当前节点设置为 node_id 指定的节点的从节点。 \ncluster saveconfig 将节点的配置文件保存到硬盘里面。  \n\n//槽(slot) \ncluster addslots <slot> [slot ...] 将一个或多个槽（slot）指派（assign）给当前节点。 \ncluster delslots <slot> [slot ...] 移除一个或多个槽对当前节点的指派。 \ncluster flushslots 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。 \ncluster setslot <slot> node <node_id> 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽>，然后再进行指派。 \ncluster setslot <slot> migrating <node_id> 将本节点的槽 slot 迁移到 node_id 指定的节点中。 \ncluster setslot <slot> importing <node_id> 从 node_id 指定的节点中导入槽 slot 到本节点。 \ncluster setslot <slot> stable 取消对槽 slot 的导入（import）或者迁移（migrate）。  \n\n//键 (key) \ncluster keyslot <key> 计算键 key 应该被放置在哪个槽上。 \ncluster countkeysinslot <slot> 返回槽 slot 目前包含的键值对数量。 \ncluster getkeysinslot <slot> <count> 返回 count 个 slot 槽中的键。\n\n\n\n# 节点\n\n 1. 一个集群至少要有三个主节点，即要有六个节点。\n\n 2. 分配原则尽量保证每个主数据库运行在不同的ip地址，每个从库和主库不在一个ip地址。\n\n 3. 当主节点崩了，从节点能自动升为主节点；当主节点再次恢复时，主节点变为slave。参考哨兵模式。\n\n 4. redis.conf有个参数cluster-require-full-coverage\n    \n    #默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。\n    # cluster-require-full-coverage yes\n    \n\n\n# slots\n\n * 一个redis 集群包含16384个插槽(hash slot)， 数据库中的每个键都属于这16384个插槽的其中一个，集群使用公式crc1 6(key)% 16384来计算键key属于哪个槽(如果有组的话就只算组的部分)，其中crc16(key)语句用于计算键key的crc16校验和。\n\n * 集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点。其中:\n   \n   * 节点a负责处理0号至5500号插槽\n   * 节点b负责处理5501号至11000号插槽\n   * 节点c负责处理11001号至16383号插槽\n\n             (注意：每个节点分配的插槽具体数字可能不同，当然可以通过一个小脚本来指定)\n\n一个疑问：为什么是16384(2^14)，而不是65535(2^16)呢？\n\n在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用char进行bitmap压缩后是2kb（16384÷8÷1024=2kb），也就是说使用2k的空间创建了16k的槽数65535=65k，压缩后就是8kb（65536÷8÷1024=8kb），也就是说需要需要8k的心跳包。\n\n\n# redis cluster原理\n\n 1. node1和node2首先进行握手meet，知道彼此的存在\n 2. 握手成功后，两个节点会定期发送ping/pong消息，交换数据信息(消息头，消息体)\n 3. 消息头里面有个字段：unsigned char myslots[cluster_slots/8]，每一位代表一个槽，如果该位是1，代表该槽属于这个节点\n 4. 消息体中会携带一定数量的其他节点的信息，大约占集群节点总数量的十分之一，至少是3个节点的信息。节点数量越多，消息体内容越大。\n 5. 每秒都在发送ping消息。每秒随机选取5个节点，找出最久没有通信的节点发送ping消息。\n 6. 每100毫秒都会扫描本地节点列表，如果发现节点最近一次接受pong消息的时间大于cluster-node-timeout/2,则立即发送ping消息\n\nredis集群的主节点数量基本不可能超过1000个，超过的话可能会导致网络拥堵。\n\n\n# 在集群中录入值(组的概念)\n\nredis-cli客户端提供-c参数实现自动重定向\n\nredis-cli -c -p 6379\n\n\n不在一个slot下的键值，是不能使用mget，mset等多键操作\n\n可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。\n\nset user:{info}:name xxx\nset age{info} 12\nset {info}email 12345@qq.com\nhset user{info} name jiang\nhset user{info} age 19\nhset user{info} eamil 12345@qq.com\n\n#结果\n172.17.0.3:6379> keys *\n1) "user{info}"\n2) "{info}email"\n3) "user:{info}:name"\n4) "age{info}"\n------------------------------------------------------\n172.17.0.3:6379> hkeys user{info}\n1) "name"\n2) "age"\n3) "eamil"\n',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"sql",frontmatter:{title:"sql",date:"2021-11-05T03:34:00.000Z",categories:["数据库"],tags:["sql"],permalink:"/pages/43d728/"},regularPath:"/04.%E6%95%B0%E6%8D%AE%E5%BA%93/01.%E6%95%B0%E6%8D%AE%E5%BA%93/02.SQL.html",relativePath:"04.数据库/01.数据库/02.SQL.md",key:"v-1f06c1e1",path:"/pages/43d728/",headers:[{level:2,title:"一、增删改查",slug:"一、增删改查",normalizedTitle:"一、增删改查",charIndex:2},{level:3,title:"1、数据库的四种操作",slug:"_1、数据库的四种操作",normalizedTitle:"1、数据库的四种操作",charIndex:13},{level:3,title:"2、查询SQL的结构是",slug:"_2、查询sql的结构是",normalizedTitle:"2、查询sql的结构是",charIndex:88},{level:3,title:"3、写SQL的顺序",slug:"_3、写sql的顺序",normalizedTitle:"3、写sql的顺序",charIndex:176},{level:3,title:"4、FROM的作用",slug:"_4、from的作用",normalizedTitle:"4、from的作用",charIndex:257},{level:3,title:"5、WHERE的作用",slug:"_5、where的作用",normalizedTitle:"5、where的作用",charIndex:307},{level:3,title:"6、GROUP BY的作用",slug:"_6、group-by的作用",normalizedTitle:"6、group by的作用",charIndex:364},{level:3,title:"7、创建数据库(schema)",slug:"_7、创建数据库-schema",normalizedTitle:"7、创建数据库(schema)",charIndex:558},{level:3,title:"8、创建表",slug:"_8、创建表",normalizedTitle:"8、创建表",charIndex:607},{level:3,title:"9、插入数据",slug:"_9、插入数据",normalizedTitle:"9、插入数据",charIndex:709},{level:2,title:"二、JOIN",slug:"二、join",normalizedTitle:"二、join",charIndex:1084},{level:3,title:"1、JOIN 表 ON 过滤条件",slug:"_1、join-表-on-过滤条件",normalizedTitle:"1、join 表 on 过滤条件",charIndex:1095},{level:3,title:"2、LEFT JOIN 表 ON 过滤条件",slug:"_2、left-join-表-on-过滤条件",normalizedTitle:"2、left join 表 on 过滤条件",charIndex:1144},{level:2,title:"三、子查询",slug:"三、子查询",normalizedTitle:"三、子查询",charIndex:1258},{level:3,title:"1、WHERE里面的子查询",slug:"_1、where里面的子查询",normalizedTitle:"1、where里面的子查询",charIndex:1268},{level:3,title:"2、SELECT里面的子查询",slug:"_2、select里面的子查询",normalizedTitle:"2、select里面的子查询",charIndex:1367},{level:3,title:"3、FROM里面的子查询",slug:"_3、from里面的子查询",normalizedTitle:"3、from里面的子查询",charIndex:1452},{level:2,title:"四、半连接",slug:"四、半连接",normalizedTitle:"四、半连接",charIndex:1589},{level:2,title:"五、索引",slug:"五、索引",normalizedTitle:"五、索引",charIndex:1714},{level:2,title:"六、数据库三范式和反模式",slug:"六、数据库三范式和反模式",normalizedTitle:"六、数据库三范式和反模式",charIndex:1991},{level:2,title:"七、事务",slug:"七、事务",normalizedTitle:"七、事务",charIndex:2262}],headersStr:"一、增删改查 1、数据库的四种操作 2、查询SQL的结构是 3、写SQL的顺序 4、FROM的作用 5、WHERE的作用 6、GROUP BY的作用 7、创建数据库(schema) 8、创建表 9、插入数据 二、JOIN 1、JOIN 表 ON 过滤条件 2、LEFT JOIN 表 ON 过滤条件 三、子查询 1、WHERE里面的子查询 2、SELECT里面的子查询 3、FROM里面的子查询 四、半连接 五、索引 六、数据库三范式和反模式 七、事务",content:"# 一、增删改查\n\n\n# 1、数据库的四种操作\n\n 1. insert 增\n 2. delete 删\n 3. update 改\n 4. select 查 不改变数据库\n\n\n# 2、查询SQL的结构是\n\nSELECT... FROM... WHERE... GROUP BY... HAVING.... ORDER BY... LIMIT...\n\n\n# 3、写SQL的顺序\n\n**FROM--\x3eWHERE--\x3eGROUP BY--\x3eSELECT--\x3eHAVIGN--\x3eORDER BY--\x3eLIMIT**\n\n\n\n# 4、FROM的作用\n\nFROM stu 将stu表的所有数据都获取过来\n\nJOIN 以后说\n\n\n# 5、WHERE的作用\n\n对FROM 中获取的所有数据进行过滤 AND、OR、!= 符合的留下不符合的丢弃\n\n\n# 6、GROUP BY的作用\n\nGROUP BY classId 按照classId进行分组\n\n分组后如果遇到SELECT那么输出的则是分组后每组的第一行数据\n\nGROUP BY还可以和聚集函数在一起\n\n聚集函数：\n\nCOUNT(),SUM(),MAX(),MIN(),AVG(),GROUP_CONCAT()\n\ndistinct代表不重复可以放在聚集函数里去重，否则函数不会去重\n\n\n# 7、创建数据库(schema)\n\n\n\nCREATE DATABASE Student;\n\n\n\n# 8、创建表\n\n\n\nCREATE TABLE stu(id int PRIMARY KEY,name char(10),class_id int) DEFAULT charset=utf8mb4\n\n\n\n# 9、插入数据\n\n\n\nINSERT into stu(id,name,class_id) VALUES(1,'张三',20),(2,'李四',20),(3,'王五',20),\n(4,'小明',6),(5,'小红',6),(6,'小华',6),(7,'千钧',2),(8,'一发',2),(9,'淡季',2),(10,'小明',20)\n\n\nSELECT * FROM stu WHERE class_id=20\nSELECT * FROM stu GROUP BY class_id DESC\nSELECT count(DISTINCT name),class_id FROM stu GROUP BY class_id DESC\nSELECT sum(id),class_id FROM stu GROUP BY class_id DESC\n\n\n\n# 二、JOIN\n\n\n# 1、JOIN 表 ON 过滤条件\n\n左表的每行数据都与右表每行数据按过滤条件匹配生成新表\n\n\n# 2、LEFT JOIN 表 ON 过滤条件\n\n区别: ①LEFT JOIN 必须有ON\n\n②会检查左边表的数据是否都包含在新生成的表中如果包含那么与JOIN没区别\n\n如果不包含那么会与NUL组成新的一行加入到新表中\n\n\n\n\n# 三、子查询\n\n\n# 1、WHERE里面的子查询\n\nSELECT id FROM stu WHERE classId = (SELECT id FROM class WHERE teacher = '小红')\n\n\n\n# 2、SELECT里面的子查询\n\nSELECT id,(SELECT id FROM class WHERE teacher = '小红') FROM stu \n\n\n\n# 3、FROM里面的子查询\n\nSELECT stu.name FROM stu JOIN (SELECT * FROM class WHERE teacher='小红') AS c \nON stu.classId = c.id\n\n\n注：FROM里面的子查询必须起别名\n\n\n# 四、半连接\n\nSELECT * FROM stu s1 WHERE s1.id = (SELECT MAX(id) FROM stu s2 \nWHERE s2.classId = s1.classId)\n\n\n注：子查询用到了父查询里面的字段\n\n\n# 五、索引\n\n能被用到的才能作为索引\n\n-- EXPLAIN 可以查看是否使用索引\nEXPLAIN SELECT * FROM stu\\G\n\n\nMYSQL中主键是聚簇索引，其他的是非聚簇索引。聚簇索引下存的是数据，非聚簇下存的是主键。\n\n每用一次非聚簇索引就会走一次聚簇索引。（如果没有主键则会默认创建一个看不见的主键）\n\n全覆盖索引：SQL语句中用到的列全部包含于索引中，那么该索引就是这个SQL语句的全覆盖索引\n\n这种情况下不会在走一遍聚簇索引\n\n例：\n\nSELECT classId FROM stu WHERE classId = 1;\n\n\n\n# 六、数据库三范式和反模式\n\n第一范式：强调属性的原子性约束，要求属性具有原子性不可再分解\n\n第二范式：强调记录的唯一性约束，要求必须有一个主键，并且没有包含在主键中的列必须完全依赖于主键，而不 能只依赖主键的一部分\n\n第三范式：强调属性的冗余性约束，非主键列必须直接依赖于主键。\n\n范式可以避免数据冗余，监视我数据库的空间，减轻维护数据库完整性的麻烦，然而通过数据库范式化的设计会导致数据库业务涉及的表变多，并可能需要进行连表查询，这样会导致数据库性能下降，且不利于分库分表。\n\n反模式：即空间换取时间，采用冗余数据避免表的关联查询\n\n\n# 七、事务\n\n设置事务级别\n\nSET SESSION TRANSACTION ISOLATION LEVEL READ UMCOMMITTED;\n",normalizedContent:"# 一、增删改查\n\n\n# 1、数据库的四种操作\n\n 1. insert 增\n 2. delete 删\n 3. update 改\n 4. select 查 不改变数据库\n\n\n# 2、查询sql的结构是\n\nselect... from... where... group by... having.... order by... limit...\n\n\n# 3、写sql的顺序\n\n**from--\x3ewhere--\x3egroup by--\x3eselect--\x3ehavign--\x3eorder by--\x3elimit**\n\n\n\n# 4、from的作用\n\nfrom stu 将stu表的所有数据都获取过来\n\njoin 以后说\n\n\n# 5、where的作用\n\n对from 中获取的所有数据进行过滤 and、or、!= 符合的留下不符合的丢弃\n\n\n# 6、group by的作用\n\ngroup by classid 按照classid进行分组\n\n分组后如果遇到select那么输出的则是分组后每组的第一行数据\n\ngroup by还可以和聚集函数在一起\n\n聚集函数：\n\ncount(),sum(),max(),min(),avg(),group_concat()\n\ndistinct代表不重复可以放在聚集函数里去重，否则函数不会去重\n\n\n# 7、创建数据库(schema)\n\n\n\ncreate database student;\n\n\n\n# 8、创建表\n\n\n\ncreate table stu(id int primary key,name char(10),class_id int) default charset=utf8mb4\n\n\n\n# 9、插入数据\n\n\n\ninsert into stu(id,name,class_id) values(1,'张三',20),(2,'李四',20),(3,'王五',20),\n(4,'小明',6),(5,'小红',6),(6,'小华',6),(7,'千钧',2),(8,'一发',2),(9,'淡季',2),(10,'小明',20)\n\n\nselect * from stu where class_id=20\nselect * from stu group by class_id desc\nselect count(distinct name),class_id from stu group by class_id desc\nselect sum(id),class_id from stu group by class_id desc\n\n\n\n# 二、join\n\n\n# 1、join 表 on 过滤条件\n\n左表的每行数据都与右表每行数据按过滤条件匹配生成新表\n\n\n# 2、left join 表 on 过滤条件\n\n区别: ①left join 必须有on\n\n②会检查左边表的数据是否都包含在新生成的表中如果包含那么与join没区别\n\n如果不包含那么会与nul组成新的一行加入到新表中\n\n\n\n\n# 三、子查询\n\n\n# 1、where里面的子查询\n\nselect id from stu where classid = (select id from class where teacher = '小红')\n\n\n\n# 2、select里面的子查询\n\nselect id,(select id from class where teacher = '小红') from stu \n\n\n\n# 3、from里面的子查询\n\nselect stu.name from stu join (select * from class where teacher='小红') as c \non stu.classid = c.id\n\n\n注：from里面的子查询必须起别名\n\n\n# 四、半连接\n\nselect * from stu s1 where s1.id = (select max(id) from stu s2 \nwhere s2.classid = s1.classid)\n\n\n注：子查询用到了父查询里面的字段\n\n\n# 五、索引\n\n能被用到的才能作为索引\n\n-- explain 可以查看是否使用索引\nexplain select * from stu\\g\n\n\nmysql中主键是聚簇索引，其他的是非聚簇索引。聚簇索引下存的是数据，非聚簇下存的是主键。\n\n每用一次非聚簇索引就会走一次聚簇索引。（如果没有主键则会默认创建一个看不见的主键）\n\n全覆盖索引：sql语句中用到的列全部包含于索引中，那么该索引就是这个sql语句的全覆盖索引\n\n这种情况下不会在走一遍聚簇索引\n\n例：\n\nselect classid from stu where classid = 1;\n\n\n\n# 六、数据库三范式和反模式\n\n第一范式：强调属性的原子性约束，要求属性具有原子性不可再分解\n\n第二范式：强调记录的唯一性约束，要求必须有一个主键，并且没有包含在主键中的列必须完全依赖于主键，而不 能只依赖主键的一部分\n\n第三范式：强调属性的冗余性约束，非主键列必须直接依赖于主键。\n\n范式可以避免数据冗余，监视我数据库的空间，减轻维护数据库完整性的麻烦，然而通过数据库范式化的设计会导致数据库业务涉及的表变多，并可能需要进行连表查询，这样会导致数据库性能下降，且不利于分库分表。\n\n反模式：即空间换取时间，采用冗余数据避免表的关联查询\n\n\n# 七、事务\n\n设置事务级别\n\nset session transaction isolation level read umcommitted;\n",charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"软件工具说明",frontmatter:{title:"软件工具说明",date:"2021-11-05T04:00:00.000Z",categories:["tool"],tags:["tool"],permalink:"/pages/b70403/"},regularPath:"/05.%E5%B7%A5%E5%85%B7/01.%E5%B7%A5%E5%85%B7/01.tool.html",relativePath:"05.工具/01.工具/01.tool.md",key:"v-14ad3492",path:"/pages/b70403/",headers:[{level:2,title:"一、安装",slug:"一、安装",normalizedTitle:"一、安装",charIndex:2},{level:3,title:"安装virtualbox",slug:"安装virtualbox",normalizedTitle:"安装virtualbox",charIndex:11},{level:4,title:"1.安装vagrant",slug:"_1-安装vagrant",normalizedTitle:"1.安装vagrant",charIndex:27},{level:4,title:"2.安装Centos7",slug:"_2-安装centos7",normalizedTitle:"2.安装centos7",charIndex:42},{level:3,title:"安装VMware",slug:"安装vmware",normalizedTitle:"安装vmware",charIndex:2083},{level:3,title:"安装gradle",slug:"安装gradle",normalizedTitle:"安装gradle",charIndex:2588},{level:3,title:"安装VS Code",slug:"安装vs-code",normalizedTitle:"安装vs code",charIndex:6226},{level:3,title:"Typora图床",slug:"typora图床",normalizedTitle:"typora图床",charIndex:8684},{level:4,title:"1. 创建gitee仓库",slug:"_1-创建gitee仓库",normalizedTitle:"1. 创建gitee仓库",charIndex:8696},{level:4,title:"2.配置脚本",slug:"_2-配置脚本",normalizedTitle:"2.配置脚本",charIndex:8841},{level:4,title:"3.配置Typora",slug:"_3-配置typora",normalizedTitle:"3.配置typora",charIndex:16442},{level:3,title:"安装WSL2",slug:"安装wsl2",normalizedTitle:"安装wsl2",charIndex:16666},{level:4,title:"1.启动“适用于linux的windows子系统”和“虚拟机”两个功能",slug:"_1-启动-适用于linux的windows子系统-和-虚拟机-两个功能",normalizedTitle:"1.启动“适用于linux的windows子系统”和“虚拟机”两个功能",charIndex:16777},{level:4,title:"2.在bios中开启虚拟化,重启电脑",slug:"_2-在bios中开启虚拟化-重启电脑",normalizedTitle:"2.在bios中开启虚拟化,重启电脑",charIndex:17062},{level:4,title:"3.下载Linux内核更新包，并安装",slug:"_3-下载linux内核更新包-并安装",normalizedTitle:"3.下载linux内核更新包，并安装",charIndex:17084},{level:4,title:"4.将wsl2版本设置为默认版本",slug:"_4-将wsl2版本设置为默认版本",normalizedTitle:"4.将wsl2版本设置为默认版本",charIndex:17168},{level:4,title:"5.安装ubuntu",slug:"_5-安装ubuntu",normalizedTitle:"5.安装ubuntu",charIndex:17218},{level:4,title:"6.修改安装路径",slug:"_6-修改安装路径",normalizedTitle:"6.修改安装路径",charIndex:17508},{level:4,title:"7.安装DockerDeskTop",slug:"_7-安装dockerdesktop",normalizedTitle:"7.安装dockerdesktop",charIndex:17895},{level:4,title:"8.直接在ubantu安装docker",slug:"_8-直接在ubantu安装docker",normalizedTitle:"8.直接在ubantu安装docker",charIndex:18456},{level:2,title:"二、使用",slug:"二、使用",normalizedTitle:"二、使用",charIndex:19407},{level:3,title:"IDEA配置",slug:"idea配置",normalizedTitle:"idea配置",charIndex:19416},{level:4,title:"①代码注释",slug:"_1代码注释",normalizedTitle:"①代码注释",charIndex:19426},{level:4,title:"②插件安装",slug:"_2插件安装",normalizedTitle:"②插件安装",charIndex:20843},{level:3,title:"GIT",slug:"git",normalizedTitle:"git",charIndex:21151},{level:4,title:"①删除已提交文件",slug:"_1删除已提交文件",normalizedTitle:"①删除已提交文件",charIndex:21158},{level:4,title:"②拉取指定分支",slug:"_2拉取指定分支",normalizedTitle:"②拉取指定分支",charIndex:21497},{level:4,title:"③提交代码",slug:"_3提交代码",normalizedTitle:"③提交代码",charIndex:21733},{level:3,title:"Gradle与Maven",slug:"gradle与maven",normalizedTitle:"gradle与maven",charIndex:22081},{level:4,title:"gradle:",slug:"gradle",normalizedTitle:"gradle:",charIndex:22097},{level:5,title:"生成jar包",slug:"生成jar包",normalizedTitle:"生成jar包",charIndex:22721},{level:4,title:"maven:",slug:"maven",normalizedTitle:"maven:",charIndex:23744}],headersStr:"一、安装 安装virtualbox 1.安装vagrant 2.安装Centos7 安装VMware 安装gradle 安装VS Code Typora图床 1. 创建gitee仓库 2.配置脚本 3.配置Typora 安装WSL2 1.启动“适用于linux的windows子系统”和“虚拟机”两个功能 2.在bios中开启虚拟化,重启电脑 3.下载Linux内核更新包，并安装 4.将wsl2版本设置为默认版本 5.安装ubuntu 6.修改安装路径 7.安装DockerDeskTop 8.直接在ubantu安装docker 二、使用 IDEA配置 ①代码注释 ②插件安装 GIT ①删除已提交文件 ②拉取指定分支 ③提交代码 Gradle与Maven gradle: 生成jar包 maven:",content:'# 一、安装\n\n\n# 安装virtualbox\n\n# 1.安装vagrant\n\n# 2.安装Centos7\n\n# 生成 Vagrantfile\nvagrant init centos/7\n# 必须在指定文件地址启动\nvagrant up\n\n\n镜像下载缓慢采用下载好镜像后添加方式\n\n# 生成 Vagrantfile\nvagrant init centos/7\n# 添加镜像\nvagrant box add centos/7 文件地址\n# 必须在指定文件地址启动\nvagrant up\n\n\n开启SSH，并登陆到centos7\n\nvagrant ssh\n\n\n修改"Vagrantfile"文件，配置网络信息\n\nconfig.vm.network "private_network", ip: "192.168.56.10"\n\n\n重启虚拟机\n\nvagrant reload\n\n\n开启远程登陆，修改“/etc/ssh/sshd_config”\n\nPermitRootLogin yes \nPasswordAuthentication yes\n\n\n重启SSHD\n\nsystemctl restart sshd\n\n\n外网ping不通\n\nvi /etc/sysconfig/network-scripts/ifcfg-eth1\n# 在NETMASK下添加网关和DNS\nGATEWAY=192.168.56.1\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n# 重启网卡\nservice network restart\n\n\n建立集群环境\n\n# 设置统一ip\n\n\n\n\n# 创建文件夹存放虚拟机生成Vagrantfile\nvagrant init centos/7\n\n# 配置vagrant文件\nVagrant.configure("2") do |config|\n   (1..3).each do |i|\n        config.vm.define "k8s-node#{i}" do |node|\n            # 设置虚拟机的Box\n            node.vm.box = "centos/7"\n            # 设置虚拟机的主机名\n            node.vm.hostname="k8s-node#{i}"\n            # 设置虚拟机的IP\n            node.vm.network "private_network", ip: "192.168.56.#{99+i}", netmask: "255.255.255.0"\n            # 设置主机与虚拟机的共享目录\n            # node.vm.synced_folder "~/Documents/vagrant/share", "/home/vagrant/share"\n            # VirtaulBox相关配置\n            node.vm.provider "virtualbox" do |v|\n                # 设置虚拟机的名称\n                v.name = "k8s-node#{i}"\n                # 设置虚拟机的内存大小\n                v.memory = 4096\n                # 设置虚拟机的CPU个数\n                v.cpus = 4\n            end\n        end\n   end\nend\n\n# 添加镜像\nvagrant box add centos/7 xxx.box文件地址\n# 必须在指定文件地址启动\nvagrant up\n\n# 登录到虚拟机\nvagrant ssh 虚拟机名\n# 切换到root用户，密码vagrant\nsu root\n# 开启远程登录\nvi /etc/ssh/sshd_config\nPermitRootLogin 改为yes \nPasswordAuthentication 改为yes\n# 重启\nsystemctl restart sshd\n# 退出，重复上面步骤\nexit;\n\n\n在"网络地址转换"的连接方式下，三个节点的eth0，IP地址相同。\n\n# 查看k8s-node1的路由表\nip route show\n# 查看ip\nip addr\n\n\n**原因分析：**这是因为它们使用是端口转发规则，使用同一个地址，通过不同的端口来区分。但是这种端口转发规则在以后的使用中会产生很多不必要的问题，所以需要修改为NAT网络类型。\n\n解决方法：\n\n * 选择三个节点，然后执行“管理”->"全局设定"->“网络”，添加一个NAT网络。\n * 分别修改每台设备的网络类型，设置->网络->连接方式->NET网络\n\nvirtualbox虚拟机和主机不在同一网段互通\n\n详情点此链接\n\n\n# 安装VMware\n\nhttps://zhuanlan.zhihu.com/p/395220479\n\n注：网络类型选择NAT\n\n 1. 虚拟机IP设置：编辑->虚拟网络编辑器->更改设置->NAT模式->NAT设置\n\n 2. 服务器IP设置\n    \n    #1.修改配置文件\n    [root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n    # 静态ip，ip地址才不会变化\n    BOOTPROTO=static\n    NAME=ens33\n    # 系统启动是否激活网卡\n    ONBOOT=yes\n    IPADDR=192.168.56.10\n    GATEWAY=192.168.56.2\n    NETMASK=255.255.255.0\n    # DNS解析服务器，改成和网关一致\n    DNS1=192.168.56.2\n    DNS2=8.8.8.8\n    #2.重启网卡\n    [root@localhost ~]# service network restart\n    \n\n\n# 安装gradle\n\n(1)配置环境变量\n\n# 安装地址\nGRADLE_HOME\n# 仓库地址\nGRADLE_USER_HOME\npath添加%GRADLE_HOME%\\bin\n# 具体使用\nhttps://blog.csdn.net/Holmes_shuai/article/details/119665758\n\n\n（2）配置国内镜像\n\n# 在项目的根目录下找到如下文件：build.gradle在repositories里添加如下代码\nmaven {url \'http://maven.aliyun.com/nexus/content/groups/public/\'}\n# 在apply上面，添加如下代码：\nallprojects {\n\trepositories {\n\t\tmaven{ url \'http://maven.aliyun.com/nexus/content/groups/public/\'}\n\t\tmavenCentral()\n\t}\n}\n# 全局配置（操作系统的当前用户）C:\\Users\\${Users}\\.gradle\\init.gradle添加\nallprojects{\n    repositories {\n        def ALIYUN_REPOSITORY_URL = \'http://maven.aliyun.com/nexus/content/groups/public\'\n        def ALIYUN_JCENTER_URL = \'http://maven.aliyun.com/nexus/content/repositories/jcenter\'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith(\'https://repo1.maven.org/maven2\')) {\n                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL."\n                    remove repo\n                }\n                if (url.startsWith(\'https://jcenter.bintray.com/\')) {\n                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL."\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url ALIYUN_REPOSITORY_URL\n            url ALIYUN_JCENTER_URL\n        }\n    }\n}\n\nallprojects {\n    repositories {\n        maven { url \'file:///D:/workSpace/maven/depository/\'}\n        mavenLocal()\n        maven { name "Alibaba" ; url "https://maven.aliyun.com/repository/public" }\n        maven { name "Bstek" ; url "http://nexus.bsdn.org/content/groups/public/" }\n        mavenCentral()\n        jcenter()\n        \n    }\n    repositories {\n     \tmaven { url \'file:///D:/workSpace/maven/depository/\'}\n        mavenLocal()\n        maven { url \'https://maven.aliyun.com/repository/gradle-plugin\' }\n        maven { url \'https://maven.aliyun.com/repository/google\' }\n        maven { url \'https://maven.aliyun.com/nexus/content/groups/public/\' }\n        maven { url \'https://maven.aliyun.com/repository/jcenter\' }\n        mavenCentral()\n        jcenter()\n    }\n    buildscript {\n        repositories {\n            mavenLocal()\n            maven { name "Alibaba" ; url \'https://maven.aliyun.com/repository/public\' }\n            maven { name "Bstek" ; url \'http://nexus.bsdn.org/content/groups/public/\' }\n            mavenCentral()\n            maven { name "M2" ; url \'https://plugins.gradle.org/m2/\' }\n            jcenter()\n        }\n    }\n}\n\n#1.直接依赖第三方开源库，一般是托管在 jitpack 或者 jcenter\n\timplementation \'com.google.code.gson:gson:2.2.4\'\n#2.直接依赖本地的aar文件，一般是在libs目录下\n\timplementation(name: \'LiteAVSDK_Professional_5.1.5293\', ext: \'aar\')\n#3.直接依赖本地的jar文件\n\timplementation files(\'libs/bdasr_V3_20170801_60da871.jar\')\n#4.依赖本地的model\n\timplementation project(\':wavelibrary\')\n#5.去除重复依赖 project用括号包裹住\ncompile (project(\':uisdk:Library:facebook\')) {\n    exclude group: \'com.android.support\', module: \'appcompat-v7\'\n}\n# 全局移除\nconfigurations.all {\n    exclude group: \'android.arch.lifecycle\', module: \'runtime\'\n}\n# 作用域\ngradle依赖的粒度控制相较于Maven也更加精细，maven只有compile、provided、test、runtime四种scope，而gradle有以下几种scope：\nimplementation，默认的scope。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。\napi，和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。\ncompileOnly和runtimeOnly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeOnly和Maven的provided比较接近。\ntestImplementation，这种依赖在测试编译时和运行时可见，类似于Maven的test作用域。\ntestCompileOnly和testRuntimeOnly，这两种类似于compileOnly和runtimeOnly，但是作用于测试编译时和运行时。\n\n\n\n# 安装VS Code\n\n#插件安装\nAuto Close Tag\nAuto Rename Tag\nChinese (Simplified) Language Pack for Visual Studio Code\nESLint\nHTML CSS Support\nHTML Snippets\nJavaScript (ES6) code snippets\nLive Server\nopen in browser\nVetur\n\n#创建全局代码片段  文件 ➡ 首选项 ➡ 用户代码片段 ➡ 点击新建全局代码片段 ➡ 取名 vue ➡ 确定\n{\n    "Print to console": {\n        "prefix": "vue",\n        "body": [\n            "\x3c!-- $1 --\x3e",\n            "<template>",\n            "<div class=\'$2\'>$5</div>",\n            "</template>",\n            "",\n            "<script>",\n            "//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）",\n            "//例如：import 《组件名称》 from \'《组件路径》\';",\n            "",\n            "export default {",\n            "//import引入的组件需要注入到对象中才能使用",\n            "components: {},",\n            "data() {",\n            "//这里存放数据",\n            "return {",\n            "",\n            "};",\n            "},",\n            "//监听属性 类似于data概念",\n            "computed: {},",\n            "//监控data中的数据变化",\n            "watch: {},",\n            "//方法集合",\n            "methods: {",\n            "",\n            "},",\n            "//生命周期 - 创建完成（可以访问当前this实例）",\n            "created() {",\n            "",\n            "},",\n            "//生命周期 - 挂载完成（可以访问DOM元素）",\n            "mounted() {",\n            "",\n            "},",\n            "beforeCreate() {}, //生命周期 - 创建之前",\n            "beforeMount() {}, //生命周期 - 挂载之前",\n            "beforeUpdate() {}, //生命周期 - 更新之前",\n            "updated() {}, //生命周期 - 更新之后",\n            "beforeDestroy() {}, //生命周期 - 销毁之前",\n            "destroyed() {}, //生命周期 - 销毁完成",\n            "activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发",\n            "}",\n            "<\/script>",\n            "<style scoped>",\n            "/* @import url(); 引入公共css类 */",\n            "$4",\n            "</style>"\n        ],\n        "description": "生成vue模板"\n    },\n    "http-get请求": {\n\t"prefix": "httpget",\n\t"body": [\n\t\t"this.\\\\$http({",\n\t\t"url: this.\\\\$http.adornUrl(\'\'),",\n\t\t"method: \'get\',",\n\t\t"params: this.\\\\$http.adornParams({})",\n\t\t"}).then(({ data }) => {",\n\t\t"})"\n\t],\n\t"description": "httpGET请求"\n    },\n    "http-post请求": {\n\t"prefix": "httppost",\n\t"body": [\n\t\t"this.\\\\$http({",\n\t\t"url: this.\\\\$http.adornUrl(\'\'),",\n\t\t"method: \'post\',",\n\t\t"data: this.\\\\$http.adornData(data, false)",\n\t\t"}).then(({ data }) => { });" \n\t],\n\t"description": "httpPOST请求"\n    }\n}\n\n#node.js安装并配置npm镜像\nnpm config set registry https://registry.npm.taobao.org\n#安装webpack和vue脚手架\nnpm install webpack -g\nnpm install -g @vue/cli-init\n\n\n\n# Typora图床\n\n# 1. 创建gitee仓库\n\n登录账号之后，创建一个仓库用于放置图片。\n\n填写下图标注的三项内容，然后点击创建。\n\n * 仓库名称随便设置；\n * 是否开源：必须选择公开，否则无法通过链接引用图片；\n * 选中”使用Readme文件初始化这个仓库“，这样就不用操作git初始化仓库了。\n\n# 2.配置脚本\n\n含有两个文件\n\n * 一个是powershell脚本imp_upload.ps1\n   \n   using namespace System.Drawing\n   using namespace System.Drawing.Imaging\n   using namespace System.IO\n   \n   #$check_size = 500*1024\n   $check_size = 1024*1024\n   \n   $run_dir = (Split-Path -Parent $MyInvocation.MyCommand.Definition) + "\\"\n   $path_log = "$run_dir\\gitee_upload.log"\n   $path_config = "$run_dir\\config.json"\n   \n   function error($msg){\n       try{\n           "$([DateTime]::Now.ToString("yyyy-MM-dd HH:mm:ss")) Error: $msg" | Out-File -Append $path_log\n       } catch{\n           # "log error"\n       }\n   }\n   \n   function info($msg){\n   \n       "$([DateTime]::Now.ToString("yyyy-MM-dd HH:mm:ss")) Info: $msg" | Out-File -Append $path_log\n   \n   }\n   \n   function exit_script( $reason ){\n       Write-Error $reason -CategoryReason "custom error" -ErrorId "custom error"\n       error "---exit_script---: " + $reason\n       exit\n   }\n   \n   try{\n       $config = Get-Content $path_config | ConvertFrom-JSON\n   } catch{\n       exit_script "config error :" + $_.Exception.message\n   }\n   \n   $now = [DateTime]::Now\n   $str_month = $now.ToString("yyyyMM")\n   $str_dt = $now.ToString("yyyyMMdd_HHmmssfff")\n   \n   $url_file_new = "https://gitee.com/api/v5/repos/{owner}/{repo}/contents/{path}"\n   \n   $paths = $args\n   \n   function compress {\n       param (\n           [Stream] $inStream,\n           [Stream] $outStream,\n           $ratio\n       )\n       $img = [Image]::FromStream($inStream)\n       $res = [Bitmap]::new($img.width, $img.height, $img.pixelFormat)\n       \n       $gph = [Graphics]::FromImage($res)\n       # 设置画布的描绘质量   \n       $gph.CompositingQuality = [Drawing2D.CompositingQuality]::HighQuality\n       $gph.SmoothingMode = [Drawing2D.SmoothingMode]::HighQuality\n       $gph.InterpolationMode = [Drawing2D.InterpolationMode]::HighQualityBicubic\n       $gph.DrawImage($img, 0, 0, $res.width, $res.height)\n       $gph.Dispose()\n       \n       #以下代码为保存图片时，设置压缩质量  \n       $ep =  [EncoderParameters]::new(1)\n       [long[]] $qy = @( $ratio )     #设置压缩的比例1-100 \n       $ep.Param[0] = [EncoderParameter]::new([Encoder]::Quality, $qy);\n       \n       $arrayICI = [ImageCodecInfo]::GetImageEncoders()\n       $jpg_info = "null";\n       foreach ($ici in $arrayICI)\n       {\n           if ($ici.FormatDescription -eq "JPEG")\n           {\n               $jpg_info = $ici\n               break\n           }\n       }\n       if ($jpg_info -ne "null"){\n           $res.Save($outStream, $jpg_info , $ep);  \n       } else{\n           $res.Save($outStream, [ImageFormat]::Jpeg);\n       }\n       $res.Dispose()\n       $img.Dispose()\n   }\n   \n   function convertToJpg {\n       param (\n           [Stream] $inStream,\n           [Stream] $outStream\n       )\n       $img = [Image]::FromStream($inStream)\n       $res = [Bitmap]::new($img.width, $img.height, $img.pixelFormat)\n       \n       $gph = [Graphics]::FromImage($res)\n       # 设置画布的描绘质量   \n       $gph.CompositingQuality = [Drawing2D.CompositingQuality]::HighQuality\n       $gph.SmoothingMode = [Drawing2D.SmoothingMode]::HighQuality\n       $gph.InterpolationMode = [Drawing2D.InterpolationMode]::HighQualityBicubic\n       $gph.DrawImage($img, 0, 0, $res.width, $res.height)\n       $gph.Dispose()\n       \n       $res.Save($outStream, [ImageFormat]::Jpeg);\n       $outStream.Flush()\n       $res.Dispose()\n       $img.Dispose()\n   }\n   \n   \n   function upload {\n       param (\n           $b64 = "",\n           $gitee_path = "", \n           $message = ""\n       )\n       $url = $url_file_new\n       $url = $url.Replace("{owner}", $config.owner)\n       $url = $url.Replace("{repo}", $config.repo)\n       $url = $url.Replace("{path}", $gitee_path)\n   \n       $body = @{}\n       $body.Add("access_token", $config.access_token)\n       $body.Add("content", $b64)\n       $body.Add("message", $message)\n       $body.Add("branch", $config.branch)\n       $json = ConvertTo-Json $body\n   \n       try{\n           $response = Invoke-WebRequest -Uri $url -Body $json -Method POST -ContentType "application/json;charset=UTF-8"\n           $data = ConvertFrom-Json $response.Content\n           return $data.content.download_url\n       } catch{\n           error "upload failed"\n           if($_.ToString().Contains("(401)")){    #(401) 未经授权\n               Write-Error "access_token error"\n           }else {\n               Write-Error -Exception $_.Exception\n           }\n       }\n       \n   }\n   \n   function handleNetImage {\n       param (\n           $path = "",\n           $idx = 0\n       )\n       $resp = Invoke-WebRequest $path\n       if($resp.Content.GetType().Name -eq "Byte[]"){\n           if($path.Contains("?")){\n               $path = $path.Substring(0, $path.IndexOf("?") )\n           }\n           $img_name = $path.Substring( $path.LastIndexOf("/")+1 )\n           $img_ext = $img_name.Substring( $img_name.LastIndexOf(".") )\n           $len = $resp.Content.Length\n           if($len -gt $check_size){\n               # if($len -gt $check_size*10){\n               #     $ratio = 60\n               # } else{\n               #     $ratio = 80\n               # }\n               $inStream = [MemoryStream]::new($resp.Content, $False)\n               $outSteam = [MemoryStream]::new()\n               # compress $inStream $outSteam $ratio\n               # 使用[ImageFormat]::Jpeg保存图像，可以减小文件大小，压缩率和图像质量比compress函数好\n               convertToJpg $inStream $outSteam\n               $img_ext = ".jpg"\n               $b64 = [Convert]::ToBase64String( $outSteam.ToArray() )\n               $inStream.Dispose()\n               $outSteam.Dispose()\n           } else{\n               $b64 = [Convert]::ToBase64String( $resp.Content )\n           }\n           $gitee_path = "$str_month/$($str_dt)_$idx$img_ext"\n           return upload $b64 $gitee_path $img_name\n   \n       } else{\n           Write-Error "failed to load image from $url"\n       }\n       \n   }\n   \n   function handleLocalImage {\n       param (\n           $path = "",\n           $idx = 0\n       )\n       $info = [FileInfo]::new( $path )\n       if(! $info.Exists){\n           return "image path error"\n       }\n       $img_name = $info.Name\n       $img_ext = $info.Extension\n       if($info.Length -gt $check_size){\n           # if($info.Length -gt $check_size*10){\n           #     $ratio = 60\n           # } else{\n           #     $ratio = 80\n           # }\n           $inStream = [FileStream]::new($info.FullName, [FileMode]::Open)\n           $outSteam = [MemoryStream]::new()\n           # compress $inStream $outSteam $ratio\n           # 使用[ImageFormat]::Jpeg保存图像，可以减小文件大小，压缩率和图像质量比compress函数好\n           convertToJpg $inStream $outSteam\n           $img_ext = ".jpg"\n           $b64 = [Convert]::ToBase64String( $outSteam.ToArray() )\n           $inStream.Dispose()\n           $outSteam.Dispose()\n       } else{\n           $b64 = [Convert]::ToBase64String( [System.IO.File]::ReadAllBytes($info.FullName) )\n       }\n       $gitee_path = "$str_month/$($str_dt)_$idx$img_ext"\n       return upload $b64 $gitee_path $img_name\n   }\n   \n   function handle {\n       param (\n           $path = "",\n           $idx = 0\n       )\n       $downUrl = ""\n       if($path.StartsWith("http://") -or $path.StartsWith("https://")){\n           $downUrl = handleNetImage $path $idx\n       } else{\n           $downUrl = handleLocalImage $path $idx\n       }\n       return $downUrl\n   }\n   \n   for($i=0; $i -lt $paths.Count; $i++){\n       handle $paths[$i] $i\n   }\n   \n   \n   trap{\n       error $_.Exception.message\n   }\n   \n\n * 一个是配置文件config.json\n   \n   {\n       "owner":  "个人空间地址",\n       "repo":  "仓库名",\n       "branch":  "master",\n       "access_token":  "私人令牌"\n   }\n   \n\n# 3.配置Typora\n\n打开Typroa， 顶部菜单点击 文件 - 偏好设置 - 图像。按下图设置（旧版Typora可能不支持以下设置）。\n\n命令填入： PowerShell -ExecutionPolicy Bypass -File "img_upload.ps1脚本路径"\n\n例： PowerShell -ExecutionPolicy Bypass -File "D:\\0tmp\\img_upload\\img_upload.ps1"\n\n\n# 安装WSL2\n\nhttps://www.jianshu.com/p/6f3195bad5f1\n\n注: 需要Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11\n\n# 1.启动“适用于linux的windows子系统”和“虚拟机”两个功能\n\n# 1.打开powershell，win+x,a\n# 2.启用适用于Linux的Windwos子系统\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n# 3.启用虚拟机功能\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n\n# 2.在bios中开启虚拟化,重启电脑\n\n# 3.下载Linux内核更新包，并安装\n\nhttps://learn.microsoft.com/zh-cn/windows/wsl/install-manual\n\n# 4.将wsl2版本设置为默认版本\n\nwsl --set-default-version 2\n\n\n# 5.安装ubuntu\n\n微软商店安装\n\n注：启动提示，参考的对象类型不支持尝试的操作”的故障导致无法使用，添加以下注册表\n\nWindows Registry Editor Version 5.00\n \n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters\\AppId_Catalog\\0408F7A3]\n"AppFullPath"="C:\\\\Windows\\\\System32\\\\wsl.exe"\n"PermittedLspCategories"=dword:80000000\n\n\n# 6.修改安装路径\n\n# 查看运行状态\nwsl -l -v\n# 关闭\nwsl --shutdown\n# 导出当前Linux的镜像 Ubuntu为wsl -l -v中的系统名字\nwsl --export Ubuntu D:\\workSpace\\Ubuntu2204\\ubuntu22.04.tar \n# 注销之前的系统并检查\nwsl --unregister Ubuntu\n# 导入镜像\nwsl --import ubuntu2204 D:\\workSpace\\Ubuntu2204\\ D:\\workSpace\\Ubuntu2204\\ubuntu20.04.tar --version 2\n# 配置先前设置的默认登录用户 ubuntu2204为导入镜像时起的名字，xxx为之前设置的用户\nubuntu2204.exe config --default-user xxx\n\n\n# 7.安装DockerDeskTop\n\n官网：https://www.docker.com/\n\n迁移：https://cloud.tencent.com/developer/article/1679501\n\n# 修改安装位置\nmklink /j "C:\\Program Files\\Docker" "D:\\javaTools\\docker"\n# 修改相关文件安装目录\nmklink /j "C:\\Users\\你的用户名\\AppData\\Local\\Docker" "D:\\workSpace\\Docker\\Local"\n \nmklink /j "C:\\Users\\dlam3\\AppData\\Roaming\\Docker" "D:\\workSpace\\Docker\\Roaming\\Docker"\n \nmklink /j "C:\\Users\\dlam3\\AppData\\Roaming\\Docker Desktop" "D:\\workSpace\\Docker\\Roaming\\Docker Desktop"\n# 安装\nComplete the installation of Docker Desktop--\x3eUse advanced settings--\x3eManually update WSL 2 myself\n\n\n# 8.直接在ubantu安装docker\n\n# 安装前先卸载操作系统默认安装的docker，\nsudo apt-get remove docker docker-engine docker.io containerd runc\n# 更换apt源 清华：https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 阿里：https://developer.aliyun.com/mirror/ubuntu/?spm=a2c6h.25603864.0.0.2b5223b8KyFvMQ\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\nvim /etc/apt/source.list\nsudo apt-get update\nsudo apt-get upgrade\n# 安装必要支持\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\nsudo apt-get update\n# 运行如下命令，安装合适版本\napt-cache madison docker-ce\napt-cache madison docker-ce-cli\n# 安装\nsudo apt-get install docker-ce=5:20.10.24~3-0~ubuntu-jammy docker-ce-cli=5:20.10.24~3-0~ubuntu-jammy containerd.io\n# 开机自启\nsudo systemctl enable docker\n\n\n\n# 二、使用\n\n\n# IDEA配置\n\n# ①代码注释\n\n(1)File | Settings | Editor | File and Code Templates里的class修改为\n\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end\n#parse("File Header.java")\n\npublic class ${NAME} {\n}\n\n\n(2)includes中File Header修改为\n\n/**\n * @author     ：J-Ming\n * @date       ：Created in ${DATE} ${TIME}\n * @description：${description}\n **/\n\n\n(3)File | Settings | Editor | Live Templates建一个组\n\n**\n * @Description:\n * @author $user$\n * @date $date$ $param$\n * @return $return$ \n */\n     \n //param脚本:\n     groovyScript("if(\\"${_1}\\".length() == 2) {return \'\';} else {def result=\'\'; def params=\\"${_1}\\".replaceAll(\'[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\', \'\').split(\',\').toList();for(i = 0; i < params.size(); i++) {result+=\'\\\\n\' + \' * @param \' + params[i] + \' \'}; return result;}", methodParameters());\n\n// 方法注释\n模板：\n*\n * \n * @author J-Ming \n * @date $date$ $time$$param$ $return$\n */\n\nparam:\ngroovyScript("def result = \'\';def params = \\"${_1}\\".replaceAll(\'[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\', \'\').split(\',\').toList(); for(i = 0; i < params.size(); i++) {if(params[i] != \'\')result+=\'* @param \' + params[i] + ((i < params.size() - 1) ? \'\\\\r\\\\n \' : \'\')}; return result == \'\' ? null : \'\\\\r\\\\n \' + result", methodParameters())\n\nreturn:\ngroovyScript("return \\"${_1}\\" == \'void\' ? null : \'\\\\r\\\\n * @return \' + \\"${_1}\\"", methodReturnType()) \n\n\n(4)在idea里面格式化代码的时候，注释也会被格式化\n\nFile | Settings | Editor | Code Style | Java | javadoc \n\n将enable javadoc formating取消掉\n\n\n# ②插件安装\n\n（1）FindBugs-IDEA静态代码分析\n\n（2）Alibaba Java Coding Guidelines 代码规约\n\n（3）Coding Easier 翻译+字符串处理\n\n（4）Free Mybatis plugin\n\n禁用不必要插件\n\nhttps://fangweilong.github.io/2018/04/25/idea%E5%85%B3%E9%97%AD%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E6%8F%92%E4%BB%B6%E5%87%8F%E5%B0%91%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/\n\n\n# GIT\n\n# ①删除已提交文件\n\n首先进入你的master文件夹下, Git Bash Here ,打开命令窗口\n\n$ git --help                   # 帮助命令\n\n \n\n$ git pull origin master          # 将远程仓库里面的项目拉下来\n\n$ dir                        # 查看有哪些文件夹\n\n$ git rm -r --cached .idea       # 删除.idea文件夹\n$ git commit -m \'删除.idea\'    # 提交,添加操作说明\n$ git push -u origin master               # 将本次更改更新到github项目上去\n\n\n# ②拉取指定分支\n\n1》与远程仓库建立连接：git remote add origin XXXXX.git\n\n2》使用git branch 查看本地是否具有dev分支\n\n3》如果没有 git fetch origin dev\n\n4》git checkout -b dev origin/dev在本地创建分支dev并切换到该分支\n\n5》git pull origin dev就可以把gitLab上dev分支上的内容都拉取到本地了\n\n# 或者\ngit -b name;\n\n\n# ③提交代码\n\n#拉取\ngit pull\n\n#1、新建一个分支\ngit branch newBranch\n\n#2、检查分支是否创建成功\ngit branch\n\n#3、切换到新建的分支\ngit checkout newBranch\n\n#4、将改动提交到新分支\ngit add .\ngit commit -m "the new branch"\n\n#5、检查是否提交新分支成功\ngit status\n\n#6、切回到主分支\ngit checkout master\n\n#7、新分支提交的改动合并到主分支\ngit merge newBranch\n\n#8、push代码到远端仓库\ngit push -u origin master\n\n#9、删除新分支\ngit branch -D newBranch\n\n\n\n\n# Gradle与Maven\n\n# gradle:\n\n# 高版本gradle使用Lombok需要添加以下配置\ndependencies {\n\timplementation \'org.projectlombok:lombok:1.18.4\'\n    annotationProcessor \'org.projectlombok:lombok:1.18.4\'\n    ## 打jar包时将sun公司jar包引入\n    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))\n}\n# 打包成一个Jar\njar {\n    manifest {\n        attributes(\n                \'Main-Class\': \'com.ming.ImageUpload\'\n        )\n    }\n    from {\n        ##configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }\n    \tconfigurations.runtime.collect{zipTree(it)}\n    }\n}\n# 设置编码\ntasks.withType(JavaCompile) {\n    options.encoding = "UTF-8"\n}\n\n\n# 生成jar包\n\n/**\n *\t1.打包成一个Jar\n *\t执行命令gradle build或者./gradlew build，可在build/libs查看生成的jar包\n **/\njar {\n    manifest {\n        attributes(\n                \'Main-Class\': \'com.ming.ImageUpload\'\n        )\n    }\n    from {\n        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }\n    \t//configurations.runtime.collect{zipTree(it)}\n    }\n}\n\n/**\n *  2.打包成多个Jar\n *\t执行命令gradle release或者./gradlew relesse，可在build/libs查看生成的jar包 打包成多个Jar\n **/\njar {\n    manifest {\n        attributes \'Main-Class\': appMainClass\n    }\n}\ntask clearJar(type: Delete) {\n    delete \'build/libs/lib\'\n}\ntask copyJar(type: Copy) {\n    from configurations.runtime\n    into(\'build/libs/lib\')\n}\ntask release(type: Copy, dependsOn: [build, clearJar, copyJar])\n\n/**\t3.使用application插件\n *\t执行命令gradle (run、startScript、installApp、distZip、distTar)之一\n *  查看build/distributions会有两个压缩文件,压缩文件\n *\t包含了两个文件夹，bin为启动脚本，lib则是软件jar包和依赖。\n *  还可以执行./gradlew installDist生成未压缩文件目录build/install\n **/\napply plugin: \'application\'\nmainClassName = \'appMainClass\'\n\n\n# maven:\n\n# maven手动导入jar包\nmvn install:install-file -Dfile=D:\\workSpace\\bairui\\CQ\\ChongQingBank\\BairuiPlatform\\fileConvert\\lib\\aspose-cells-8.5.2.jar -DgroupId=com.aspose -DartifactId=aspose-cells -Dversion=8.5.2 -Dpackaging=jar\n',normalizedContent:'# 一、安装\n\n\n# 安装virtualbox\n\n# 1.安装vagrant\n\n# 2.安装centos7\n\n# 生成 vagrantfile\nvagrant init centos/7\n# 必须在指定文件地址启动\nvagrant up\n\n\n镜像下载缓慢采用下载好镜像后添加方式\n\n# 生成 vagrantfile\nvagrant init centos/7\n# 添加镜像\nvagrant box add centos/7 文件地址\n# 必须在指定文件地址启动\nvagrant up\n\n\n开启ssh，并登陆到centos7\n\nvagrant ssh\n\n\n修改"vagrantfile"文件，配置网络信息\n\nconfig.vm.network "private_network", ip: "192.168.56.10"\n\n\n重启虚拟机\n\nvagrant reload\n\n\n开启远程登陆，修改“/etc/ssh/sshd_config”\n\npermitrootlogin yes \npasswordauthentication yes\n\n\n重启sshd\n\nsystemctl restart sshd\n\n\n外网ping不通\n\nvi /etc/sysconfig/network-scripts/ifcfg-eth1\n# 在netmask下添加网关和dns\ngateway=192.168.56.1\ndns1=114.114.114.114\ndns2=8.8.8.8\n# 重启网卡\nservice network restart\n\n\n建立集群环境\n\n# 设置统一ip\n\n\n\n\n# 创建文件夹存放虚拟机生成vagrantfile\nvagrant init centos/7\n\n# 配置vagrant文件\nvagrant.configure("2") do |config|\n   (1..3).each do |i|\n        config.vm.define "k8s-node#{i}" do |node|\n            # 设置虚拟机的box\n            node.vm.box = "centos/7"\n            # 设置虚拟机的主机名\n            node.vm.hostname="k8s-node#{i}"\n            # 设置虚拟机的ip\n            node.vm.network "private_network", ip: "192.168.56.#{99+i}", netmask: "255.255.255.0"\n            # 设置主机与虚拟机的共享目录\n            # node.vm.synced_folder "~/documents/vagrant/share", "/home/vagrant/share"\n            # virtaulbox相关配置\n            node.vm.provider "virtualbox" do |v|\n                # 设置虚拟机的名称\n                v.name = "k8s-node#{i}"\n                # 设置虚拟机的内存大小\n                v.memory = 4096\n                # 设置虚拟机的cpu个数\n                v.cpus = 4\n            end\n        end\n   end\nend\n\n# 添加镜像\nvagrant box add centos/7 xxx.box文件地址\n# 必须在指定文件地址启动\nvagrant up\n\n# 登录到虚拟机\nvagrant ssh 虚拟机名\n# 切换到root用户，密码vagrant\nsu root\n# 开启远程登录\nvi /etc/ssh/sshd_config\npermitrootlogin 改为yes \npasswordauthentication 改为yes\n# 重启\nsystemctl restart sshd\n# 退出，重复上面步骤\nexit;\n\n\n在"网络地址转换"的连接方式下，三个节点的eth0，ip地址相同。\n\n# 查看k8s-node1的路由表\nip route show\n# 查看ip\nip addr\n\n\n**原因分析：**这是因为它们使用是端口转发规则，使用同一个地址，通过不同的端口来区分。但是这种端口转发规则在以后的使用中会产生很多不必要的问题，所以需要修改为nat网络类型。\n\n解决方法：\n\n * 选择三个节点，然后执行“管理”->"全局设定"->“网络”，添加一个nat网络。\n * 分别修改每台设备的网络类型，设置->网络->连接方式->net网络\n\nvirtualbox虚拟机和主机不在同一网段互通\n\n详情点此链接\n\n\n# 安装vmware\n\nhttps://zhuanlan.zhihu.com/p/395220479\n\n注：网络类型选择nat\n\n 1. 虚拟机ip设置：编辑->虚拟网络编辑器->更改设置->nat模式->nat设置\n\n 2. 服务器ip设置\n    \n    #1.修改配置文件\n    [root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n    # 静态ip，ip地址才不会变化\n    bootproto=static\n    name=ens33\n    # 系统启动是否激活网卡\n    onboot=yes\n    ipaddr=192.168.56.10\n    gateway=192.168.56.2\n    netmask=255.255.255.0\n    # dns解析服务器，改成和网关一致\n    dns1=192.168.56.2\n    dns2=8.8.8.8\n    #2.重启网卡\n    [root@localhost ~]# service network restart\n    \n\n\n# 安装gradle\n\n(1)配置环境变量\n\n# 安装地址\ngradle_home\n# 仓库地址\ngradle_user_home\npath添加%gradle_home%\\bin\n# 具体使用\nhttps://blog.csdn.net/holmes_shuai/article/details/119665758\n\n\n（2）配置国内镜像\n\n# 在项目的根目录下找到如下文件：build.gradle在repositories里添加如下代码\nmaven {url \'http://maven.aliyun.com/nexus/content/groups/public/\'}\n# 在apply上面，添加如下代码：\nallprojects {\n\trepositories {\n\t\tmaven{ url \'http://maven.aliyun.com/nexus/content/groups/public/\'}\n\t\tmavencentral()\n\t}\n}\n# 全局配置（操作系统的当前用户）c:\\users\\${users}\\.gradle\\init.gradle添加\nallprojects{\n    repositories {\n        def aliyun_repository_url = \'http://maven.aliyun.com/nexus/content/groups/public\'\n        def aliyun_jcenter_url = \'http://maven.aliyun.com/nexus/content/repositories/jcenter\'\n        all { artifactrepository repo ->\n            if(repo instanceof mavenartifactrepository){\n                def url = repo.url.tostring()\n                if (url.startswith(\'https://repo1.maven.org/maven2\')) {\n                    project.logger.lifecycle "repository ${repo.url} replaced by $aliyun_repository_url."\n                    remove repo\n                }\n                if (url.startswith(\'https://jcenter.bintray.com/\')) {\n                    project.logger.lifecycle "repository ${repo.url} replaced by $aliyun_jcenter_url."\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url aliyun_repository_url\n            url aliyun_jcenter_url\n        }\n    }\n}\n\nallprojects {\n    repositories {\n        maven { url \'file:///d:/workspace/maven/depository/\'}\n        mavenlocal()\n        maven { name "alibaba" ; url "https://maven.aliyun.com/repository/public" }\n        maven { name "bstek" ; url "http://nexus.bsdn.org/content/groups/public/" }\n        mavencentral()\n        jcenter()\n        \n    }\n    repositories {\n     \tmaven { url \'file:///d:/workspace/maven/depository/\'}\n        mavenlocal()\n        maven { url \'https://maven.aliyun.com/repository/gradle-plugin\' }\n        maven { url \'https://maven.aliyun.com/repository/google\' }\n        maven { url \'https://maven.aliyun.com/nexus/content/groups/public/\' }\n        maven { url \'https://maven.aliyun.com/repository/jcenter\' }\n        mavencentral()\n        jcenter()\n    }\n    buildscript {\n        repositories {\n            mavenlocal()\n            maven { name "alibaba" ; url \'https://maven.aliyun.com/repository/public\' }\n            maven { name "bstek" ; url \'http://nexus.bsdn.org/content/groups/public/\' }\n            mavencentral()\n            maven { name "m2" ; url \'https://plugins.gradle.org/m2/\' }\n            jcenter()\n        }\n    }\n}\n\n#1.直接依赖第三方开源库，一般是托管在 jitpack 或者 jcenter\n\timplementation \'com.google.code.gson:gson:2.2.4\'\n#2.直接依赖本地的aar文件，一般是在libs目录下\n\timplementation(name: \'liteavsdk_professional_5.1.5293\', ext: \'aar\')\n#3.直接依赖本地的jar文件\n\timplementation files(\'libs/bdasr_v3_20170801_60da871.jar\')\n#4.依赖本地的model\n\timplementation project(\':wavelibrary\')\n#5.去除重复依赖 project用括号包裹住\ncompile (project(\':uisdk:library:facebook\')) {\n    exclude group: \'com.android.support\', module: \'appcompat-v7\'\n}\n# 全局移除\nconfigurations.all {\n    exclude group: \'android.arch.lifecycle\', module: \'runtime\'\n}\n# 作用域\ngradle依赖的粒度控制相较于maven也更加精细，maven只有compile、provided、test、runtime四种scope，而gradle有以下几种scope：\nimplementation，默认的scope。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。\napi，和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。\ncompileonly和runtimeonly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeonly和maven的provided比较接近。\ntestimplementation，这种依赖在测试编译时和运行时可见，类似于maven的test作用域。\ntestcompileonly和testruntimeonly，这两种类似于compileonly和runtimeonly，但是作用于测试编译时和运行时。\n\n\n\n# 安装vs code\n\n#插件安装\nauto close tag\nauto rename tag\nchinese (simplified) language pack for visual studio code\neslint\nhtml css support\nhtml snippets\njavascript (es6) code snippets\nlive server\nopen in browser\nvetur\n\n#创建全局代码片段  文件 ➡ 首选项 ➡ 用户代码片段 ➡ 点击新建全局代码片段 ➡ 取名 vue ➡ 确定\n{\n    "print to console": {\n        "prefix": "vue",\n        "body": [\n            "\x3c!-- $1 --\x3e",\n            "<template>",\n            "<div class=\'$2\'>$5</div>",\n            "</template>",\n            "",\n            "<script>",\n            "//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）",\n            "//例如：import 《组件名称》 from \'《组件路径》\';",\n            "",\n            "export default {",\n            "//import引入的组件需要注入到对象中才能使用",\n            "components: {},",\n            "data() {",\n            "//这里存放数据",\n            "return {",\n            "",\n            "};",\n            "},",\n            "//监听属性 类似于data概念",\n            "computed: {},",\n            "//监控data中的数据变化",\n            "watch: {},",\n            "//方法集合",\n            "methods: {",\n            "",\n            "},",\n            "//生命周期 - 创建完成（可以访问当前this实例）",\n            "created() {",\n            "",\n            "},",\n            "//生命周期 - 挂载完成（可以访问dom元素）",\n            "mounted() {",\n            "",\n            "},",\n            "beforecreate() {}, //生命周期 - 创建之前",\n            "beforemount() {}, //生命周期 - 挂载之前",\n            "beforeupdate() {}, //生命周期 - 更新之前",\n            "updated() {}, //生命周期 - 更新之后",\n            "beforedestroy() {}, //生命周期 - 销毁之前",\n            "destroyed() {}, //生命周期 - 销毁完成",\n            "activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发",\n            "}",\n            "<\/script>",\n            "<style scoped>",\n            "/* @import url(); 引入公共css类 */",\n            "$4",\n            "</style>"\n        ],\n        "description": "生成vue模板"\n    },\n    "http-get请求": {\n\t"prefix": "httpget",\n\t"body": [\n\t\t"this.\\\\$http({",\n\t\t"url: this.\\\\$http.adornurl(\'\'),",\n\t\t"method: \'get\',",\n\t\t"params: this.\\\\$http.adornparams({})",\n\t\t"}).then(({ data }) => {",\n\t\t"})"\n\t],\n\t"description": "httpget请求"\n    },\n    "http-post请求": {\n\t"prefix": "httppost",\n\t"body": [\n\t\t"this.\\\\$http({",\n\t\t"url: this.\\\\$http.adornurl(\'\'),",\n\t\t"method: \'post\',",\n\t\t"data: this.\\\\$http.adorndata(data, false)",\n\t\t"}).then(({ data }) => { });" \n\t],\n\t"description": "httppost请求"\n    }\n}\n\n#node.js安装并配置npm镜像\nnpm config set registry https://registry.npm.taobao.org\n#安装webpack和vue脚手架\nnpm install webpack -g\nnpm install -g @vue/cli-init\n\n\n\n# typora图床\n\n# 1. 创建gitee仓库\n\n登录账号之后，创建一个仓库用于放置图片。\n\n填写下图标注的三项内容，然后点击创建。\n\n * 仓库名称随便设置；\n * 是否开源：必须选择公开，否则无法通过链接引用图片；\n * 选中”使用readme文件初始化这个仓库“，这样就不用操作git初始化仓库了。\n\n# 2.配置脚本\n\n含有两个文件\n\n * 一个是powershell脚本imp_upload.ps1\n   \n   using namespace system.drawing\n   using namespace system.drawing.imaging\n   using namespace system.io\n   \n   #$check_size = 500*1024\n   $check_size = 1024*1024\n   \n   $run_dir = (split-path -parent $myinvocation.mycommand.definition) + "\\"\n   $path_log = "$run_dir\\gitee_upload.log"\n   $path_config = "$run_dir\\config.json"\n   \n   function error($msg){\n       try{\n           "$([datetime]::now.tostring("yyyy-mm-dd hh:mm:ss")) error: $msg" | out-file -append $path_log\n       } catch{\n           # "log error"\n       }\n   }\n   \n   function info($msg){\n   \n       "$([datetime]::now.tostring("yyyy-mm-dd hh:mm:ss")) info: $msg" | out-file -append $path_log\n   \n   }\n   \n   function exit_script( $reason ){\n       write-error $reason -categoryreason "custom error" -errorid "custom error"\n       error "---exit_script---: " + $reason\n       exit\n   }\n   \n   try{\n       $config = get-content $path_config | convertfrom-json\n   } catch{\n       exit_script "config error :" + $_.exception.message\n   }\n   \n   $now = [datetime]::now\n   $str_month = $now.tostring("yyyymm")\n   $str_dt = $now.tostring("yyyymmdd_hhmmssfff")\n   \n   $url_file_new = "https://gitee.com/api/v5/repos/{owner}/{repo}/contents/{path}"\n   \n   $paths = $args\n   \n   function compress {\n       param (\n           [stream] $instream,\n           [stream] $outstream,\n           $ratio\n       )\n       $img = [image]::fromstream($instream)\n       $res = [bitmap]::new($img.width, $img.height, $img.pixelformat)\n       \n       $gph = [graphics]::fromimage($res)\n       # 设置画布的描绘质量   \n       $gph.compositingquality = [drawing2d.compositingquality]::highquality\n       $gph.smoothingmode = [drawing2d.smoothingmode]::highquality\n       $gph.interpolationmode = [drawing2d.interpolationmode]::highqualitybicubic\n       $gph.drawimage($img, 0, 0, $res.width, $res.height)\n       $gph.dispose()\n       \n       #以下代码为保存图片时，设置压缩质量  \n       $ep =  [encoderparameters]::new(1)\n       [long[]] $qy = @( $ratio )     #设置压缩的比例1-100 \n       $ep.param[0] = [encoderparameter]::new([encoder]::quality, $qy);\n       \n       $arrayici = [imagecodecinfo]::getimageencoders()\n       $jpg_info = "null";\n       foreach ($ici in $arrayici)\n       {\n           if ($ici.formatdescription -eq "jpeg")\n           {\n               $jpg_info = $ici\n               break\n           }\n       }\n       if ($jpg_info -ne "null"){\n           $res.save($outstream, $jpg_info , $ep);  \n       } else{\n           $res.save($outstream, [imageformat]::jpeg);\n       }\n       $res.dispose()\n       $img.dispose()\n   }\n   \n   function converttojpg {\n       param (\n           [stream] $instream,\n           [stream] $outstream\n       )\n       $img = [image]::fromstream($instream)\n       $res = [bitmap]::new($img.width, $img.height, $img.pixelformat)\n       \n       $gph = [graphics]::fromimage($res)\n       # 设置画布的描绘质量   \n       $gph.compositingquality = [drawing2d.compositingquality]::highquality\n       $gph.smoothingmode = [drawing2d.smoothingmode]::highquality\n       $gph.interpolationmode = [drawing2d.interpolationmode]::highqualitybicubic\n       $gph.drawimage($img, 0, 0, $res.width, $res.height)\n       $gph.dispose()\n       \n       $res.save($outstream, [imageformat]::jpeg);\n       $outstream.flush()\n       $res.dispose()\n       $img.dispose()\n   }\n   \n   \n   function upload {\n       param (\n           $b64 = "",\n           $gitee_path = "", \n           $message = ""\n       )\n       $url = $url_file_new\n       $url = $url.replace("{owner}", $config.owner)\n       $url = $url.replace("{repo}", $config.repo)\n       $url = $url.replace("{path}", $gitee_path)\n   \n       $body = @{}\n       $body.add("access_token", $config.access_token)\n       $body.add("content", $b64)\n       $body.add("message", $message)\n       $body.add("branch", $config.branch)\n       $json = convertto-json $body\n   \n       try{\n           $response = invoke-webrequest -uri $url -body $json -method post -contenttype "application/json;charset=utf-8"\n           $data = convertfrom-json $response.content\n           return $data.content.download_url\n       } catch{\n           error "upload failed"\n           if($_.tostring().contains("(401)")){    #(401) 未经授权\n               write-error "access_token error"\n           }else {\n               write-error -exception $_.exception\n           }\n       }\n       \n   }\n   \n   function handlenetimage {\n       param (\n           $path = "",\n           $idx = 0\n       )\n       $resp = invoke-webrequest $path\n       if($resp.content.gettype().name -eq "byte[]"){\n           if($path.contains("?")){\n               $path = $path.substring(0, $path.indexof("?") )\n           }\n           $img_name = $path.substring( $path.lastindexof("/")+1 )\n           $img_ext = $img_name.substring( $img_name.lastindexof(".") )\n           $len = $resp.content.length\n           if($len -gt $check_size){\n               # if($len -gt $check_size*10){\n               #     $ratio = 60\n               # } else{\n               #     $ratio = 80\n               # }\n               $instream = [memorystream]::new($resp.content, $false)\n               $outsteam = [memorystream]::new()\n               # compress $instream $outsteam $ratio\n               # 使用[imageformat]::jpeg保存图像，可以减小文件大小，压缩率和图像质量比compress函数好\n               converttojpg $instream $outsteam\n               $img_ext = ".jpg"\n               $b64 = [convert]::tobase64string( $outsteam.toarray() )\n               $instream.dispose()\n               $outsteam.dispose()\n           } else{\n               $b64 = [convert]::tobase64string( $resp.content )\n           }\n           $gitee_path = "$str_month/$($str_dt)_$idx$img_ext"\n           return upload $b64 $gitee_path $img_name\n   \n       } else{\n           write-error "failed to load image from $url"\n       }\n       \n   }\n   \n   function handlelocalimage {\n       param (\n           $path = "",\n           $idx = 0\n       )\n       $info = [fileinfo]::new( $path )\n       if(! $info.exists){\n           return "image path error"\n       }\n       $img_name = $info.name\n       $img_ext = $info.extension\n       if($info.length -gt $check_size){\n           # if($info.length -gt $check_size*10){\n           #     $ratio = 60\n           # } else{\n           #     $ratio = 80\n           # }\n           $instream = [filestream]::new($info.fullname, [filemode]::open)\n           $outsteam = [memorystream]::new()\n           # compress $instream $outsteam $ratio\n           # 使用[imageformat]::jpeg保存图像，可以减小文件大小，压缩率和图像质量比compress函数好\n           converttojpg $instream $outsteam\n           $img_ext = ".jpg"\n           $b64 = [convert]::tobase64string( $outsteam.toarray() )\n           $instream.dispose()\n           $outsteam.dispose()\n       } else{\n           $b64 = [convert]::tobase64string( [system.io.file]::readallbytes($info.fullname) )\n       }\n       $gitee_path = "$str_month/$($str_dt)_$idx$img_ext"\n       return upload $b64 $gitee_path $img_name\n   }\n   \n   function handle {\n       param (\n           $path = "",\n           $idx = 0\n       )\n       $downurl = ""\n       if($path.startswith("http://") -or $path.startswith("https://")){\n           $downurl = handlenetimage $path $idx\n       } else{\n           $downurl = handlelocalimage $path $idx\n       }\n       return $downurl\n   }\n   \n   for($i=0; $i -lt $paths.count; $i++){\n       handle $paths[$i] $i\n   }\n   \n   \n   trap{\n       error $_.exception.message\n   }\n   \n\n * 一个是配置文件config.json\n   \n   {\n       "owner":  "个人空间地址",\n       "repo":  "仓库名",\n       "branch":  "master",\n       "access_token":  "私人令牌"\n   }\n   \n\n# 3.配置typora\n\n打开typroa， 顶部菜单点击 文件 - 偏好设置 - 图像。按下图设置（旧版typora可能不支持以下设置）。\n\n命令填入： powershell -executionpolicy bypass -file "img_upload.ps1脚本路径"\n\n例： powershell -executionpolicy bypass -file "d:\\0tmp\\img_upload\\img_upload.ps1"\n\n\n# 安装wsl2\n\nhttps://www.jianshu.com/p/6f3195bad5f1\n\n注: 需要windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 windows 11\n\n# 1.启动“适用于linux的windows子系统”和“虚拟机”两个功能\n\n# 1.打开powershell，win+x,a\n# 2.启用适用于linux的windwos子系统\ndism.exe /online /enable-feature /featurename:microsoft-windows-subsystem-linux /all /norestart\n# 3.启用虚拟机功能\ndism.exe /online /enable-feature /featurename:virtualmachineplatform /all /norestart\n\n\n# 2.在bios中开启虚拟化,重启电脑\n\n# 3.下载linux内核更新包，并安装\n\nhttps://learn.microsoft.com/zh-cn/windows/wsl/install-manual\n\n# 4.将wsl2版本设置为默认版本\n\nwsl --set-default-version 2\n\n\n# 5.安装ubuntu\n\n微软商店安装\n\n注：启动提示，参考的对象类型不支持尝试的操作”的故障导致无法使用，添加以下注册表\n\nwindows registry editor version 5.00\n \n[hkey_local_machine\\system\\currentcontrolset\\services\\winsock2\\parameters\\appid_catalog\\0408f7a3]\n"appfullpath"="c:\\\\windows\\\\system32\\\\wsl.exe"\n"permittedlspcategories"=dword:80000000\n\n\n# 6.修改安装路径\n\n# 查看运行状态\nwsl -l -v\n# 关闭\nwsl --shutdown\n# 导出当前linux的镜像 ubuntu为wsl -l -v中的系统名字\nwsl --export ubuntu d:\\workspace\\ubuntu2204\\ubuntu22.04.tar \n# 注销之前的系统并检查\nwsl --unregister ubuntu\n# 导入镜像\nwsl --import ubuntu2204 d:\\workspace\\ubuntu2204\\ d:\\workspace\\ubuntu2204\\ubuntu20.04.tar --version 2\n# 配置先前设置的默认登录用户 ubuntu2204为导入镜像时起的名字，xxx为之前设置的用户\nubuntu2204.exe config --default-user xxx\n\n\n# 7.安装dockerdesktop\n\n官网：https://www.docker.com/\n\n迁移：https://cloud.tencent.com/developer/article/1679501\n\n# 修改安装位置\nmklink /j "c:\\program files\\docker" "d:\\javatools\\docker"\n# 修改相关文件安装目录\nmklink /j "c:\\users\\你的用户名\\appdata\\local\\docker" "d:\\workspace\\docker\\local"\n \nmklink /j "c:\\users\\dlam3\\appdata\\roaming\\docker" "d:\\workspace\\docker\\roaming\\docker"\n \nmklink /j "c:\\users\\dlam3\\appdata\\roaming\\docker desktop" "d:\\workspace\\docker\\roaming\\docker desktop"\n# 安装\ncomplete the installation of docker desktop--\x3euse advanced settings--\x3emanually update wsl 2 myself\n\n\n# 8.直接在ubantu安装docker\n\n# 安装前先卸载操作系统默认安装的docker，\nsudo apt-get remove docker docker-engine docker.io containerd runc\n# 更换apt源 清华：https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 阿里：https://developer.aliyun.com/mirror/ubuntu/?spm=a2c6h.25603864.0.0.2b5223b8kyfvmq\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\nvim /etc/apt/source.list\nsudo apt-get update\nsudo apt-get upgrade\n# 安装必要支持\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\ncurl -fssl https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\nsudo apt-get update\n# 运行如下命令，安装合适版本\napt-cache madison docker-ce\napt-cache madison docker-ce-cli\n# 安装\nsudo apt-get install docker-ce=5:20.10.24~3-0~ubuntu-jammy docker-ce-cli=5:20.10.24~3-0~ubuntu-jammy containerd.io\n# 开机自启\nsudo systemctl enable docker\n\n\n\n# 二、使用\n\n\n# idea配置\n\n# ①代码注释\n\n(1)file | settings | editor | file and code templates里的class修改为\n\n#if (${package_name} && ${package_name} != "")package ${package_name};#end\n#parse("file header.java")\n\npublic class ${name} {\n}\n\n\n(2)includes中file header修改为\n\n/**\n * @author     ：j-ming\n * @date       ：created in ${date} ${time}\n * @description：${description}\n **/\n\n\n(3)file | settings | editor | live templates建一个组\n\n**\n * @description:\n * @author $user$\n * @date $date$ $param$\n * @return $return$ \n */\n     \n //param脚本:\n     groovyscript("if(\\"${_1}\\".length() == 2) {return \'\';} else {def result=\'\'; def params=\\"${_1}\\".replaceall(\'[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\', \'\').split(\',\').tolist();for(i = 0; i < params.size(); i++) {result+=\'\\\\n\' + \' * @param \' + params[i] + \' \'}; return result;}", methodparameters());\n\n// 方法注释\n模板：\n*\n * \n * @author j-ming \n * @date $date$ $time$$param$ $return$\n */\n\nparam:\ngroovyscript("def result = \'\';def params = \\"${_1}\\".replaceall(\'[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\', \'\').split(\',\').tolist(); for(i = 0; i < params.size(); i++) {if(params[i] != \'\')result+=\'* @param \' + params[i] + ((i < params.size() - 1) ? \'\\\\r\\\\n \' : \'\')}; return result == \'\' ? null : \'\\\\r\\\\n \' + result", methodparameters())\n\nreturn:\ngroovyscript("return \\"${_1}\\" == \'void\' ? null : \'\\\\r\\\\n * @return \' + \\"${_1}\\"", methodreturntype()) \n\n\n(4)在idea里面格式化代码的时候，注释也会被格式化\n\nfile | settings | editor | code style | java | javadoc \n\n将enable javadoc formating取消掉\n\n\n# ②插件安装\n\n（1）findbugs-idea静态代码分析\n\n（2）alibaba java coding guidelines 代码规约\n\n（3）coding easier 翻译+字符串处理\n\n（4）free mybatis plugin\n\n禁用不必要插件\n\nhttps://fangweilong.github.io/2018/04/25/idea%e5%85%b3%e9%97%ad%e4%b8%8d%e5%bf%85%e8%a6%81%e7%9a%84%e6%8f%92%e4%bb%b6%e5%87%8f%e5%b0%91%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8/\n\n\n# git\n\n# ①删除已提交文件\n\n首先进入你的master文件夹下, git bash here ,打开命令窗口\n\n$ git --help                   # 帮助命令\n\n \n\n$ git pull origin master          # 将远程仓库里面的项目拉下来\n\n$ dir                        # 查看有哪些文件夹\n\n$ git rm -r --cached .idea       # 删除.idea文件夹\n$ git commit -m \'删除.idea\'    # 提交,添加操作说明\n$ git push -u origin master               # 将本次更改更新到github项目上去\n\n\n# ②拉取指定分支\n\n1》与远程仓库建立连接：git remote add origin xxxxx.git\n\n2》使用git branch 查看本地是否具有dev分支\n\n3》如果没有 git fetch origin dev\n\n4》git checkout -b dev origin/dev在本地创建分支dev并切换到该分支\n\n5》git pull origin dev就可以把gitlab上dev分支上的内容都拉取到本地了\n\n# 或者\ngit -b name;\n\n\n# ③提交代码\n\n#拉取\ngit pull\n\n#1、新建一个分支\ngit branch newbranch\n\n#2、检查分支是否创建成功\ngit branch\n\n#3、切换到新建的分支\ngit checkout newbranch\n\n#4、将改动提交到新分支\ngit add .\ngit commit -m "the new branch"\n\n#5、检查是否提交新分支成功\ngit status\n\n#6、切回到主分支\ngit checkout master\n\n#7、新分支提交的改动合并到主分支\ngit merge newbranch\n\n#8、push代码到远端仓库\ngit push -u origin master\n\n#9、删除新分支\ngit branch -d newbranch\n\n\n\n\n# gradle与maven\n\n# gradle:\n\n# 高版本gradle使用lombok需要添加以下配置\ndependencies {\n\timplementation \'org.projectlombok:lombok:1.18.4\'\n    annotationprocessor \'org.projectlombok:lombok:1.18.4\'\n    ## 打jar包时将sun公司jar包引入\n    implementation(filetree(mapof("dir" to "libs", "include" to listof("*.jar"))))\n}\n# 打包成一个jar\njar {\n    manifest {\n        attributes(\n                \'main-class\': \'com.ming.imageupload\'\n        )\n    }\n    from {\n        ##configurations.runtimeclasspath.collect { it.isdirectory() ? it : ziptree(it) }\n    \tconfigurations.runtime.collect{ziptree(it)}\n    }\n}\n# 设置编码\ntasks.withtype(javacompile) {\n    options.encoding = "utf-8"\n}\n\n\n# 生成jar包\n\n/**\n *\t1.打包成一个jar\n *\t执行命令gradle build或者./gradlew build，可在build/libs查看生成的jar包\n **/\njar {\n    manifest {\n        attributes(\n                \'main-class\': \'com.ming.imageupload\'\n        )\n    }\n    from {\n        configurations.runtimeclasspath.collect { it.isdirectory() ? it : ziptree(it) }\n    \t//configurations.runtime.collect{ziptree(it)}\n    }\n}\n\n/**\n *  2.打包成多个jar\n *\t执行命令gradle release或者./gradlew relesse，可在build/libs查看生成的jar包 打包成多个jar\n **/\njar {\n    manifest {\n        attributes \'main-class\': appmainclass\n    }\n}\ntask clearjar(type: delete) {\n    delete \'build/libs/lib\'\n}\ntask copyjar(type: copy) {\n    from configurations.runtime\n    into(\'build/libs/lib\')\n}\ntask release(type: copy, dependson: [build, clearjar, copyjar])\n\n/**\t3.使用application插件\n *\t执行命令gradle (run、startscript、installapp、distzip、disttar)之一\n *  查看build/distributions会有两个压缩文件,压缩文件\n *\t包含了两个文件夹，bin为启动脚本，lib则是软件jar包和依赖。\n *  还可以执行./gradlew installdist生成未压缩文件目录build/install\n **/\napply plugin: \'application\'\nmainclassname = \'appmainclass\'\n\n\n# maven:\n\n# maven手动导入jar包\nmvn install:install-file -dfile=d:\\workspace\\bairui\\cq\\chongqingbank\\bairuiplatform\\fileconvert\\lib\\aspose-cells-8.5.2.jar -dgroupid=com.aspose -dartifactid=aspose-cells -dversion=8.5.2 -dpackaging=jar\n',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"与Linux相关的知识点",frontmatter:{title:"与Linux相关的知识点",date:"2021-11-05T03:00:00.000Z",categories:["操作系统"],tags:["Linux"],permalink:"/pages/e414ca/"},regularPath:"/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/01.linux/01.linux.html",relativePath:"03.操作系统/01.linux/01.linux.md",key:"v-3d47ad80",path:"/pages/e414ca/",headers:[{level:2,title:"一、Linux",slug:"一、linux",normalizedTitle:"一、linux",charIndex:2},{level:3,title:"查看已开放端口",slug:"查看已开放端口",normalizedTitle:"查看已开放端口",charIndex:14},{level:3,title:"杀死进程",slug:"杀死进程",normalizedTitle:"杀死进程",charIndex:208},{level:3,title:"centos7端口策略",slug:"centos7端口策略",normalizedTitle:"centos7端口策略",charIndex:300},{level:3,title:"TOP使用",slug:"top使用",normalizedTitle:"top使用",charIndex:818},{level:2,title:"二、Docker",slug:"二、docker",normalizedTitle:"二、docker",charIndex:2163},{level:3,title:"①语法",slug:"_1语法",normalizedTitle:"①语法",charIndex:2176},{level:3,title:"②使用",slug:"_2使用",normalizedTitle:"②使用",charIndex:2222},{level:4,title:"1.安装mysql和redis",slug:"_1-安装mysql和redis",normalizedTitle:"1.安装mysql和redis",charIndex:2902},{level:4,title:"2.安装elasticsearch和kibana",slug:"_2-安装elasticsearch和kibana",normalizedTitle:"2.安装elasticsearch和kibana",charIndex:3544},{level:4,title:"3.安装Nginx",slug:"_3-安装nginx",normalizedTitle:"3.安装nginx",charIndex:4602},{level:4,title:"4.安装Portainer",slug:"_4-安装portainer",normalizedTitle:"4.安装portainer",charIndex:5753},{level:2,title:"三、MySql安装",slug:"三、mysql安装",normalizedTitle:"三、mysql安装",charIndex:5984},{level:3,title:"一、 安装前准备",slug:"一、-安装前准备",normalizedTitle:"一、 安装前准备",charIndex:5998},{level:3,title:"二、 安装Mysql",slug:"二、-安装mysql",normalizedTitle:"二、 安装mysql",charIndex:7009},{level:3,title:"三、注意事项",slug:"三、注意事项",normalizedTitle:"三、注意事项",charIndex:9870},{level:2,title:"四、JDK安装",slug:"四、jdk安装",normalizedTitle:"四、jdk安装",charIndex:10358}],headersStr:"一、Linux 查看已开放端口 杀死进程 centos7端口策略 TOP使用 二、Docker ①语法 ②使用 1.安装mysql和redis 2.安装elasticsearch和kibana 3.安装Nginx 4.安装Portainer 三、MySql安装 一、 安装前准备 二、 安装Mysql 三、注意事项 四、JDK安装",content:"# 一、Linux\n\n\n# 查看已开放端口\n\nfirewall-cmd --list-ports\nnetstat -nupl (UDP类型的端口)\nnetstat -ntpl (TCP类型的端口)\n# 查看远程端口是否开放\ntelnet 127.0.0.1 1025//telnet IP 端口号\n#查看端口占用\nnetstat -tunlp | grep 端口号\nps -ef | grep nginx\n\n\n\n# 杀死进程\n\n# 查看正在运行的进程\nnetstat -tpnul\n# 查看进程详情\nps aux |grep program_name \n# 杀死进程\nkill -9 id\n\n\n\n# centos7端口策略\n\n1.修改ssh默认登录端口\n\n # 修改port后面的22\n vi /etc/ssh/sshd_config\n\n\n2.防火墙状态\n\n systemctl status firewalld\n systemctl start firewalld  \n systemctl stop firewalld\n # 禁止开机自启\n systemctl disable firewalld.service\n\n\n3.端口是否开放\n\n # 指定端口号\n firewall-cmd --query-port=6379/tcp\n # 所有开放端口\n firewall-cmd --list-port\n\n\n4.添加需要开放的端口\n\n # 添加\n firewall-cmd --add-port=123/tcp --permanent\n # 载入\n firewall-cmd --reload\n\n\n5.移除指定端口：\n\nfirewall-cmd --permanent --remove-port=123/tcp\n\n\n6.说明\n\n # 作用域\n -zone \n # 永久生效，没有此参数重启后失效\n --permanent \n\n\n\n# TOP使用\n\n top：启动top命令\n top -c：显示完整的命令行\n top -b：以批处理模式显示程序信息\n top -S：以累积模式显示程序信息\n top -n 2：表示更新两次后终止更新显示\n top -d 3：设置信息更新周期为3秒\n top -p 139：显示进程号为139的进程信息，CPU、内存占用率等\n top -n 10：显示更新十次后退出\n\n\n默认进入top时，各进程是按照CPU的占用量来排序的。\n\n 1. 在top基本视图中，按键盘数字“1”可以监控每个逻辑CPU的状况\n 2. 默认单位是KiB，使用按键E可以切换为MiB、GiB、TiB、PiB、EiB\n\n任务字段介绍\n\n * %CPU： CPU Usage，自上次屏幕更新以来任务占用的CPU时间份额，表示为总CPU时间的百分比。\n\n * %MEM： Memory Usage，进程使用的物理内存百分比\n\n * CODE：Code Size，可执行代码占用的物理内存量\n\n * COMMAND：Command Name or Command Line，用于显示输入的命令行或者程序名称\n\n * PID：Process Id，任务独立的ID，即进程ID\n\n * PPID：Parent Process Id，父进程ID\n\n * UID：User Id，任务所有者的用户ID\n\n * USER：User Name，用户名\n\n * RUSER：Real User Name，实际的用户名\n\n * TTY：Controlling Tty，控制终端名称\n\n * TIME：CPU TIME，该任务CPU总共运行的时间\n\n * TIME+：同TIME，其粒度更细\n\n * OOMa：Out of Memory Adjustment Factor，内存溢出调整机制，这个字段会被增加到当前内存溢出分数中，来决定什么任务会被杀掉，范围是-1000到+1000。\n\n * OOMs：Out of Memory Score，内存溢出分数，这个字段是用来选择当内存耗尽时杀掉的任务，范围是0到+1000。0的意思是绝不杀掉，1000的意思是总是杀掉。\n\n * S：Process Status，表示进程状态信息\n\n * * D： 不可中断休眠\n   * I：空闲\n   * R：运行中\n   * S：休眠\n   * T：被任务控制信号停止\n   * t：在跟踪期间被调试器停止\n   * Z：僵尸\n\n交互命令\n\n命令        功能\nh、?       帮助信息查看，涵盖所有的快捷键\n空格、回车按键   手动刷新界面信息\nq、ESC按键   退出\nB         粗体显示功能\nd、s       改变间隔时间\nE、e       切换内存显示的单位，从KiB到EiB\ng         然后输入1-4其中一个数字，选择哪种窗口（1.默认，2.任务，3.内存，4.用户）\nH         进程、线程显示切换\nk         输入PID信息，杀掉一个任务\nZ         改变配色\nP         CPU 占用率大小的顺序排列进程列表\nM         以内存占用率大小的顺序排列进程列表\n\n\n# 二、Docker\n\n\n# ①语法\n\n#查看运行的日志看问题出在哪里\ndocker logs -f 容器ID\n\n\n\n# ②使用\n\n#https://docs.docker.com/engine/install/centos/\n##Uninstall old versions\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n##SET UP THE REPOSITORY\nsudo yum install -y yum-utils\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n##INSTALL DOCKER ENGINE\nsudo yum install docker-ce docker-ce-cli containerd.io\n#设置开机自启\nsudo systemctl enable docker\n#查看运行的日志看问题出在哪里\ndocker logs -f 容器ID\n\n\n# 1.安装mysql和redis\n\ndocker pull mysql:5.7\n#进入容器内部\ndocker exec -it mysql /bin/bash\n#启动容器 -v为挂载文件路径\ndocker run -p 3306:3306 --name mysql \\\n-v /mydata/mysql/log:/var/log/mysql \\\n-v /mydata/mysql/data:/var/lib/mysql \\\n-v /mydata/mysql/conf:/etc/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7 \\\n--lower_case_table_names=1\n#redis\ndocker pull redis\nmkdir -p /mydata/redis/conf\ntouch /mydata/redis/conf/redis.conf\ndocker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \\\n-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis redis-server /etc/redis/redis.conf\n#开启持久化\necho \"appendonly yes\"  >> /mydata/redis/conf/redis.conf\n\n\n# 2.安装elasticsearch和kibana\n\ndocker pull elasticsearch:7.4.2\ndocker pull kibana:7.4.2\n# 创建一个保存elasticsearch配置的文件夹\nmkdir -p /mydata/elasticsearch/config\n# 创建一个保存elasticsearch数据的文件夹\nmkdir -p /mydata/elasticsearch/data\n# 允许任何远程机器访问\necho \"http.host: 0.0.0.0\" >> /mydata/elasticsearch/config/elasticsearch.yml\n# 创建容器并启动\ndocker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" \\\n-e ES_JAVA_OPTS=\"-Xms64m -Xmx512m\" \\\n-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\n-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\\n-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-d elasticsearch:7.4.2\n\n##其中elasticsearch.yml是挂载的配置文件，data是挂载的数据，plugins是es的插件，如ik，而数据挂载需要权限，需要设置data文件的权限为可读可写,需要下边的指令。\n##chmod -R 777 要修改的路径\n##-e \"discovery.type=single-node\" 设置为单节点\n##特别注意：\n##-e ES_JAVA_OPTS=\"-Xms64m -Xmx128m\" \\ 测试环境下,设置ES的初始内存和最大内存，否则会占用全部内存\n# 启动kibana\ndocker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.56.10:9200 -p 5601:5601 \\\n-d kibana:7.4.2\n\n\n\n# 3.安装Nginx\n\n随便启动一个nginx实例，复制出配置\n\ndocker pull nginx:1.10\ndocker run -p 80:80 --name nginx -d nginx:1.10\n\n\n将容器内的配置文件拷贝到/mydata/nginx/conf/ 下\n\n# 方法一\nmkdir -p /mydata/nginx/html\nmkdir -p /mydata/nginx/logs\nmkdir -p /mydata/nginx/conf\nmkdir -p /mydata/nginx/conf.d\ndocker cp nginx:/etc/nginx/nginx.conf  /mydata/nginx/conf/\ndocker cp nginx:/etc/nginx/conf.d/default.conf /mydata/nginx/conf.d\n#进入容器\ndocker exec -it nginx /bin/bash\n#由于拷贝完成后会在config中存在一个nginx文件夹，所以需要将它的内容移动到conf中\nmv /mydata/nginx/conf/nginx/* /mydata/nginx/conf/\nrm -rf /mydata/nginx/conf/nginx\n\n#方法二\nmkdir -p /mydata/nginx\n##.代表当前目录\ndocker container cp nginx:/etc/nginx .\nmv nginx conf\nmkdir nginx\nmv conf nginx/\n\n\n停止和删除容器\n\ndocker stop nginx\ndocker rm nginx\n\n\n创建新的Nginx，执行以下命令\n\ndocker run -p 80:80 --name nginx \\\n -v /mydata/nginx/html:/usr/share/nginx/html \\\n -v /mydata/nginx/logs:/var/log/nginx \\\n -v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n -v /mydata/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\\n -d nginx:1.10\n\n\n设置开机启动nginx\n\ndocker update nginx --restart=always\n\n\n创建“/mydata/nginx/html/index.html”文件，测试是否能够正常访问\n\necho '<h2>hello nginx!</h2>' >index.html\n\n\n# 4.安装Portainer\n\ndocker pull portainer/portainer\ndocker run -p 9000:9000 -p 8000:8000 --name portainer \\\n--restart=always \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /mydata/portainer/data:/data \\\n-d portainer/portainer\n\n\n\n# 三、MySql安装\n\n\n# 一、 安装前准备\n\n1、检查是否已经安装过mysql，执行命令\n\n[root@localhost /]# rpm -qa | grep mysql\n\n\n若已安装，执行\n\n[root@localhost /]# rpm -e --nodeps mysql-libs-5.1.73-5.el6_6.x86_64\n\n\n再次执行查询命令，查看是否删除\n\n[root@localhost /]# rpm -qa | grep mysql\n\n\n2、查询所有Mysql对应的文件夹\n\n[root@localhost /]# whereis mysql\nmysql: /usr/bin/mysql /usr/include/mysql\n[root@localhost lib]# find / -name mysql\n/data/mysql\n/data/mysql/mysql\n\n\n删除相关目录或文件\n\n[root@localhost /]#  rm -rf /usr/bin/mysql /usr/include/mysql /data/mysql /data/mysql/mysql \n\n\n验证是否删除完毕\n\n[root@localhost /]# whereis mysql\nmysql:\n[root@localhost /]# find / -name mysql\n[root@localhost /]# \n\n\n3、检查mysql用户组和用户是否存在，如果没有，则创建\n\n[root@localhost /]# cat /etc/group | grep mysql\n[root@localhost /]# cat /etc/passwd |grep mysql\n[root@localhost /]# groupadd mysql\n[root@localhost /]# useradd -r -g mysql mysql\n[root@localhost /]# \n\n\n4、从官网下载是用于Linux的Mysql安装包\n\n下载命令：\n\n[root@localhost /]#  wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz\n\n\n也可以直接到mysql官网选择其他版本进行下载。\n\n\n# 二、 安装Mysql\n\n1、在执行wget命令的目录下或你的上传目录下找到Mysql安装包：mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz 执行解压命令：\n\n[root@localhost /]#  tar xzvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz\n[root@localhost /]# ls\nmysql-5.7.24-linux-glibc2.12-x86_64\nmysql-5.7.24-linux-glibc2.12-x86_64.tar.gz\n\n\n解压完成后，可以看到当前目录下多了一个解压文件，移动该文件到**/usr/local/mysql** 执行移动命令：\n\n[root@localhost /]# mv mysql-5.7.30-linux-glibc2.12-x86_64 /usr/local/mysql\n\n\n2、在**/usr/local/mysql**目录下创建data目录\n\n[root@localhost /]# mkdir /usr/local/mysql/data\n\n\n3、更改mysql目录下所有的目录及文件夹所属的用户组和用户，以及权限\n\n[root@localhost /]# chown -R mysql:mysql /usr/local/mysql\n[root@localhost /]# chmod -R 755 /usr/local/mysql\n\n\n4、编译安装并初始化mysql,务必记住初始化输出日志末尾的密码（数据库管理员临时密码）\n\n[root@localhost /]# cd /usr/local/mysql/bin\n[root@localhost bin]# ./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql\n\n\n补充说明：\n\n此时可能会出现错误：cannot open shared object file:xxx\n\n出现该问题首先检查该链接库文件有没有安装使用 命令进行核查\n\n[root@localhost bin]# rpm -qa|grep libaio   \n[root@localhost bin]# \n\n\n运行命令后发现系统中无该链接库文件\n\n[root@localhost bin]#  yum install  libaio-devel.x86_64\n\n\n安装成功后，继续运行数据库的初始化命令，此时可能会出现如下错误：cannot open shared object file:xxx\n\n执行如下命令后，再次运行数据库的初始化命令：\n\n[root@localhost bin]#  yum -y install numactl\n\n\n5、运行初始化命令成功后，输出日志如下：\n\nA temporary password xxxx for root@localhost:xxx\n\n记录日志最末尾位置**root@localhost:**后的字符串xxx，此字符串为mysql管理员临时登录密码。\n\n6、编辑配置文件my.cnf，添加配置如下\n\n[root@localhost bin]#  vi /etc/my.cnf\n\n\n[mysqld]\ndatadir=/usr/local/mysql/data\nport = 3306\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\nsymbolic-links=0\nmax_connections=400\ninnodb_file_per_table=1\n#表名大小写不明感，敏感为\nlower_case_table_names=1\n\n\n7、启动mysql服务器\n\n[root@localhost /]# /usr/local/mysql/support-files/mysql.server start\n\n\n如果出现如下提示信息\n\nStarting MySQL... ERROR! The server quit without updating PID file\n\n\n查看是否存在mysql和mysqld的服务，如果存在，则结束进程，再重新执行启动命令\n\n#查询服务\nps -ef|grep mysql\nps -ef|grep mysqld\n#结束进程\nkill -9 PID\n#启动服务\n /usr/local/mysql/support-files/mysql.server start\n\n\n8、添加软连接，并重启mysql服务\n\n[root@localhost /]#  ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql \n[root@localhost /]#  ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql\n[root@localhost /]#  service mysql restart\n\n\n9、登录mysql，修改密码(密码为步骤5生成的临时密码)\n\n[root@localhost /]#  mysql -u root -p\n\n\n# mysql>set password for root@localhost = password('yourpass');\nmysql>SET PASSWORD = PASSWORD ('your new password');\nmysql>ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nmysql>flush privileges;\n\n\n10、开放远程连接\n\nmysql>use mysql;\nmsyql>update user set user.Host='%' where user.User='root';\nmysql>flush privileges;\n\n\n11、设置开机自动启动\n\n# 1、将服务文件拷贝到init.d下，并重命名为mysql\n[root@localhost /]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld\n# 2、赋予可执行权限\n[root@localhost /]# chmod +x /etc/init.d/mysqld\n# 3、添加服务\n[root@localhost /]# chkconfig --add mysqld\n# 4、显示服务列表\n[root@localhost /]# chkconfig --list\n\n\n\n# 三、注意事项\n\n * 初始化密码忘记\n\n# 在[mysqld]下加入跳过验证 skip-grant-tables\nvi /etc/my.cnf\n# 重启\nservice mysql restart\nmysql -u root -p\n# 修改密码\nmysql> UPDATE mysql.user set authentication_string=password('123456Aa@') where user='root';\n# 初始化密码\nmysql> alter user 'root'@'localhost' identified by 'root';\n# 注释或删掉 skip-grant-tables 重启mysql\n\n\n * ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)\n\n[root@localhost /]# ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock\n\n\n\n# 四、JDK安装\n\n 1. 解压安装包到/usr/local/java/\n    \n    tar -xvf /home/xxx/tool/jdk-8u271-linux-x64.tar.gz -C /usr/local/java/\n    \n\n 2. 配置环境变量\n    \n    #root用户下\n    vim /etc/profile\n    # 普通用户下\n    cd  ~\n    vim .bash_profile\n    \n\n 3. 编辑环境变量\n    \n    export JAVA_HOME=/usr/local/java/jdk1.8.0_271\n    export PATH=$JAVA_HOME/bin:$PATH\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n    export JRE_HOME=$JAVA_HOME/jre\n    \n\n 4. 刷新环境变量\n    \n    source /etc/profile\n    source .bash_profile\n    ",normalizedContent:"# 一、linux\n\n\n# 查看已开放端口\n\nfirewall-cmd --list-ports\nnetstat -nupl (udp类型的端口)\nnetstat -ntpl (tcp类型的端口)\n# 查看远程端口是否开放\ntelnet 127.0.0.1 1025//telnet ip 端口号\n#查看端口占用\nnetstat -tunlp | grep 端口号\nps -ef | grep nginx\n\n\n\n# 杀死进程\n\n# 查看正在运行的进程\nnetstat -tpnul\n# 查看进程详情\nps aux |grep program_name \n# 杀死进程\nkill -9 id\n\n\n\n# centos7端口策略\n\n1.修改ssh默认登录端口\n\n # 修改port后面的22\n vi /etc/ssh/sshd_config\n\n\n2.防火墙状态\n\n systemctl status firewalld\n systemctl start firewalld  \n systemctl stop firewalld\n # 禁止开机自启\n systemctl disable firewalld.service\n\n\n3.端口是否开放\n\n # 指定端口号\n firewall-cmd --query-port=6379/tcp\n # 所有开放端口\n firewall-cmd --list-port\n\n\n4.添加需要开放的端口\n\n # 添加\n firewall-cmd --add-port=123/tcp --permanent\n # 载入\n firewall-cmd --reload\n\n\n5.移除指定端口：\n\nfirewall-cmd --permanent --remove-port=123/tcp\n\n\n6.说明\n\n # 作用域\n -zone \n # 永久生效，没有此参数重启后失效\n --permanent \n\n\n\n# top使用\n\n top：启动top命令\n top -c：显示完整的命令行\n top -b：以批处理模式显示程序信息\n top -s：以累积模式显示程序信息\n top -n 2：表示更新两次后终止更新显示\n top -d 3：设置信息更新周期为3秒\n top -p 139：显示进程号为139的进程信息，cpu、内存占用率等\n top -n 10：显示更新十次后退出\n\n\n默认进入top时，各进程是按照cpu的占用量来排序的。\n\n 1. 在top基本视图中，按键盘数字“1”可以监控每个逻辑cpu的状况\n 2. 默认单位是kib，使用按键e可以切换为mib、gib、tib、pib、eib\n\n任务字段介绍\n\n * %cpu： cpu usage，自上次屏幕更新以来任务占用的cpu时间份额，表示为总cpu时间的百分比。\n\n * %mem： memory usage，进程使用的物理内存百分比\n\n * code：code size，可执行代码占用的物理内存量\n\n * command：command name or command line，用于显示输入的命令行或者程序名称\n\n * pid：process id，任务独立的id，即进程id\n\n * ppid：parent process id，父进程id\n\n * uid：user id，任务所有者的用户id\n\n * user：user name，用户名\n\n * ruser：real user name，实际的用户名\n\n * tty：controlling tty，控制终端名称\n\n * time：cpu time，该任务cpu总共运行的时间\n\n * time+：同time，其粒度更细\n\n * ooma：out of memory adjustment factor，内存溢出调整机制，这个字段会被增加到当前内存溢出分数中，来决定什么任务会被杀掉，范围是-1000到+1000。\n\n * ooms：out of memory score，内存溢出分数，这个字段是用来选择当内存耗尽时杀掉的任务，范围是0到+1000。0的意思是绝不杀掉，1000的意思是总是杀掉。\n\n * s：process status，表示进程状态信息\n\n * * d： 不可中断休眠\n   * i：空闲\n   * r：运行中\n   * s：休眠\n   * t：被任务控制信号停止\n   * t：在跟踪期间被调试器停止\n   * z：僵尸\n\n交互命令\n\n命令        功能\nh、?       帮助信息查看，涵盖所有的快捷键\n空格、回车按键   手动刷新界面信息\nq、esc按键   退出\nb         粗体显示功能\nd、s       改变间隔时间\ne、e       切换内存显示的单位，从kib到eib\ng         然后输入1-4其中一个数字，选择哪种窗口（1.默认，2.任务，3.内存，4.用户）\nh         进程、线程显示切换\nk         输入pid信息，杀掉一个任务\nz         改变配色\np         cpu 占用率大小的顺序排列进程列表\nm         以内存占用率大小的顺序排列进程列表\n\n\n# 二、docker\n\n\n# ①语法\n\n#查看运行的日志看问题出在哪里\ndocker logs -f 容器id\n\n\n\n# ②使用\n\n#https://docs.docker.com/engine/install/centos/\n##uninstall old versions\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n##set up the repository\nsudo yum install -y yum-utils\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n##install docker engine\nsudo yum install docker-ce docker-ce-cli containerd.io\n#设置开机自启\nsudo systemctl enable docker\n#查看运行的日志看问题出在哪里\ndocker logs -f 容器id\n\n\n# 1.安装mysql和redis\n\ndocker pull mysql:5.7\n#进入容器内部\ndocker exec -it mysql /bin/bash\n#启动容器 -v为挂载文件路径\ndocker run -p 3306:3306 --name mysql \\\n-v /mydata/mysql/log:/var/log/mysql \\\n-v /mydata/mysql/data:/var/lib/mysql \\\n-v /mydata/mysql/conf:/etc/mysql \\\n-e mysql_root_password=root \\\n-d mysql:5.7 \\\n--lower_case_table_names=1\n#redis\ndocker pull redis\nmkdir -p /mydata/redis/conf\ntouch /mydata/redis/conf/redis.conf\ndocker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \\\n-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis redis-server /etc/redis/redis.conf\n#开启持久化\necho \"appendonly yes\"  >> /mydata/redis/conf/redis.conf\n\n\n# 2.安装elasticsearch和kibana\n\ndocker pull elasticsearch:7.4.2\ndocker pull kibana:7.4.2\n# 创建一个保存elasticsearch配置的文件夹\nmkdir -p /mydata/elasticsearch/config\n# 创建一个保存elasticsearch数据的文件夹\nmkdir -p /mydata/elasticsearch/data\n# 允许任何远程机器访问\necho \"http.host: 0.0.0.0\" >> /mydata/elasticsearch/config/elasticsearch.yml\n# 创建容器并启动\ndocker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" \\\n-e es_java_opts=\"-xms64m -xmx512m\" \\\n-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\n-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\\n-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-d elasticsearch:7.4.2\n\n##其中elasticsearch.yml是挂载的配置文件，data是挂载的数据，plugins是es的插件，如ik，而数据挂载需要权限，需要设置data文件的权限为可读可写,需要下边的指令。\n##chmod -r 777 要修改的路径\n##-e \"discovery.type=single-node\" 设置为单节点\n##特别注意：\n##-e es_java_opts=\"-xms64m -xmx128m\" \\ 测试环境下,设置es的初始内存和最大内存，否则会占用全部内存\n# 启动kibana\ndocker run --name kibana -e elasticsearch_hosts=http://192.168.56.10:9200 -p 5601:5601 \\\n-d kibana:7.4.2\n\n\n\n# 3.安装nginx\n\n随便启动一个nginx实例，复制出配置\n\ndocker pull nginx:1.10\ndocker run -p 80:80 --name nginx -d nginx:1.10\n\n\n将容器内的配置文件拷贝到/mydata/nginx/conf/ 下\n\n# 方法一\nmkdir -p /mydata/nginx/html\nmkdir -p /mydata/nginx/logs\nmkdir -p /mydata/nginx/conf\nmkdir -p /mydata/nginx/conf.d\ndocker cp nginx:/etc/nginx/nginx.conf  /mydata/nginx/conf/\ndocker cp nginx:/etc/nginx/conf.d/default.conf /mydata/nginx/conf.d\n#进入容器\ndocker exec -it nginx /bin/bash\n#由于拷贝完成后会在config中存在一个nginx文件夹，所以需要将它的内容移动到conf中\nmv /mydata/nginx/conf/nginx/* /mydata/nginx/conf/\nrm -rf /mydata/nginx/conf/nginx\n\n#方法二\nmkdir -p /mydata/nginx\n##.代表当前目录\ndocker container cp nginx:/etc/nginx .\nmv nginx conf\nmkdir nginx\nmv conf nginx/\n\n\n停止和删除容器\n\ndocker stop nginx\ndocker rm nginx\n\n\n创建新的nginx，执行以下命令\n\ndocker run -p 80:80 --name nginx \\\n -v /mydata/nginx/html:/usr/share/nginx/html \\\n -v /mydata/nginx/logs:/var/log/nginx \\\n -v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n -v /mydata/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\\n -d nginx:1.10\n\n\n设置开机启动nginx\n\ndocker update nginx --restart=always\n\n\n创建“/mydata/nginx/html/index.html”文件，测试是否能够正常访问\n\necho '<h2>hello nginx!</h2>' >index.html\n\n\n# 4.安装portainer\n\ndocker pull portainer/portainer\ndocker run -p 9000:9000 -p 8000:8000 --name portainer \\\n--restart=always \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /mydata/portainer/data:/data \\\n-d portainer/portainer\n\n\n\n# 三、mysql安装\n\n\n# 一、 安装前准备\n\n1、检查是否已经安装过mysql，执行命令\n\n[root@localhost /]# rpm -qa | grep mysql\n\n\n若已安装，执行\n\n[root@localhost /]# rpm -e --nodeps mysql-libs-5.1.73-5.el6_6.x86_64\n\n\n再次执行查询命令，查看是否删除\n\n[root@localhost /]# rpm -qa | grep mysql\n\n\n2、查询所有mysql对应的文件夹\n\n[root@localhost /]# whereis mysql\nmysql: /usr/bin/mysql /usr/include/mysql\n[root@localhost lib]# find / -name mysql\n/data/mysql\n/data/mysql/mysql\n\n\n删除相关目录或文件\n\n[root@localhost /]#  rm -rf /usr/bin/mysql /usr/include/mysql /data/mysql /data/mysql/mysql \n\n\n验证是否删除完毕\n\n[root@localhost /]# whereis mysql\nmysql:\n[root@localhost /]# find / -name mysql\n[root@localhost /]# \n\n\n3、检查mysql用户组和用户是否存在，如果没有，则创建\n\n[root@localhost /]# cat /etc/group | grep mysql\n[root@localhost /]# cat /etc/passwd |grep mysql\n[root@localhost /]# groupadd mysql\n[root@localhost /]# useradd -r -g mysql mysql\n[root@localhost /]# \n\n\n4、从官网下载是用于linux的mysql安装包\n\n下载命令：\n\n[root@localhost /]#  wget https://dev.mysql.com/get/downloads/mysql-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz\n\n\n也可以直接到mysql官网选择其他版本进行下载。\n\n\n# 二、 安装mysql\n\n1、在执行wget命令的目录下或你的上传目录下找到mysql安装包：mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz 执行解压命令：\n\n[root@localhost /]#  tar xzvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz\n[root@localhost /]# ls\nmysql-5.7.24-linux-glibc2.12-x86_64\nmysql-5.7.24-linux-glibc2.12-x86_64.tar.gz\n\n\n解压完成后，可以看到当前目录下多了一个解压文件，移动该文件到**/usr/local/mysql** 执行移动命令：\n\n[root@localhost /]# mv mysql-5.7.30-linux-glibc2.12-x86_64 /usr/local/mysql\n\n\n2、在**/usr/local/mysql**目录下创建data目录\n\n[root@localhost /]# mkdir /usr/local/mysql/data\n\n\n3、更改mysql目录下所有的目录及文件夹所属的用户组和用户，以及权限\n\n[root@localhost /]# chown -r mysql:mysql /usr/local/mysql\n[root@localhost /]# chmod -r 755 /usr/local/mysql\n\n\n4、编译安装并初始化mysql,务必记住初始化输出日志末尾的密码（数据库管理员临时密码）\n\n[root@localhost /]# cd /usr/local/mysql/bin\n[root@localhost bin]# ./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql\n\n\n补充说明：\n\n此时可能会出现错误：cannot open shared object file:xxx\n\n出现该问题首先检查该链接库文件有没有安装使用 命令进行核查\n\n[root@localhost bin]# rpm -qa|grep libaio   \n[root@localhost bin]# \n\n\n运行命令后发现系统中无该链接库文件\n\n[root@localhost bin]#  yum install  libaio-devel.x86_64\n\n\n安装成功后，继续运行数据库的初始化命令，此时可能会出现如下错误：cannot open shared object file:xxx\n\n执行如下命令后，再次运行数据库的初始化命令：\n\n[root@localhost bin]#  yum -y install numactl\n\n\n5、运行初始化命令成功后，输出日志如下：\n\na temporary password xxxx for root@localhost:xxx\n\n记录日志最末尾位置**root@localhost:**后的字符串xxx，此字符串为mysql管理员临时登录密码。\n\n6、编辑配置文件my.cnf，添加配置如下\n\n[root@localhost bin]#  vi /etc/my.cnf\n\n\n[mysqld]\ndatadir=/usr/local/mysql/data\nport = 3306\nsql_mode=no_engine_substitution,strict_trans_tables\nsymbolic-links=0\nmax_connections=400\ninnodb_file_per_table=1\n#表名大小写不明感，敏感为\nlower_case_table_names=1\n\n\n7、启动mysql服务器\n\n[root@localhost /]# /usr/local/mysql/support-files/mysql.server start\n\n\n如果出现如下提示信息\n\nstarting mysql... error! the server quit without updating pid file\n\n\n查看是否存在mysql和mysqld的服务，如果存在，则结束进程，再重新执行启动命令\n\n#查询服务\nps -ef|grep mysql\nps -ef|grep mysqld\n#结束进程\nkill -9 pid\n#启动服务\n /usr/local/mysql/support-files/mysql.server start\n\n\n8、添加软连接，并重启mysql服务\n\n[root@localhost /]#  ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql \n[root@localhost /]#  ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql\n[root@localhost /]#  service mysql restart\n\n\n9、登录mysql，修改密码(密码为步骤5生成的临时密码)\n\n[root@localhost /]#  mysql -u root -p\n\n\n# mysql>set password for root@localhost = password('yourpass');\nmysql>set password = password ('your new password');\nmysql>alter user 'root'@'localhost' password expire never;\nmysql>flush privileges;\n\n\n10、开放远程连接\n\nmysql>use mysql;\nmsyql>update user set user.host='%' where user.user='root';\nmysql>flush privileges;\n\n\n11、设置开机自动启动\n\n# 1、将服务文件拷贝到init.d下，并重命名为mysql\n[root@localhost /]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld\n# 2、赋予可执行权限\n[root@localhost /]# chmod +x /etc/init.d/mysqld\n# 3、添加服务\n[root@localhost /]# chkconfig --add mysqld\n# 4、显示服务列表\n[root@localhost /]# chkconfig --list\n\n\n\n# 三、注意事项\n\n * 初始化密码忘记\n\n# 在[mysqld]下加入跳过验证 skip-grant-tables\nvi /etc/my.cnf\n# 重启\nservice mysql restart\nmysql -u root -p\n# 修改密码\nmysql> update mysql.user set authentication_string=password('123456aa@') where user='root';\n# 初始化密码\nmysql> alter user 'root'@'localhost' identified by 'root';\n# 注释或删掉 skip-grant-tables 重启mysql\n\n\n * error 2002 (hy000): can’t connect to local mysql server through socket ‘/tmp/mysql.sock’ (2)\n\n[root@localhost /]# ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock\n\n\n\n# 四、jdk安装\n\n 1. 解压安装包到/usr/local/java/\n    \n    tar -xvf /home/xxx/tool/jdk-8u271-linux-x64.tar.gz -c /usr/local/java/\n    \n\n 2. 配置环境变量\n    \n    #root用户下\n    vim /etc/profile\n    # 普通用户下\n    cd  ~\n    vim .bash_profile\n    \n\n 3. 编辑环境变量\n    \n    export java_home=/usr/local/java/jdk1.8.0_271\n    export path=$java_home/bin:$path\n    export classpath=.:$java_home/lib/dt.jar:$java_home/lib/tools.jar\n    export jre_home=$java_home/jre\n    \n\n 4. 刷新环境变量\n    \n    source /etc/profile\n    source .bash_profile\n    ",charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"JUC",frontmatter:{title:"JUC",date:"2022-01-1",permalink:"/pages/7ac60e/"},regularPath:"/02.%E5%90%8E%E7%AB%AF/01.%E5%90%8E%E7%AB%AF/02.JUC.html",relativePath:"02.后端/01.后端/02.JUC.md",key:"v-c04f9ede",path:"/pages/7ac60e/",headers:[{level:2,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:2},{level:2,title:"线程状态",slug:"线程状态",normalizedTitle:"线程状态",charIndex:726},{level:2,title:"线程间通信",slug:"线程间通信",normalizedTitle:"线程间通信",charIndex:1161},{level:2,title:"多线程锁的机制",slug:"多线程锁的机制",normalizedTitle:"多线程锁的机制",charIndex:2851},{level:2,title:"ArrayList线程不安全说明",slug:"arraylist线程不安全说明",normalizedTitle:"arraylist线程不安全说明",charIndex:3288},{level:2,title:"ReentrantReadWriteLock锁",slug:"reentrantreadwritelock锁",normalizedTitle:"reentrantreadwritelock锁",charIndex:4526},{level:2,title:"阻塞队列",slug:"阻塞队列",normalizedTitle:"阻塞队列",charIndex:6456},{level:2,title:"线程池",slug:"线程池",normalizedTitle:"线程池",charIndex:6528}],headersStr:"概念 线程状态 线程间通信 多线程锁的机制 ArrayList线程不安全说明 ReentrantReadWriteLock锁 阻塞队列 线程池",content:'# 概念\n\n在高内聚低耦合的前提下，线程 操作（对外暴露的方法） 资源类\n\n/**\n * 资源类\n */\nclass Phone {\n\t// 对外暴露的方法 sendEmail\n    public synchronized void sendEmail() {\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println("sendEmail~~");\n    }\n    \n    // 对外暴露的方法 sendSMS\n    public static synchronized void sendSMS() {\n        System.out.println("sendSMS~~");\n    }\n}\npublic class Lock8 {\n\n    public static void main(String[] args) throws Exception {\n        Phone phone = new Phone();\n\t\t// 线程1\n        new Thread(phone::sendEmail).start();\n\n        TimeUnit.MILLISECONDS.sleep(1);\n\t\t// 线程2\n        new Thread(Phone::sendSMS).start();\n    }\n}\n\n\n\n# 线程状态\n\n\t\t/**\n         * 新建\n         */\n        NEW,\n\n        /**\n         * 就绪、运行\n         */\n        RUNNABLE,\n\n        /**\n         * 阻塞\n         */\n        BLOCKED,\n\n        /**\n         * 等待\n         * 不会被分配CPU执行时间，如果不被唤醒则会无限期等待\n         */\n        WAITING,\n\n        /**\n         * 超时等待\n         * 不会被分配CPU执行时间，如果不被唤醒则时间到了会自动唤醒\n         */\n        TIMED_WAITING,\n\n        /**\n         * 终止、销毁\n         */\n        TERMINATED;\n\n\n\n\n\n# 线程间通信\n\n判断 干活 通知\n\n多线程交互必须防止多线程的虚假唤醒，即（判断只能用while不能用if）\n\nclass Plusminus {\n    private int number = 0;\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void increment() {\n        lock.lock();\n        try {\n            // 1判断\n            while (number != 0) {\n                condition.await();\n            }\n            // 3干活\n            number++;\n            System.out.println(Thread.currentThread().getName() + "\\t" + number);\n            // 3通知\n            condition.signalAll();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void decrement() {\n        lock.lock();\n        try {\n            while (number == 0) {\n                condition.await();\n            }\n            number--;\n            System.out.println(Thread.currentThread().getName() + "\\t" + number);\n            condition.signalAll();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\npublic class ThreadNotifyDemo {\n    public static void main(String[] args) {\n        Plusminus plusminus = new Plusminus();\n        new Thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.increment();\n        }, "A").start();\n        new Thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.decrement();\n        }, "B").start();\n        new Thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.increment();\n        }, "C").start();\n        new Thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.decrement();\n        }, "D").start();\n    }\n}\n\n\n\n# 多线程锁的机制\n\n一个资源类里面如果有多个synchronized方法，那么如果一个线程调用了当前锁对象this的其中一个synchronized方法了，那么就会锁住this对象的所有synchronized方法，其他线程就只能等待不能访问当前对象的其他synchronized方法。\n\n锁的表现形式：\n\n * 对于普通同步方法，锁是当前实例对象\n * 对于静态同步方法，锁是当前类的class对象\n * 对于同步方法块，锁是synchronized(...)里配置的对象\n\n说明：\n\n * 当一个线程试图访问同步代码块时，它必须先得到锁。退出或抛出异常时必须释放锁\n\n * 当一个实例对象的非静态同步方法取得锁后，该实例对象的其他非静态同步方法必须等待获取锁的方法释放锁后才能获取锁。其他实例对象的锁与该实例对象的锁不一样所以无须等待释放锁\n\n * 所有静态同步方法用的是同一把锁(类对象本身)。静态同步方法与非静态同步方法的锁是两个不同的对象所以不存在锁的竞争\n\n\n# ArrayList线程不安全说明\n\n 1. 不安全场景\n    \n    在数据同时进行读写时会产生数据不一致\n    \n    public class NotSafeDemo {\n        public static void main(String[] args) {\n    \n            ArrayList<String> list = new ArrayList<>();\n            for (int i = 1; i <= 5; i++) {\n                new Thread(() -> {\n                    list.add(UUID.randomUUID().toString().substring(0,8));\n                    System.out.println(list);\n                },String.valueOf(i)).start();\n    \n            }\n    \n        }\n    }\n    \n\n 2. 解决方法\n    \n    * Vector\n    * Collections.synchronizedList()\n    * CopyOnWriteArrayList\n\n 3. 说明\n    \n    CopyOnWriteArrayList:\n    \n    CopyOnWriteArrayList是一个在写时复制的容器。先将当前容器进行复制，再往新容器写入数据，写入完成后将原容器指向新容器。所以CopyOnWriteArrayList实际采用了一种读写分离的思想，读和写分别在不同的容器中进行\n    \n    public boolean add(E e) {\n            final ReentrantLock lock = this.lock;\n            lock.lock();\n            try {\n                Object[] elements = getArray();\n                int len = elements.length;\n                Object[] newElements = Arrays.copyOf(elements, len + 1);\n                newElements[len] = e;\n                setArray(newElements);\n                return true;\n            } finally {\n                lock.unlock();\n            }\n        }\n    \n\n\n# ReentrantReadWriteLock锁\n\nReentrantLock是一个排他锁，同一时间只允许一个线程访问，而ReentrantReadWriteLock允许多个读线程同时访问，但不允许写线程和读线程、写线程和写线程同时访问\n\nclass MyCache {\n\n    private Map<String,Object> map = new HashMap<>();\n    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n    public void put(String key, String value) throws InterruptedException {\n        lock.writeLock().lock();\n        try {\n            System.out.println(Thread.currentThread().getName() + "\\t" + "开始写入数据");\n            TimeUnit.MILLISECONDS.sleep(300);\n            map.put(key,value);\n            System.out.println(Thread.currentThread().getName() + "\\t" + "写入数据完成");\n        } finally {\n            lock.writeLock().unlock();\n        }\n    }\n\n    public void get(String key) throws InterruptedException {\n        lock.readLock().lock();\n        try {\n            System.out.println(Thread.currentThread().getName() + "\\t" + "开始读取数据" + "\\t" + key);\n            TimeUnit.MILLISECONDS.sleep(300);\n            System.out.println(Thread.currentThread().getName() + "\\t" + "读取数据完成" + "\\t" +  map.get(key));\n        } finally {\n            lock.readLock().unlock();\n        }\n    }\n\n}\n\npublic class ReadWriteLockDemo {\n    public static void main(String[] args) {\n        MyCache myCache = new MyCache();\n        for (int i = 1; i <= 5; i++) {\n            int tempInt = i;\n            new Thread(() -> {\n                try {\n                    myCache.put(tempInt+"",tempInt+"");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            },tempInt+"").start();\n        }\n\n        for (int i = 1; i <= 5; i++) {\n            int tempInt = i;\n            new Thread(() -> {\n                try {\n                    myCache.get(tempInt+"");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            },tempInt+"").start();\n        }\n    }\n}\n\n\n\n# 阻塞队列\n\n当队列为空时，从队列中获取元素将阻塞。 当队列为满时，从队列中添加元素将阻塞。 因为是队列，所以我们理应想到先进先出。\n\n\n\n\n# 线程池\n\n线程池优势：\n\n线程池的任务只是控制运行的线程数量，处理过程中将任务放入队列，然后线程创建后启动这些任务，如果线程数量超过最大线程数，超出的线程将排队等候，等其他线程执行完任务，再从队列中取出任务执行\n\n特点：\n\n * 线程复用\n   * 降低资源消耗，通过重复利用已经创建的线程可以降低线程创建和销毁的资源消耗\n   * 提高响应速度，当任务到达时，可以不用等待线程的创建就能立即执行\n * 控制最大并发数\n * 管理线程\n   * 提高线程的可管理性，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以统一的分配、调优和监控\n\n线程池类图：\n\n\n\nExecutors创建线程的三种方法：\n\n// 固定容量\nExecutorService threadPool = Executors.newFixedThreadPool(5);\n// 单例的、单个线程的线程池\nExecutorService threadPool = Executors.newSingleThreadExecutor(); \n// 缓存的 即超出就自动创建线程的\nExecutorService threadPool = Executors.newCachedThreadPool(); \t\n\n\nThreadPoolExecutor:\n\n/**\n *corePoolSize:指定了线程池中的核心线程数量，它的数量决定了添加的任务是开辟新的线程去执行，还是放到workQueue任务队列中去；\n\n *maximumPoolSize:指定了线程池中的最大线程数量，这个参数会根据你使用的workQueue任务队列的类型，决定线程池会开辟的最大线程数量；\n\n *keepAliveTime:当线程池中空闲线程数量超过corePoolSize时，多余的线程会在多长时间内被销毁；\n\n *unit:keepAliveTime的单位\n\n *workQueue:任务队列，被添加到线程池中，但尚未被执行的任务；它一般分为直接提交队列、有界任务队列、无界任务队列、优先任务队列几种；\n\n *threadFactory:线程工厂，用于创建线程，一般用默认即可；\n\n *handler:拒绝策略；当任务太多来不及处理时，如何拒绝任务；\n**/\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.acc = System.getSecurityManager() == null ?\n                null :\n                AccessController.getContext();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n\n\n拒绝策略\n\n一般我们创建线程池时，为防止资源被耗尽，任务队列都会选择创建有界任务队列，但种模式下如果出现任务队列已满且线程池创建的线程数达到你设置的最大线程数时，这时就需要你指定ThreadPoolExecutor的RejectedExecutionHandler参数即合理的拒绝策略，来处理线程池"超载"的情况。ThreadPoolExecutor自带的拒绝策略如下：\n\n1、AbortPolicy：该策略会直接抛出异常，阻止系统正常工作；\n\n2、CallerRunsPolicy：如果线程池的线程数量达到上限，该策略会把任务队列中的任务放在调用者线程当中运行；\n\n3、DiscardOldestPolicy：该策略会丢弃任务队列中最老的一个任务，也就是当前任务队列中最先被添加进去的，马上要被执行的那个 任务，并尝试再次提交；\n\n4、DiscardPolicy：该策略会默默丢弃无法处理的任务，不予任何处理。当然使用此策略，业务场景中需允许任务的丢失；\n\n线程池工作流程： 执行任务、放入队列，扩容线程，拒绝策略\n\n 1. 创建线程池后，开始等待请求任务\n 2. 当调用execute()方法添加一个任务时，线程池开始判断：\n    * 如果当前线程运行数量 < corePoolSize，立即创建一个核心线程执行当前任务\n    * 如果当前线程运行数量 >= corePoolSize,将任务放入workQueue\n    * 如果workQueue已经满了但是当前线程运行数量 < maximumPoolSize,立即创建一个非核心线程执行当前任务\n    * 如果workQueue已经满了且当前线程运行数量 >= maximumPoolSize,那么线程池会执行handler拒绝任务\n 3. 当一个线程执行完一个任务时，会从workQueue中取出一个任务执行\n 4. 当一个线程空闲时间 > keepAliveTime 时，线程池开始判断：\n    * 如果当前线程数量 > corePoolSize，销毁当前空闲线程\n    * 如果线程池完成所以任务后，销毁所有非核心线程，保持到corePoolSize数量',normalizedContent:'# 概念\n\n在高内聚低耦合的前提下，线程 操作（对外暴露的方法） 资源类\n\n/**\n * 资源类\n */\nclass phone {\n\t// 对外暴露的方法 sendemail\n    public synchronized void sendemail() {\n        try {\n            timeunit.seconds.sleep(2);\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        }\n        system.out.println("sendemail~~");\n    }\n    \n    // 对外暴露的方法 sendsms\n    public static synchronized void sendsms() {\n        system.out.println("sendsms~~");\n    }\n}\npublic class lock8 {\n\n    public static void main(string[] args) throws exception {\n        phone phone = new phone();\n\t\t// 线程1\n        new thread(phone::sendemail).start();\n\n        timeunit.milliseconds.sleep(1);\n\t\t// 线程2\n        new thread(phone::sendsms).start();\n    }\n}\n\n\n\n# 线程状态\n\n\t\t/**\n         * 新建\n         */\n        new,\n\n        /**\n         * 就绪、运行\n         */\n        runnable,\n\n        /**\n         * 阻塞\n         */\n        blocked,\n\n        /**\n         * 等待\n         * 不会被分配cpu执行时间，如果不被唤醒则会无限期等待\n         */\n        waiting,\n\n        /**\n         * 超时等待\n         * 不会被分配cpu执行时间，如果不被唤醒则时间到了会自动唤醒\n         */\n        timed_waiting,\n\n        /**\n         * 终止、销毁\n         */\n        terminated;\n\n\n\n\n\n# 线程间通信\n\n判断 干活 通知\n\n多线程交互必须防止多线程的虚假唤醒，即（判断只能用while不能用if）\n\nclass plusminus {\n    private int number = 0;\n    private lock lock = new reentrantlock();\n    private condition condition = lock.newcondition();\n\n    public void increment() {\n        lock.lock();\n        try {\n            // 1判断\n            while (number != 0) {\n                condition.await();\n            }\n            // 3干活\n            number++;\n            system.out.println(thread.currentthread().getname() + "\\t" + number);\n            // 3通知\n            condition.signalall();\n        } catch (exception e) {\n            e.printstacktrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void decrement() {\n        lock.lock();\n        try {\n            while (number == 0) {\n                condition.await();\n            }\n            number--;\n            system.out.println(thread.currentthread().getname() + "\\t" + number);\n            condition.signalall();\n        } catch (exception e) {\n            e.printstacktrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\npublic class threadnotifydemo {\n    public static void main(string[] args) {\n        plusminus plusminus = new plusminus();\n        new thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.increment();\n        }, "a").start();\n        new thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.decrement();\n        }, "b").start();\n        new thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.increment();\n        }, "c").start();\n        new thread(() -> {\n            for (int i = 0; i < 9; i++) plusminus.decrement();\n        }, "d").start();\n    }\n}\n\n\n\n# 多线程锁的机制\n\n一个资源类里面如果有多个synchronized方法，那么如果一个线程调用了当前锁对象this的其中一个synchronized方法了，那么就会锁住this对象的所有synchronized方法，其他线程就只能等待不能访问当前对象的其他synchronized方法。\n\n锁的表现形式：\n\n * 对于普通同步方法，锁是当前实例对象\n * 对于静态同步方法，锁是当前类的class对象\n * 对于同步方法块，锁是synchronized(...)里配置的对象\n\n说明：\n\n * 当一个线程试图访问同步代码块时，它必须先得到锁。退出或抛出异常时必须释放锁\n\n * 当一个实例对象的非静态同步方法取得锁后，该实例对象的其他非静态同步方法必须等待获取锁的方法释放锁后才能获取锁。其他实例对象的锁与该实例对象的锁不一样所以无须等待释放锁\n\n * 所有静态同步方法用的是同一把锁(类对象本身)。静态同步方法与非静态同步方法的锁是两个不同的对象所以不存在锁的竞争\n\n\n# arraylist线程不安全说明\n\n 1. 不安全场景\n    \n    在数据同时进行读写时会产生数据不一致\n    \n    public class notsafedemo {\n        public static void main(string[] args) {\n    \n            arraylist<string> list = new arraylist<>();\n            for (int i = 1; i <= 5; i++) {\n                new thread(() -> {\n                    list.add(uuid.randomuuid().tostring().substring(0,8));\n                    system.out.println(list);\n                },string.valueof(i)).start();\n    \n            }\n    \n        }\n    }\n    \n\n 2. 解决方法\n    \n    * vector\n    * collections.synchronizedlist()\n    * copyonwritearraylist\n\n 3. 说明\n    \n    copyonwritearraylist:\n    \n    copyonwritearraylist是一个在写时复制的容器。先将当前容器进行复制，再往新容器写入数据，写入完成后将原容器指向新容器。所以copyonwritearraylist实际采用了一种读写分离的思想，读和写分别在不同的容器中进行\n    \n    public boolean add(e e) {\n            final reentrantlock lock = this.lock;\n            lock.lock();\n            try {\n                object[] elements = getarray();\n                int len = elements.length;\n                object[] newelements = arrays.copyof(elements, len + 1);\n                newelements[len] = e;\n                setarray(newelements);\n                return true;\n            } finally {\n                lock.unlock();\n            }\n        }\n    \n\n\n# reentrantreadwritelock锁\n\nreentrantlock是一个排他锁，同一时间只允许一个线程访问，而reentrantreadwritelock允许多个读线程同时访问，但不允许写线程和读线程、写线程和写线程同时访问\n\nclass mycache {\n\n    private map<string,object> map = new hashmap<>();\n    private reentrantreadwritelock lock = new reentrantreadwritelock();\n\n    public void put(string key, string value) throws interruptedexception {\n        lock.writelock().lock();\n        try {\n            system.out.println(thread.currentthread().getname() + "\\t" + "开始写入数据");\n            timeunit.milliseconds.sleep(300);\n            map.put(key,value);\n            system.out.println(thread.currentthread().getname() + "\\t" + "写入数据完成");\n        } finally {\n            lock.writelock().unlock();\n        }\n    }\n\n    public void get(string key) throws interruptedexception {\n        lock.readlock().lock();\n        try {\n            system.out.println(thread.currentthread().getname() + "\\t" + "开始读取数据" + "\\t" + key);\n            timeunit.milliseconds.sleep(300);\n            system.out.println(thread.currentthread().getname() + "\\t" + "读取数据完成" + "\\t" +  map.get(key));\n        } finally {\n            lock.readlock().unlock();\n        }\n    }\n\n}\n\npublic class readwritelockdemo {\n    public static void main(string[] args) {\n        mycache mycache = new mycache();\n        for (int i = 1; i <= 5; i++) {\n            int tempint = i;\n            new thread(() -> {\n                try {\n                    mycache.put(tempint+"",tempint+"");\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n            },tempint+"").start();\n        }\n\n        for (int i = 1; i <= 5; i++) {\n            int tempint = i;\n            new thread(() -> {\n                try {\n                    mycache.get(tempint+"");\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n            },tempint+"").start();\n        }\n    }\n}\n\n\n\n# 阻塞队列\n\n当队列为空时，从队列中获取元素将阻塞。 当队列为满时，从队列中添加元素将阻塞。 因为是队列，所以我们理应想到先进先出。\n\n\n\n\n# 线程池\n\n线程池优势：\n\n线程池的任务只是控制运行的线程数量，处理过程中将任务放入队列，然后线程创建后启动这些任务，如果线程数量超过最大线程数，超出的线程将排队等候，等其他线程执行完任务，再从队列中取出任务执行\n\n特点：\n\n * 线程复用\n   * 降低资源消耗，通过重复利用已经创建的线程可以降低线程创建和销毁的资源消耗\n   * 提高响应速度，当任务到达时，可以不用等待线程的创建就能立即执行\n * 控制最大并发数\n * 管理线程\n   * 提高线程的可管理性，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以统一的分配、调优和监控\n\n线程池类图：\n\n\n\nexecutors创建线程的三种方法：\n\n// 固定容量\nexecutorservice threadpool = executors.newfixedthreadpool(5);\n// 单例的、单个线程的线程池\nexecutorservice threadpool = executors.newsinglethreadexecutor(); \n// 缓存的 即超出就自动创建线程的\nexecutorservice threadpool = executors.newcachedthreadpool(); \t\n\n\nthreadpoolexecutor:\n\n/**\n *corepoolsize:指定了线程池中的核心线程数量，它的数量决定了添加的任务是开辟新的线程去执行，还是放到workqueue任务队列中去；\n\n *maximumpoolsize:指定了线程池中的最大线程数量，这个参数会根据你使用的workqueue任务队列的类型，决定线程池会开辟的最大线程数量；\n\n *keepalivetime:当线程池中空闲线程数量超过corepoolsize时，多余的线程会在多长时间内被销毁；\n\n *unit:keepalivetime的单位\n\n *workqueue:任务队列，被添加到线程池中，但尚未被执行的任务；它一般分为直接提交队列、有界任务队列、无界任务队列、优先任务队列几种；\n\n *threadfactory:线程工厂，用于创建线程，一般用默认即可；\n\n *handler:拒绝策略；当任务太多来不及处理时，如何拒绝任务；\n**/\npublic threadpoolexecutor(int corepoolsize,\n                              int maximumpoolsize,\n                              long keepalivetime,\n                              timeunit unit,\n                              blockingqueue<runnable> workqueue,\n                              threadfactory threadfactory,\n                              rejectedexecutionhandler handler) {\n        if (corepoolsize < 0 ||\n            maximumpoolsize <= 0 ||\n            maximumpoolsize < corepoolsize ||\n            keepalivetime < 0)\n            throw new illegalargumentexception();\n        if (workqueue == null || threadfactory == null || handler == null)\n            throw new nullpointerexception();\n        this.acc = system.getsecuritymanager() == null ?\n                null :\n                accesscontroller.getcontext();\n        this.corepoolsize = corepoolsize;\n        this.maximumpoolsize = maximumpoolsize;\n        this.workqueue = workqueue;\n        this.keepalivetime = unit.tonanos(keepalivetime);\n        this.threadfactory = threadfactory;\n        this.handler = handler;\n    }\n\n\n拒绝策略\n\n一般我们创建线程池时，为防止资源被耗尽，任务队列都会选择创建有界任务队列，但种模式下如果出现任务队列已满且线程池创建的线程数达到你设置的最大线程数时，这时就需要你指定threadpoolexecutor的rejectedexecutionhandler参数即合理的拒绝策略，来处理线程池"超载"的情况。threadpoolexecutor自带的拒绝策略如下：\n\n1、abortpolicy：该策略会直接抛出异常，阻止系统正常工作；\n\n2、callerrunspolicy：如果线程池的线程数量达到上限，该策略会把任务队列中的任务放在调用者线程当中运行；\n\n3、discardoldestpolicy：该策略会丢弃任务队列中最老的一个任务，也就是当前任务队列中最先被添加进去的，马上要被执行的那个 任务，并尝试再次提交；\n\n4、discardpolicy：该策略会默默丢弃无法处理的任务，不予任何处理。当然使用此策略，业务场景中需允许任务的丢失；\n\n线程池工作流程： 执行任务、放入队列，扩容线程，拒绝策略\n\n 1. 创建线程池后，开始等待请求任务\n 2. 当调用execute()方法添加一个任务时，线程池开始判断：\n    * 如果当前线程运行数量 < corepoolsize，立即创建一个核心线程执行当前任务\n    * 如果当前线程运行数量 >= corepoolsize,将任务放入workqueue\n    * 如果workqueue已经满了但是当前线程运行数量 < maximumpoolsize,立即创建一个非核心线程执行当前任务\n    * 如果workqueue已经满了且当前线程运行数量 >= maximumpoolsize,那么线程池会执行handler拒绝任务\n 3. 当一个线程执行完一个任务时，会从workqueue中取出一个任务执行\n 4. 当一个线程空闲时间 > keepalivetime 时，线程池开始判断：\n    * 如果当前线程数量 > corepoolsize，销毁当前空闲线程\n    * 如果线程池完成所以任务后，销毁所有非核心线程，保持到corepoolsize数量',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"RabbitMQ",frontmatter:{title:"RabbitMQ",date:"2023-06-10T00:00:00.000Z",categories:["后端"],tags:["RabbitMQ"],"typora-root-url":"..\\\\..",permalink:"/pages/b4e263/"},regularPath:"/02.%E5%90%8E%E7%AB%AF/01.%E5%90%8E%E7%AB%AF/04.RabbitMQ.html",relativePath:"02.后端/01.后端/04.RabbitMQ.md",key:"v-77d1c232",path:"/pages/b4e263/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2},{level:3,title:"RabbitMQ安装",slug:"rabbitmq安装",normalizedTitle:"rabbitmq安装",charIndex:9},{level:3,title:"Web管理界面安装",slug:"web管理界面安装",normalizedTitle:"web管理界面安装",charIndex:681},{level:3,title:"登录",slug:"登录",normalizedTitle:"登录",charIndex:784},{level:3,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:1301},{level:2,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:2211},{level:3,title:"常见中间件",slug:"常见中间件",normalizedTitle:"常见中间件",charIndex:2310},{level:3,title:"应用场景",slug:"应用场景",normalizedTitle:"应用场景",charIndex:2320},{level:3,title:"使用劣势",slug:"使用劣势",normalizedTitle:"使用劣势",charIndex:2563},{level:3,title:"RabbitMQ流程",slug:"rabbitmq流程",normalizedTitle:"rabbitmq流程",charIndex:2761},{level:3,title:"工作模式",slug:"工作模式",normalizedTitle:"工作模式",charIndex:3627},{level:4,title:"简单模式",slug:"简单模式",normalizedTitle:"简单模式",charIndex:3635},{level:4,title:"工作队列模式",slug:"工作队列模式",normalizedTitle:"工作队列模式",charIndex:3677},{level:4,title:"发布订阅模式",slug:"发布订阅模式",normalizedTitle:"发布订阅模式",charIndex:3755},{level:4,title:"路由模式",slug:"路由模式",normalizedTitle:"路由模式",charIndex:3862},{level:4,title:"通配符模式",slug:"通配符模式",normalizedTitle:"通配符模式",charIndex:3971}],headersStr:"安装 RabbitMQ安装 Web管理界面安装 登录 命令 概念 常见中间件 应用场景 使用劣势 RabbitMQ流程 工作模式 简单模式 工作队列模式 发布订阅模式 路由模式 通配符模式",content:'# 安装\n\n\n# RabbitMQ安装\n\n官网下载地址：https://www.rabbitmq.com/download.html\n\n需要下载两个包\n\n> rabbitmq-server-3.8.8-1.el7.noarch.rpm\n> \n> erlang-21.3.8.21-1.el7.x86_64.rpm\n\n# 1.安装\nrpm -ivh erlang-21.3.8.21-1.el7.x86_64.rpm\nyum install socat -y\nrpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm\n# 2.启动\n# 启动服务\nsystemctl start rabbitmq-server\n# 查看服务状态\nsystemctl status rabbitmq-server\n# 开机自启动\nsystemctl enable rabbitmq-server\n# 停止服务\nsystemctl stop rabbitmq-server\n# 重启服务\nsystemctl restart rabbitmq-server\n# 3.开放端口\n# 如果防火墙是关闭状态需要开放 15672 和 5672 端口\nfirewall-cmd --list-ports\n# 添加\nfirewall-cmd --add-port=15672/tcp --permanent\nfirewall-cmd --add-port=5672/tcp --permanent\n# 载入\nfirewall-cmd --reload\n\n\n\n# Web管理界面安装\n\nrabbitmq-plugins enable rabbitmq_management\n# 安装完成重启\nsystemctl restart rabbitmq-server\n\n\n\n# 登录\n\nhttp://ip:15672 ,用默认账号密码(guest)登录，提示User can only log in via localhost,默认情况只能在 localhost 本机下访问,需要添加一个远程登录的用户\n\n# 创建账号和密码\nrabbitmqctl add_user admin 123456\n# 设置用户角色\nrabbitmqctl set_user_tags admin administrator\n# 为用户添加资源权限 set_permissions [-p <vhostpath>] <user> <conf> <write> <read>\n# 为admin添加配置、写、读权限\nrabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"\n\n\n用户级别：\n\n 1. administrator：可以登录控制台、查看所有信息、可以对 rabbitmq 进行管理\n 2. monitoring：监控者 登录控制台，查看所有信息\n 3. policymaker：策略制定者 登录控制台，指定策略\n 4. managment：普通管理员 登录控制台\n\n\n# 命令\n\n1.启动RabbitMQ和Erlang\n\nrabbitmq-server -detached\n\n该命令会同时启动rabbit应用程序和Erlang节点，如果MQ相关插件是开启状态\n\n2.停止RabbitMQ和Erlang\n\nrabbitmqctl stop\n\n用于停止RabbitMQ的Erlang虚拟机和RabbitMQ服务应用\n\n当使用该命令停止节点后，就必须使用rabbitmq-server -detached才能将我们的节点启动起来\n\n3.停止RabbitMQ应用\n\nrabbitmqctl stop_app\n\n停止rabbitmq服务应用，但是erlang虚拟机还是处于运行状态的\n\n4.启动RabbitMQ应用\n\nrabbitmqctl start_app\n\n所以该命令在使用rabbitmqctl stop_app时可以使用\n\n5.重置应用\n\n注：改命令需要在rabbitmqctl stop_app之后使用\n\nrabbitmqctl reset\n\n该命令会将rabbit节点重置还原到最初状态，包括从原来所在集群删除此节点，包括其所有配置数据(用户、vhost等)\n\n6.查看vhost列表\n\nrabbitmqctl list_vhosts\n\n7.查看节点状态\n\nrabbitmqctl status\n\n8.查看插件\n\nrabbitmq-plugins list\n\n9.开启rabbitmq web页面插件功能\n\nrabbitmq-plugins enable rabbitmq_management\n\n10.关闭rabbitmq web页面插件*功能*\n\nrabbitmq-plugins disable rabbitmq_management\n\n11.查看所有队列信息\n\nrabbitmqctl list_queues\n\n12.清除某个队列里的消息\n\nrabbitmqctl -p [vhostpath] purge_queue [queue_name]\n\n13.删除队列\n\nrabbitmqctl -p [vhostpath] delete_queue [queue_name]\n\n\n# 概念\n\nMQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。一般用来解决应用解耦，消息分发，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性架构。\n\n\n# 常见中间件\n\n\n# 应用场景\n\n * **异步解耦:**如果在进行一系列操作时其中某几步不需要同步进行可以选择发送消息给MQ进行异步操作\n\n * **削峰填谷:**如果某一刻访问量急速增加可能会导致系统崩溃，此时可以选择发送消息给MQ进行处理\n\n * **消息分发:**在实际开发中一个A系统的数据有的时候需要分发个不同的系统中，如果出现一个新的系统需要A系统数据那么则需要修改业务逻辑，此时可以选择将A系统消息数据发送给MQ，有需要的系统可以直接选择到MQ中获取，A系统则不需要关心消息分发给谁\n\n\n# 使用劣势\n\n * 系统可用性降低 系统引用的外部依赖越多，系统的稳定性就会越差，如果MQ中途宕机了则会对业务造成影响，需要保证MQ的高可用\n * 系统复杂度提高 之前是系统之间的调用现在则需要在中间由MQ进行调用，需要解决MQ的消息重复消费问题，消息丢失问题，消息传递的顺序性问题\n * 系统一致性问题 A系统通过MQ给BCD三个系统发送消息，如果BC成功D失败需要保证消息处理的一致性\n\n\n# RabbitMQ流程\n\nBroker：接收和分发消息的应用，RabbitMQ Server就是 Message Broker\n\nVirtual host：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网 络中的 namespace 概念。当多个不同的用户使用同一个RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等\n\nConnection：publisher／consumer 和 broker 之间的 TCP 连接\n\nChannel：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在connection 内部建立的逻辑连接，如果应用程序支持多线 程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销。\n\nExchange：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)\n\nQueue：消息最终被送到这里等待 consumer 取走\n\nBinding：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存 到 exchange 中的查询表中，用于 message 的分发依据\n\n\n# 工作模式\n\n# 简单模式\n\n一个生产者，一个消费者，使用默认的交换机，适用于一对一的消息传递\n\n# 工作队列模式\n\n有一个或多个生产者将任务发布到队列中，而多个消费者从队列中获取任务并进行处理。每个任务只能被一个消费者处理，确保任务的唯一性和可靠性\n\n# 发布订阅模式\n\n有一个或多个生产者将消息发布到交换机（Exchange）中，而多个消费者通过绑定队列（Queue）到交换机上来接收消息。交换机负责将消息广播给所有绑定的队列，每个消费者都会收到一份消息副本。\n\n# 路由模式\n\n有一个或多个生产者将消息发布到交换机（Exchange）中，而交换机根据消息的路由键将消息发送到特定的队列。消费者通过绑定队列到交换机上来接收消息，只有与绑定时指定的路由键匹配的消息才会被消费者接收\n\n# 通配符模式\n\n生产者将消息发布到交换机（Exchange）中，并且消息的路由键（Routing Key）是一个字符串，可以包含通配符。交换机根据消息的路由键将消息发送到与之匹配的队列。消费者通过绑定队列到交换机上来接收消息，只有与绑定时指定的路由键匹配的消息才会被消费者接收。\n\n在Topic模式中，路由键可以使用两种通配符：\n\n * *：匹配一个单词，例如topic.*可以匹配topic.a、topic.b等。\n * #：匹配零个或多个单词，例如topic.#可以匹配topic.a、topic.a.b、topic.a.b.c等。',normalizedContent:'# 安装\n\n\n# rabbitmq安装\n\n官网下载地址：https://www.rabbitmq.com/download.html\n\n需要下载两个包\n\n> rabbitmq-server-3.8.8-1.el7.noarch.rpm\n> \n> erlang-21.3.8.21-1.el7.x86_64.rpm\n\n# 1.安装\nrpm -ivh erlang-21.3.8.21-1.el7.x86_64.rpm\nyum install socat -y\nrpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm\n# 2.启动\n# 启动服务\nsystemctl start rabbitmq-server\n# 查看服务状态\nsystemctl status rabbitmq-server\n# 开机自启动\nsystemctl enable rabbitmq-server\n# 停止服务\nsystemctl stop rabbitmq-server\n# 重启服务\nsystemctl restart rabbitmq-server\n# 3.开放端口\n# 如果防火墙是关闭状态需要开放 15672 和 5672 端口\nfirewall-cmd --list-ports\n# 添加\nfirewall-cmd --add-port=15672/tcp --permanent\nfirewall-cmd --add-port=5672/tcp --permanent\n# 载入\nfirewall-cmd --reload\n\n\n\n# web管理界面安装\n\nrabbitmq-plugins enable rabbitmq_management\n# 安装完成重启\nsystemctl restart rabbitmq-server\n\n\n\n# 登录\n\nhttp://ip:15672 ,用默认账号密码(guest)登录，提示user can only log in via localhost,默认情况只能在 localhost 本机下访问,需要添加一个远程登录的用户\n\n# 创建账号和密码\nrabbitmqctl add_user admin 123456\n# 设置用户角色\nrabbitmqctl set_user_tags admin administrator\n# 为用户添加资源权限 set_permissions [-p <vhostpath>] <user> <conf> <write> <read>\n# 为admin添加配置、写、读权限\nrabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"\n\n\n用户级别：\n\n 1. administrator：可以登录控制台、查看所有信息、可以对 rabbitmq 进行管理\n 2. monitoring：监控者 登录控制台，查看所有信息\n 3. policymaker：策略制定者 登录控制台，指定策略\n 4. managment：普通管理员 登录控制台\n\n\n# 命令\n\n1.启动rabbitmq和erlang\n\nrabbitmq-server -detached\n\n该命令会同时启动rabbit应用程序和erlang节点，如果mq相关插件是开启状态\n\n2.停止rabbitmq和erlang\n\nrabbitmqctl stop\n\n用于停止rabbitmq的erlang虚拟机和rabbitmq服务应用\n\n当使用该命令停止节点后，就必须使用rabbitmq-server -detached才能将我们的节点启动起来\n\n3.停止rabbitmq应用\n\nrabbitmqctl stop_app\n\n停止rabbitmq服务应用，但是erlang虚拟机还是处于运行状态的\n\n4.启动rabbitmq应用\n\nrabbitmqctl start_app\n\n所以该命令在使用rabbitmqctl stop_app时可以使用\n\n5.重置应用\n\n注：改命令需要在rabbitmqctl stop_app之后使用\n\nrabbitmqctl reset\n\n该命令会将rabbit节点重置还原到最初状态，包括从原来所在集群删除此节点，包括其所有配置数据(用户、vhost等)\n\n6.查看vhost列表\n\nrabbitmqctl list_vhosts\n\n7.查看节点状态\n\nrabbitmqctl status\n\n8.查看插件\n\nrabbitmq-plugins list\n\n9.开启rabbitmq web页面插件功能\n\nrabbitmq-plugins enable rabbitmq_management\n\n10.关闭rabbitmq web页面插件*功能*\n\nrabbitmq-plugins disable rabbitmq_management\n\n11.查看所有队列信息\n\nrabbitmqctl list_queues\n\n12.清除某个队列里的消息\n\nrabbitmqctl -p [vhostpath] purge_queue [queue_name]\n\n13.删除队列\n\nrabbitmqctl -p [vhostpath] delete_queue [queue_name]\n\n\n# 概念\n\nmq（message queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。一般用来解决应用解耦，消息分发，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性架构。\n\n\n# 常见中间件\n\n\n# 应用场景\n\n * **异步解耦:**如果在进行一系列操作时其中某几步不需要同步进行可以选择发送消息给mq进行异步操作\n\n * **削峰填谷:**如果某一刻访问量急速增加可能会导致系统崩溃，此时可以选择发送消息给mq进行处理\n\n * **消息分发:**在实际开发中一个a系统的数据有的时候需要分发个不同的系统中，如果出现一个新的系统需要a系统数据那么则需要修改业务逻辑，此时可以选择将a系统消息数据发送给mq，有需要的系统可以直接选择到mq中获取，a系统则不需要关心消息分发给谁\n\n\n# 使用劣势\n\n * 系统可用性降低 系统引用的外部依赖越多，系统的稳定性就会越差，如果mq中途宕机了则会对业务造成影响，需要保证mq的高可用\n * 系统复杂度提高 之前是系统之间的调用现在则需要在中间由mq进行调用，需要解决mq的消息重复消费问题，消息丢失问题，消息传递的顺序性问题\n * 系统一致性问题 a系统通过mq给bcd三个系统发送消息，如果bc成功d失败需要保证消息处理的一致性\n\n\n# rabbitmq流程\n\nbroker：接收和分发消息的应用，rabbitmq server就是 message broker\n\nvirtual host：出于多租户和安全因素设计的，把 amqp 的基本组件划分到一个虚拟的分组中，类似于网 络中的 namespace 概念。当多个不同的用户使用同一个rabbitmq server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等\n\nconnection：publisher／consumer 和 broker 之间的 tcp 连接\n\nchannel：如果每一次访问 rabbitmq 都建立一个 connection，在消息量大的时候建立 tcp connection 的开销将是巨大的，效率也较低。channel 是在connection 内部建立的逻辑连接，如果应用程序支持多线 程，通常每个thread创建单独的 channel 进行通讯，amqp method 包含了channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。channel 作为轻量级的 connection 极大减少了操作系统建立 tcp connection 的开销。\n\nexchange：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)\n\nqueue：消息最终被送到这里等待 consumer 取走\n\nbinding：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。binding 信息被保存 到 exchange 中的查询表中，用于 message 的分发依据\n\n\n# 工作模式\n\n# 简单模式\n\n一个生产者，一个消费者，使用默认的交换机，适用于一对一的消息传递\n\n# 工作队列模式\n\n有一个或多个生产者将任务发布到队列中，而多个消费者从队列中获取任务并进行处理。每个任务只能被一个消费者处理，确保任务的唯一性和可靠性\n\n# 发布订阅模式\n\n有一个或多个生产者将消息发布到交换机（exchange）中，而多个消费者通过绑定队列（queue）到交换机上来接收消息。交换机负责将消息广播给所有绑定的队列，每个消费者都会收到一份消息副本。\n\n# 路由模式\n\n有一个或多个生产者将消息发布到交换机（exchange）中，而交换机根据消息的路由键将消息发送到特定的队列。消费者通过绑定队列到交换机上来接收消息，只有与绑定时指定的路由键匹配的消息才会被消费者接收\n\n# 通配符模式\n\n生产者将消息发布到交换机（exchange）中，并且消息的路由键（routing key）是一个字符串，可以包含通配符。交换机根据消息的路由键将消息发送到与之匹配的队列。消费者通过绑定队列到交换机上来接收消息，只有与绑定时指定的路由键匹配的消息才会被消费者接收。\n\n在topic模式中，路由键可以使用两种通配符：\n\n * *：匹配一个单词，例如topic.*可以匹配topic.a、topic.b等。\n * #：匹配零个或多个单词，例如topic.#可以匹配topic.a、topic.a.b、topic.a.b.c等。',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-e9727f68",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"designPattern",frontmatter:{title:"designPattern",date:"2021-12-22T00:00:00.000Z",categories:["后端"],"typora-root-url":"..\\\\..",permalink:"/pages/42d66a/"},regularPath:"/02.%E5%90%8E%E7%AB%AF/01.%E5%90%8E%E7%AB%AF/01.design.html",relativePath:"02.后端/01.后端/01.design.md",key:"v-83343272",path:"/pages/42d66a/",headers:[{level:2,title:"一、初识",slug:"一、初识",normalizedTitle:"一、初识",charIndex:2},{level:2,title:"二、 创建型模式",slug:"二、-创建型模式",normalizedTitle:"二、 创建型模式",charIndex:837},{level:3,title:"工厂方法模式",slug:"工厂方法模式",normalizedTitle:"工厂方法模式",charIndex:883},{level:4,title:"适用场景",slug:"适用场景",normalizedTitle:"适用场景",charIndex:929},{level:3,title:"抽象工厂模式",slug:"抽象工厂模式",normalizedTitle:"抽象工厂模式",charIndex:1060},{level:4,title:"适用场景",slug:"适用场景-2",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"建造者模式",slug:"建造者模式",normalizedTitle:"建造者模式",charIndex:1357},{level:4,title:"优点",slug:"优点-2",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-2",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"原型模式",slug:"原型模式",normalizedTitle:"原型模式",charIndex:1517},{level:4,title:"适用场景",slug:"适用场景-3",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"实现方式",slug:"实现方式",normalizedTitle:"实现方式",charIndex:1646},{level:4,title:"优点",slug:"优点-3",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-3",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"单例模式",slug:"单例模式",normalizedTitle:"单例模式",charIndex:1871},{level:4,title:"适用场景",slug:"适用场景-4",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"优点",slug:"优点-4",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-4",normalizedTitle:"缺点",charIndex:1310},{level:2,title:"三、 结构性模式",slug:"三、-结构性模式",normalizedTitle:"三、 结构性模式",charIndex:2529},{level:3,title:"适配器模式",slug:"适配器模式",normalizedTitle:"适配器模式",charIndex:2575},{level:4,title:"适用场景",slug:"适用场景-5",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"优点",slug:"优点-5",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-5",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"桥接模式",slug:"桥接模式",normalizedTitle:"桥接模式",charIndex:2939},{level:4,title:"适用场景",slug:"适用场景-6",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"优点",slug:"优点-6",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-6",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"组合模式",slug:"组合模式",normalizedTitle:"组合模式",charIndex:3313},{level:4,title:"适用场景",slug:"适用场景-7",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"实现方式",slug:"实现方式-2",normalizedTitle:"实现方式",charIndex:1646},{level:4,title:"UML",slug:"uml-2",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-7",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-7",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"装饰器模式",slug:"装饰器模式",normalizedTitle:"装饰器模式",charIndex:4536},{level:4,title:"适用场景",slug:"适用场景-8",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-3",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-8",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-8",normalizedTitle:"缺点",charIndex:1310},{level:4,title:"外观模式",slug:"外观模式",normalizedTitle:"外观模式",charIndex:5639},{level:4,title:"适用场景",slug:"适用场景-9",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"实现方式",slug:"实现方式-3",normalizedTitle:"实现方式",charIndex:1646},{level:4,title:"优点",slug:"优点-9",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-9",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"亨元模式",slug:"亨元模式",normalizedTitle:"亨元模式",charIndex:6065},{level:4,title:"适用场景",slug:"适用场景-10",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"优点",slug:"优点-10",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-10",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"代理模式",slug:"代理模式",normalizedTitle:"代理模式",charIndex:6358},{level:4,title:"适用场景",slug:"适用场景-11",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"实现方式",slug:"实现方式-4",normalizedTitle:"实现方式",charIndex:1646},{level:4,title:"UML",slug:"uml-4",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-11",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-11",normalizedTitle:"缺点",charIndex:1310},{level:2,title:"四、行为模式",slug:"四、行为模式",normalizedTitle:"四、行为模式",charIndex:8733},{level:3,title:"责任链模式",slug:"责任链模式",normalizedTitle:"责任链模式",charIndex:8764},{level:4,title:"适用场景",slug:"适用场景-12",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-5",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-12",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-12",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"命令模式",slug:"命令模式",normalizedTitle:"命令模式",charIndex:9510},{level:4,title:"实现方式",slug:"实现方式-5",normalizedTitle:"实现方式",charIndex:1646},{level:4,title:"优点",slug:"优点-13",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-13",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"迭代器模式",slug:"迭代器模式",normalizedTitle:"迭代器模式",charIndex:10060},{level:4,title:"优点",slug:"优点-14",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-14",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"中介者模式",slug:"中介者模式",normalizedTitle:"中介者模式",charIndex:10320},{level:4,title:"适用场景",slug:"适用场景-13",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-6",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-15",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-15",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"备忘录模式",slug:"备忘录模式",normalizedTitle:"备忘录模式",charIndex:11077},{level:4,title:"适用场景",slug:"适用场景-14",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-7",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-16",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-16",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"观察者模式",slug:"观察者模式",normalizedTitle:"观察者模式",charIndex:12140},{level:4,title:"适用场景",slug:"适用场景-15",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-8",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-17",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-17",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"状态模式",slug:"状态模式",normalizedTitle:"状态模式",charIndex:12817},{level:4,title:"适用场景",slug:"适用场景-16",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-9",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-18",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-18",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"策略模式",slug:"策略模式",normalizedTitle:"策略模式",charIndex:12866},{level:4,title:"适用场景",slug:"适用场景-17",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-10",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-19",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-19",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"模板方法模式",slug:"模板方法模式",normalizedTitle:"模板方法模式",charIndex:14237},{level:4,title:"适用场景",slug:"适用场景-18",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-11",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-20",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-20",normalizedTitle:"缺点",charIndex:1310},{level:3,title:"访问者模式",slug:"访问者模式",normalizedTitle:"访问者模式",charIndex:14764},{level:4,title:"适用场景",slug:"适用场景-19",normalizedTitle:"适用场景",charIndex:929},{level:4,title:"UML",slug:"uml-12",normalizedTitle:"uml",charIndex:1198},{level:4,title:"优点",slug:"优点-21",normalizedTitle:"优点",charIndex:1207},{level:4,title:"缺点",slug:"缺点-21",normalizedTitle:"缺点",charIndex:1310}],headersStr:"一、初识 二、 创建型模式 工厂方法模式 适用场景 抽象工厂模式 适用场景 UML 优点 缺点 建造者模式 优点 缺点 原型模式 适用场景 实现方式 优点 缺点 单例模式 适用场景 优点 缺点 三、 结构性模式 适配器模式 适用场景 优点 缺点 桥接模式 适用场景 优点 缺点 组合模式 适用场景 实现方式 UML 优点 缺点 装饰器模式 适用场景 UML 优点 缺点 外观模式 适用场景 实现方式 优点 缺点 亨元模式 适用场景 优点 缺点 代理模式 适用场景 实现方式 UML 优点 缺点 四、行为模式 责任链模式 适用场景 UML 优点 缺点 命令模式 实现方式 优点 缺点 迭代器模式 优点 缺点 中介者模式 适用场景 UML 优点 缺点 备忘录模式 适用场景 UML 优点 缺点 观察者模式 适用场景 UML 优点 缺点 状态模式 适用场景 UML 优点 缺点 策略模式 适用场景 UML 优点 缺点 模板方法模式 适用场景 UML 优点 缺点 访问者模式 适用场景 UML 优点 缺点",content:'# 一、初识\n\n 1. 设计原则\n    \n    * 找出应用中可能需要变化的地方，独立出来不与不需要变化的代码混在一起\n    \n    * 针对**’接口’**编程，不针对实现\n      \n      classDiagram\n         \t  Animal <|-- Dog\n            Animal <|-- Cat\n            Animal : +makeSound()\n            class Dog{\n                +makeSound()\n                +bark()\n            }\n            class Cat{\n                +makeSound()\n                +meow()\n            }\n      \n      \n      // 针对实现编程：\n      Dog d = new dog();\n      d.bark();\n      // 针对接口编程\n      Animal animal = new Dog();\n      animal.makeSound();\n      \n    \n    * 多用组合，少用继承\n      \n      * 将两个类结合起来使用就是组合\n    \n    * 为了交互对象之间的松耦合设计而努力\n\n 2. 六大原则\n    \n    * 单一职责原则：一个类应该只有一个变化的原因\n    * 开闭原则：类、函数等对于扩展是开放的，但对于修改应该是关闭的\n    * 里氏替换原则：继承必须确保超类所拥有的性质在子类中依然成立\n    * 迪米特法则：降低类之间的耦合，相互之间减少依赖关系\n    * 接口隔离原则：将大接口拆分为更小更具体的接口，让接口中只包含子类感兴趣的方法\n    * 依赖倒置原则：抽象编程\n\n\n# 二、 创建型模式\n\n简介：提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性\n\n\n# 工厂方法模式\n\n简介：在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型\n\n# 适用场景\n\n * 当你在编写代码的过程中，如果无法预知对象确切类别及其依赖关系时，可使用工厂方法\n * 如果你希望用户能扩展你软件库或框架的内部组件，可使用工厂方法\n * 如果你希望复用现有对象来节省系统资源，而不是每次都重新创建对象， 可使用工厂方法\n\n\n# 抽象工厂模式\n\n简介：创建一系列相关的对象， 而无需指定其具体类\n\n# 适用场景\n\n * 如果代码需要与多个不同系列的相关产品交互， 但是由于无法提前获取相关信息，或者出于对未来扩展性的考虑， 你不希望代码基于产品的具体类进行构建， 在这种情况下， 你可以使用抽象工厂\n\n# UML\n\n\n\n# 优点\n\n * 可以避免客户端和具体产品代码的耦合\n * 单一职责原则。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护\n * 开闭原则。 向应用程序中引入新产品变体时， 你无需修改客户端代码\n\n# 缺点\n\n * 由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂\n\n\n# 建造者模式\n\n简介：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示\n\n# 优点\n\n * 生成不同形式的产品时， 你可以复用相同的制造代码\n * 单一职责原则。 你可以将复杂构造代码从产品的业务逻辑中分离出来\n\n# 缺点\n\n * 由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加\n\n\n# 原型模式\n\n简介：复制或克隆一个已有对象，而又无需使你的代码依赖这个对象所属的类\n\n注意：引用类型数据的复制要基于 深拷贝 ，否则会影响到被拷贝的 原型\n\n# 适用场景\n\n * 需要复制一个对象，而又不希望改变原有对象的时候可以考虑使用原型模式来实现\n\n# 实现方式\n\n 1. 创建原型接口， 并在其中声明 克隆方法。\n 2. 原型类必须另行定义一个以该类对象为参数的构造函数。 构造函数必须复制参数对象中的所有成员变量值到新建实体中。 如果你需要修改子类， 则必须调用父类构造函数， 让父类复制其私有成员变量值\n\n# 优点\n\n * 你可以克隆预生成原型， 避免反复运行初始化代码\n * 你可以克隆对象， 而无需与它们所属的具体类相耦合\n\n# 缺点\n\n * 克隆包含循环引用的复杂对象可能会非常麻烦\n\n\n# 单例模式\n\n简介：保证一个类只有一个实例， 并提供一个访问该实例的全局节点\n\n# 适用场景\n\n * 如果程序中的某个类对于所有客户端只有一个可用的实例，可以使用单例模式\n\n * 如果你需要更加严格地控制全局变量，可以使用单例模式\n\npublic class Singleton {\n\n    private static volatile Singleton SINGLETON;\n\n    private Singleton() {\n\n    }\n\n    public static Singleton getInstance() {\n        if (SINGLETON == null) {\n            synchronized (Singleton.class) {\n                if (SINGLETON == null) {\n                    SINGLETON = new Singleton();\n                }\n            }\n        }\n        return SINGLETON;\n    }\n\n\n}\n\n\n# 优点\n\n * 可以保证一个类只有一个实例\n * 仅在首次请求单例对象时对其进行初始化\n\n# 缺点\n\n * 单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多\n * 违反了单一职责原则\n * 该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象\n\n\n# 三、 结构性模式\n\n简介：将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效\n\n\n# 适配器模式\n\n简介：使接口不兼容的对象能够相互合作\n\n当一个方法的入参是一个对象，而返回值是另一个对象时，这个方法就是一个适配器模式\n\n# 适用场景\n\n * 当你希望使用某个类， 但是其接口与其他代码不兼容时， 可以使用适配器类\n * 需要复用这样一些类， 他们处于同一个继承体系， 并且他们又有了额外的一些共同的方法， 但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性\n\n# 优点\n\n * 单一职责原则。你可以将接口或数据转换代码从程序主要业务逻辑中分离\n * 开闭原则。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器\n\n# 缺点\n\n * 代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单\n\n\n# 桥接模式\n\n简介：将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用\n\n# 适用场景\n\n * 如果你想要拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类）， 可以使用桥接模式\n * 如果你希望在几个独立维度上扩展一个类， 可使用该模式\n * 如果你需要在运行时切换不同实现方法，可使用桥接模式\n\n# 优点\n\n * 将一个具有多重功能的系统进行解耦，拆分成相互独立的层次，从而提高系统的可扩展性\n * 开闭原则，不管新增控制层或实现层的代码都可以很容易实现，而且它们不会相互影响\n * 单一原则，控制层专注于控制层的逻辑处理，实现层专注于实现层的逻辑处理业务系统在调用时只与控制层交互，不用关心实现层的具体逻辑\n\n# 缺点\n\n * 对高内聚的类使用该模式可能会让代码更加复杂\n\n\n# 组合模式\n\n简介：你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们\n\n# 适用场景\n\n * 如果你需要实现树状对象结构， 可以使用组合模式\n * 如果你希望客户端代码以相同方式处理简单和复杂元素， 可以使用该模式\n\n# 实现方式\n\n 1. 定义一个接口，并在接口中定义要实现的功能\n 2. 叶子节点实现这个接口，并重写接口中的方法\n 3. 树枝节点中有一个集合或者数组，可以对接口对象进行管理。同时，树枝节点还要实现这个接口，在重写接口的方法时可以循环集合或数组得到接口对象，并对其进行调用\n\n# UML\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n\n        Employee employeeA = new Employee(24);\n        Employee employeeB = new Employee(25);\n        Employee employeeC = new Employee(22);\n        Employee employeeD = new Employee(20);\n\n        Department department1 = new Department();\n        Department department2 = new Department();\n        Department department3 = new Department();\n        department1.add(employeeA);\n        department1.add(employeeB);\n        department2.add(employeeC);\n        department2.add(department3);\n        department3.add(employeeD);\n\n        System.out.println("部门1员工总年龄:"+ department1.getAge());// 49\n        System.out.println("部门2员工总年龄:"+ department2.getAge());// 42\n        System.out.println("部门3员工总年龄:"+ department3.getAge());// 20\n    }\n}\n\n\n# 优点\n\n * 你可以利用多态和递归机制更方便地使用复杂树结构\n * 开闭原则。 无需更改现有代码， 你就可以在应用中添加新元素， 使其成为对象树的一部分\n\n# 缺点\n\n * 对于功能差异较大的类， 提供公共接口或许会有困难。 在特定情况下， 你需要过度一般化组件接口， 使其变得令人难以理解\n\n\n# 装饰器模式\n\n简介：通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为\n\n# 适用场景\n\n * 如果你希望在无需修改代码的情况下即可使用对象， 且希望在运行时为对象新增额外的行为\n * 如果用继承来扩展对象行为的方案难以实现或者根本不可行， 你可以使用该模式\n\n# UML\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n        OriginalText originalText = new OriginalText();\n        originalText.setText("hello");\n        System.out.println(originalText.getText());\n       \n        // span装饰\n        SpanDecorator spanDecorator = new SpanDecorator();\n        // 设置需要装饰的对象\n        spanDecorator.setDecorator(originalText);\n        // 开始装饰\n        spanDecorator.BeginDecorator();\n        System.out.println(originalText.getText());\n        \n        // 加粗装饰\n        BoldDecorator boldDecorator = new BoldDecorator();\n        boldDecorator.setDecorator(originalText);\n        boldDecorator.BeginDecorator();\n        System.out.println(originalText.getText());\n\n    }\n}\n/*\nhello\n<span>hello</span>\n<b><span>hello</span></b>\n*/\n\n\n# 优点\n\n * 你无需创建新子类即可扩展对象的行为\n * 你可以在运行时添加或删除对象的功能\n * 你可以用多个装饰封装对象来组合几种行为\n * 单一职责原则。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类\n\n# 缺点\n\n * 在封装器栈中删除特定封装器比较困难\n * 实现行为不受装饰栈顺序影响的装饰比较困难\n * 各层的初始化配置代码看上去可能会很糟糕\n\n# 外观模式\n\n简介：几个方法中共用的逻辑抽象成一个独立的方法，那么这个方法就可以理解成外观模式\n\n# 适用场景\n\n * 当调用者需要调用多个子系统来完成自己的逻辑时，可以考虑使用外观模式\n   \n   比如日志处理框架 SLF4J，它对调用者提供接口。logback、log4j等各种日志框架作为子系统去实现这些接口\n\n * 需要为一个复杂的子系统提供一系列逻辑支持的时候，可以考虑使用外观模式\n\n# 实现方式\n\n 1. 抽象各个子系统的业务逻辑\n 2. 将抽象过的业务逻辑封装到门面类中\n 3. 调用者使用门面类中的方法完成自己的逻辑\n\n# 优点\n\n * 各个子系统提供统一的入口，调用者使用起来很简单\n * 各个子系统和调用者解耦，扩展性会更好。比如，想要增加一个子系统时，只需要按照外观模式的规范进行开发，调用者和外观类都不用修改\n\n# 缺点\n\n * 如果设计不合理，增加新的子系统时可能需要修改外观类或调用者的源代码，违背了_开闭原则_\n\n\n# 亨元模式\n\n简介：摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象\n\n在享元模式中，可以被共享的成员变量称为内在状态；不能被共享的成员变量称为外在状态\n\n# 适用场景\n\n * 仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式\n\n# 优点\n\n * 如果程序中有很多相似对象， 那么你将可以节省大量内存\n\n# 缺点\n\n * 你可能需要牺牲执行速度来换取内存， 因为他人每次调用享元方法时都需要重新计算部分情景数据\n * 代码会变得更加复杂。 团队中的新成员总是会问： “为什么要像这样拆分一个实体的状态？”\n\n\n# 代理模式\n\n简介：提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理\n\n# 适用场景\n\n * 需要在原有功能的前后添加自定义业务逻辑时\n * 在需要对已有功能增加业务逻辑，而又无法拿到源码时可以考虑使用代理模式\n * 在需要对一个很重的对象进行生命周期管理时，可以使用代理模式，比如数据库对象、Spring容器对象\n\n# 实现方式\n\n * 静态代理\n   \n   1. 新建一个代理类实现接口，并把接口作为代理类的成员变量\n   2. 在代理类中提供一个带参数的构造器，并对成员变量进行初始化\n   3. 重写接口类的方法，添加自定义业务逻辑，并通过成员变量调用父类的方法\n\n * JDK动态代理\n   \n   1. 新建一个代理类接口\n   \n   2. 新建一个代理类并实现InvocationHandler接口\n   \n   3. // WeChatPay为被代理类 Payment为代理类接口 xxxProxyHandle为代理类\n      WeChatPay weChatPay = new WeChatPay();\n              // 先记录日志后校验密码\n              Payment payment = (Payment) Proxy.newProxyInstance(WeChatPay.class.getClassLoader(), new Class[]{Payment.class}, new PwdCheckProxyHandle(weChatPay));\n              Payment payment1 = (Payment) Proxy.newProxyInstance(WeChatPay.class.getClassLoader(), new Class[]{Payment.class}, new LogProxyHandle(payment));\n              payment1.pay();\n              System.out.println("------------------");\n              // 先校验密码后记录日志\n              Payment payment2 = (Payment) Proxy.newProxyInstance(WeChatPay.class.getClassLoader(), new Class[]{Payment.class}, new LogProxyHandle(weChatPay));\n              Payment payment3 = (Payment) Proxy.newProxyInstance(WeChatPay.class.getClassLoader(), new Class[]{Payment.class}, new PwdCheckProxyHandle(payment2));\n              payment3.pay();\n      \n\n * CGLIB动态代理\n   \n   1. 查找目标类上的所有非final 的public类型的方法定义\n   \n   2. 将这些方法的定义转换成字节码\n   \n   3. 将组成的字节码转换成相应的代理的class对象\n   \n   4. 实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求\n   \n   5. Enhancer enhancer = new Enhancer();\n      enhancer.setSuperclass(WeChatPay.class);\n      enhancer.setCallback(new LogInterceptor());\n      WeChatPay o = (WeChatPay)enhancer.create();\n      \n\n# UML\n\n * 静态代理\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n        WeChatPay weChatPay = new WeChatPay();\n        LogPayment logPayment = new LogPayment();\n        PwdCheck pwdCheck = new PwdCheck();\n        // 先记录日志后校验密码\n        logPayment.setProxy(pwdCheck);\n        pwdCheck.setProxy(weChatPay);\n        logPayment.pay();\n        System.out.println("------------------");\n        \n        // 先校验密码后记录日志\n        pwdCheck.setProxy(logPayment);\n        logPayment.setProxy(weChatPay);\n        pwdCheck.pay();\n    }\n}\n\n\n# 优点\n\n * 可以在调用原对象的前后，添加自定义的业务逻辑\n * 降低耦合度，代理模式把原对象和调用者解耦， 使原对象更加专注自己本身的业务逻辑，非自身的逻辑可以交给代理对象处理\n\n# 缺点\n\n * 增加了代理类，方法调用链路变长，会增加响应时间\n * 代码结构会变得相对复杂，增加理解成本\n\n\n# 四、行为模式\n\n简介：负责对象间的⾼效沟通和职责委派\n\n\n# 责任链模式\n\n简介：请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者\n\n# 适用场景\n\n * 当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时，可以使用责任链模式\n * 当必须按顺序执行多个处理者时， 可以使用该模式\n * 如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式\n\n# UML\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n        Request request = new Request();\n        request.frequentOk = true;\n        request.loggedOn = false;\n\n        Handle handle = new RequestFrequentHandle(new LoginHandle(null));\n        boolean process = handle.process(request);\n        if (process) {\n            System.out.println("登录成功");\n        }\n        System.out.println("登录失败");\n    }\n}\n/**\n访问频率正常\n未登录\n登录失败\n*/\n\n\n# 优点\n\n * 可以控制请求处理的顺序\n * 单一职责原则。 你可对发起操作和执行操作的类进行解耦\n * 开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者\n\n# 缺点\n\n * 部分请求可能未被处理\n\n\n# 命令模式\n\n简介：将请求转换为一个包含与请求相关的所有信息的独立对象。 该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中， 且能实现可撤销操作\n\n# 实现方式\n\n 1. 声明仅有一个执行方法的命令接口。\n 2. 抽取请求并使之成为实现命令接口的具体命令类。 每个类都必须有一组成员变量来保存请求参数和对于实际接收者对象的引用。 所有这些变量的数值都必须通过命令构造函数进行初始化。\n 3. 找到担任发送者职责的类。 在这些类中添加保存命令的成员变量。 发送者只能通过命令接口与其命令进行交互。 发送者自身通常并不创建命令对象， 而是通过客户端代码获取。\n 4. 修改发送者使其执行命令， 而非直接将请求发送给接收者。\n 5. 客户端必须按照以下顺序来初始化对象：\n    * 创建接收者。\n    * 创建命令， 如有需要可将其关联至接收者。\n    * 创建发送者并将其与特定命令关联\n\n# 优点\n\n * 单一职责原则。 你可以解耦触发和执行操作的类\n * 开闭原则。 你可以在不修改已有客户端代码的情况下在程序中创建新的命令\n * 你可以将一组简单命令组合成一个复杂命令\n\n# 缺点\n\n * 代码可能会变得更加复杂， 因为你在发送者和接收者之间增加了一个全新的层次\n\n\n# 迭代器模式\n\n简介：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示\n\n# 优点\n\n * 单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 你可对客户端代码和集合进行整理\n * 开闭原则。 你可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码\n * 你可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态\n\n# 缺点\n\n * 如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正\n * 对于某些特殊集合， 使用迭代器可能比直接遍历的效率低\n\n\n# 中介者模式\n\n简介：减少对象之间混乱无序的依赖关系。 该模式会限制对象之间的直接交互， 迫使它们通过一个中介者对象进行合作\n\n# 适用场景\n\n * 当一些对象和其他对象紧密耦合以致难以对其进行修改时\n * 当组件因过于依赖其他组件而无法在不同应用中复用时\n * 如果为了能在不同情景下复用一些基本行为， 导致你需要被迫创建大量组件子类时\n\n# UML\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n        Mediator md = new ConcreteMediator();\n        Colleague c1, c2;\n        c1 = new ConcreteColleague1();\n        c2 = new ConcreteColleague2();\n        md.register(c1);\n        md.register(c2);\n        c1.send();\n        System.out.println("-------------");\n        c2.send();\n    }\n}\n/*\n具体同事类1发出请求。\n具体同事类2收到请求。\n-------------\n具体同事类2发出请求。\n具体同事类1收到请求。\n*/\n\n\n# 优点\n\n * 单一职责原则。 你可以将多个组件间的交流抽取到同一位置， 使其更易于理解和维护\n * 开闭原则。 你无需修改实际组件就能增加新的中介者\n * 你可以更方便地复用各个组件\n * 你可以减轻应用中多个组件间的耦合情况\n\n# 缺点\n\n * 一段时间后， 中介者可能会演化成为上帝对象\n\n\n# 备忘录模式\n\n简介：允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态\n\n# 适用场景\n\n * 当你需要创建对象状态快照来恢复其之前的状态时\n * 当直接访问对象的成员变量将导致封装被突破时\n\n# UML\n\n\n\n * Originator(发起人)：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复状态。Originator可根据需求决定Memento存储Originator的哪些内部状态。\n\n * Memento(备忘录)：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问备忘录Memento。备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到先前状态所需的所有数据。\n\n * Caretaker(管理者)：负责保存好备忘录Memento，不能对备忘录的内容进行操作或检查。\n\npublic class Test {\n    public static void main(String[] args) {\n        // 初始\n        Originator originator = new Originator();\n        originator.setState("On");\n        originator.show();// state = On\n\n        // 备份\n        Caretaker caretaker = new Caretaker();\n        caretaker.setMemento(originator.createMemento());\n\n        originator.setState("Off");\n        originator.show();// state = Off\n\n        // 恢复\n        originator.setMemento(caretaker.getMemento());\n        originator.show();// state = On\n    }\n}\n\n\n# 优点\n\n * 你可以在不破坏对象封装情况的前提下创建对象状态快照\n\n# 缺点\n\n * 如果客户端过于频繁地创建备忘录， 程序将消耗大量内存\n * 负责人必须完整跟踪原发器的生命周期， 这样才能销毁弃用的备忘录\n\n\n# 观察者模式\n\n简介：定义了对象之间的一对多的依赖，当一个对象改变状态，所以依赖者都会收到通知并更新\n\n# 适用场景\n\n * 当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式\n\n * 当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用\n\n# UML\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n        Subject subject = new Subject();\n        subject.addObserver(new Observer1());\n        subject.addObserver(new Observer2());\n        subject.publish();\n        // 发布者事件改变后\n        System.out.println("-----------------------");\n        subject.a = "vvv";\n        subject.publish();\n    }\n}\n/**\n观察者1开始做事\n观察者2开始做事\n-----------------------\n观察者1开始做事\n*/\n\n\n# 优点\n\n * 开闭原则。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）\n\n# 缺点\n\n * 订阅者的通知顺序是随机的\n\n\n# 状态模式\n\n简介：在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样\n\n策略模式与状态模式区别：\n\n * 策略模式，将不同的算法封装成不同的策略，然后在具体的策略中实现具体的行为，但是测试本身是被动被选择的，容器选择策略，调用过程发生在容器中，策略本身是入参；\n\n * 状态模式，将不同状态对应的行为封装，然后由具体的状态操作容器，整个过程更像是状态主动发起的，由状态执行其自己的方法，入参是容器\n\n# 适用场景\n\n * 行为随状态改变而改变的场景\n\n# UML\n\n\n\n# 优点\n\n * 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为\n * 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n\n# 缺点\n\n * 状态模式的使用必然会增加系统类和对象的个数\n * 状态模式对"开闭原则"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码\n\n\n# 策略模式\n\n简介：定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为策略的独立类\n\n# 适用场景\n\n * 当你想使用对象中各种不同的算法变体，并希望能在运行时切换算法时，可使用策略模式\n * 当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式\n\n# UML\n\n\n\npublic class Test {\n\n    public static void main(String[] args) {\n        Random random = new Random();\n        int i = random.nextInt(3);\n        int a = 10;\n        int b = 5;\n        Context context = new Context();\n\t\t\n        // 根据不同值选择不同策略\n        if (i == 0) {\n            context.setStrategy(new ConcreteStrategyAdd());\n        } else if (i == 1) {\n            context.setStrategy(new ConcreteStrategySubtract());\n        } else if (i ==2) {\n            context.setStrategy((v1,v2) -> v1 * v2);\n        }\n\n        int result = context.executeStrategy(a, b);\n        System.out.println(result);\n    }\n}\n\n\n# 优点\n\n * 可以使用组合来代替继承\n * 开闭原则。 你无需对上下文进行修改就能够引入新的策略\n\n# 缺点\n\n * 客户端必须知晓策略间的不同——它需要选择合适的策略\n * 如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂\n\n\n# 模板方法模式\n\n简介：超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤\n\n# 适用场景\n\n * 当你只希望客户端扩展某个特定算法步骤， 而不是整个算法或其结构时，可使用模板方法模式\n\n# UML\n\n\n\npublic class Test {\n    public static void main(String[] args) {\n        Template template = new A();\n        template.execute(template);\n        System.out.println("----------");\n        template = new B();\n        template.execute(template);\n    }\n}\n/**\nA执行步骤1\nA执行步骤2\n----------\nB执行步骤1\nB执行步骤2\n*/\n\n\n# 优点\n\n * 你可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小\n * 你可将重复代码提取到一个超类中\n\n# 缺点\n\n * 模板方法中的步骤越多， 其维护工作就可能会越困难\n\n\n# 访问者模式\n\n简介：将算法与其所作用的对象隔离开来\n\n与策略模式区别：\n\n * 策略模式于一个类，在运行时的不同情况执行不同策略，一对多\n\n * 访问者模式关注的是多个类，不同访问者访问这些类的时候会有不同的操作。多对多\n\n# 适用场景\n\n * 可使用访问者模式来清理辅助行为的业务逻辑\n * 类结构固定时\n\n# UML\n\n\n\n * **Visitor：**接口或者抽象类，定义了对每个 Element 访问的行为，它的参数就是被访问的元素，它的方法个数理论上与元素的个数是一样的，因此，访问者模式要求元素的类型要稳定，如果经常添加、移除元素类，必然会导致频繁地修改 Visitor 接口，如果出现这种情况，则说明不适合使用访问者模式。\n\n * **ConcreteVisitor：**具体的访问者，它需要给出对每一个元素类访问时所产生的具体行为。\n\n * **ComputerPart：**元素接口或者抽象类，它定义了一个接受访问者（accept）的方法，其意义是指每一个元素都要可以被访问者访问。\n\n * **Keyboard、CPU：**具体的元素类，它提供接受访问的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。\n\npublic class Test {\n\n    public static void main(String[] args) {\n        CPU cpu = new CPU();\n        cpu.price = new BigDecimal("300");\n        Keyboard keyboard = new Keyboard();\n        keyboard.price  = new BigDecimal("100");\n\n        StudentVisitor studentVisitor = new StudentVisitor();\n        CompanyVisitor companyVisitor = new CompanyVisitor();\n\t\t\n        // 7折\n        cpu.accept(studentVisitor);\n        // 8折\n        keyboard.accept(studentVisitor);\n        System.out.println("学生的CPU折后价格: " + cpu.price);// 学生的CPU折后价格: 210.0\n        System.out.println("学生的键盘折后价格: " + keyboard.price);// 学生的键盘折后价格: 80.0\n\n        cpu.price = new BigDecimal("300");\n        keyboard.price  = new BigDecimal("100");\n        // 半价\n        cpu.accept(companyVisitor);\n        // 半价\n        keyboard.accept(companyVisitor);\n        System.out.println("企业的CPU折后价格: " + cpu.price);// 企业的CPU折后价格: 150.0\n        System.out.println("企业的键盘折后价格: "+ keyboard.price);// 企业的键盘折后价格: 50.0\n    }\n}\n\n\n# 优点\n\n * 开闭原则。 你可以引入在不同类对象上执行的新行为， 且无需对这些类做出修改\n * 单一职责原则。 可将同一行为的不同版本移到同一个类中\n\n# 缺点\n\n * 每次在元素层次结构中添加或移除一个类时， 你都要更新所有的访问者\n * 在访问者同某个元素进行交互时， 它们可能没有访问元素私有成员变量和方法的必要权限',normalizedContent:'# 一、初识\n\n 1. 设计原则\n    \n    * 找出应用中可能需要变化的地方，独立出来不与不需要变化的代码混在一起\n    \n    * 针对**’接口’**编程，不针对实现\n      \n      classdiagram\n         \t  animal <|-- dog\n            animal <|-- cat\n            animal : +makesound()\n            class dog{\n                +makesound()\n                +bark()\n            }\n            class cat{\n                +makesound()\n                +meow()\n            }\n      \n      \n      // 针对实现编程：\n      dog d = new dog();\n      d.bark();\n      // 针对接口编程\n      animal animal = new dog();\n      animal.makesound();\n      \n    \n    * 多用组合，少用继承\n      \n      * 将两个类结合起来使用就是组合\n    \n    * 为了交互对象之间的松耦合设计而努力\n\n 2. 六大原则\n    \n    * 单一职责原则：一个类应该只有一个变化的原因\n    * 开闭原则：类、函数等对于扩展是开放的，但对于修改应该是关闭的\n    * 里氏替换原则：继承必须确保超类所拥有的性质在子类中依然成立\n    * 迪米特法则：降低类之间的耦合，相互之间减少依赖关系\n    * 接口隔离原则：将大接口拆分为更小更具体的接口，让接口中只包含子类感兴趣的方法\n    * 依赖倒置原则：抽象编程\n\n\n# 二、 创建型模式\n\n简介：提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性\n\n\n# 工厂方法模式\n\n简介：在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型\n\n# 适用场景\n\n * 当你在编写代码的过程中，如果无法预知对象确切类别及其依赖关系时，可使用工厂方法\n * 如果你希望用户能扩展你软件库或框架的内部组件，可使用工厂方法\n * 如果你希望复用现有对象来节省系统资源，而不是每次都重新创建对象， 可使用工厂方法\n\n\n# 抽象工厂模式\n\n简介：创建一系列相关的对象， 而无需指定其具体类\n\n# 适用场景\n\n * 如果代码需要与多个不同系列的相关产品交互， 但是由于无法提前获取相关信息，或者出于对未来扩展性的考虑， 你不希望代码基于产品的具体类进行构建， 在这种情况下， 你可以使用抽象工厂\n\n# uml\n\n\n\n# 优点\n\n * 可以避免客户端和具体产品代码的耦合\n * 单一职责原则。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护\n * 开闭原则。 向应用程序中引入新产品变体时， 你无需修改客户端代码\n\n# 缺点\n\n * 由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂\n\n\n# 建造者模式\n\n简介：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示\n\n# 优点\n\n * 生成不同形式的产品时， 你可以复用相同的制造代码\n * 单一职责原则。 你可以将复杂构造代码从产品的业务逻辑中分离出来\n\n# 缺点\n\n * 由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加\n\n\n# 原型模式\n\n简介：复制或克隆一个已有对象，而又无需使你的代码依赖这个对象所属的类\n\n注意：引用类型数据的复制要基于 深拷贝 ，否则会影响到被拷贝的 原型\n\n# 适用场景\n\n * 需要复制一个对象，而又不希望改变原有对象的时候可以考虑使用原型模式来实现\n\n# 实现方式\n\n 1. 创建原型接口， 并在其中声明 克隆方法。\n 2. 原型类必须另行定义一个以该类对象为参数的构造函数。 构造函数必须复制参数对象中的所有成员变量值到新建实体中。 如果你需要修改子类， 则必须调用父类构造函数， 让父类复制其私有成员变量值\n\n# 优点\n\n * 你可以克隆预生成原型， 避免反复运行初始化代码\n * 你可以克隆对象， 而无需与它们所属的具体类相耦合\n\n# 缺点\n\n * 克隆包含循环引用的复杂对象可能会非常麻烦\n\n\n# 单例模式\n\n简介：保证一个类只有一个实例， 并提供一个访问该实例的全局节点\n\n# 适用场景\n\n * 如果程序中的某个类对于所有客户端只有一个可用的实例，可以使用单例模式\n\n * 如果你需要更加严格地控制全局变量，可以使用单例模式\n\npublic class singleton {\n\n    private static volatile singleton singleton;\n\n    private singleton() {\n\n    }\n\n    public static singleton getinstance() {\n        if (singleton == null) {\n            synchronized (singleton.class) {\n                if (singleton == null) {\n                    singleton = new singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n\n\n}\n\n\n# 优点\n\n * 可以保证一个类只有一个实例\n * 仅在首次请求单例对象时对其进行初始化\n\n# 缺点\n\n * 单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多\n * 违反了单一职责原则\n * 该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象\n\n\n# 三、 结构性模式\n\n简介：将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效\n\n\n# 适配器模式\n\n简介：使接口不兼容的对象能够相互合作\n\n当一个方法的入参是一个对象，而返回值是另一个对象时，这个方法就是一个适配器模式\n\n# 适用场景\n\n * 当你希望使用某个类， 但是其接口与其他代码不兼容时， 可以使用适配器类\n * 需要复用这样一些类， 他们处于同一个继承体系， 并且他们又有了额外的一些共同的方法， 但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性\n\n# 优点\n\n * 单一职责原则。你可以将接口或数据转换代码从程序主要业务逻辑中分离\n * 开闭原则。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器\n\n# 缺点\n\n * 代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单\n\n\n# 桥接模式\n\n简介：将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用\n\n# 适用场景\n\n * 如果你想要拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类）， 可以使用桥接模式\n * 如果你希望在几个独立维度上扩展一个类， 可使用该模式\n * 如果你需要在运行时切换不同实现方法，可使用桥接模式\n\n# 优点\n\n * 将一个具有多重功能的系统进行解耦，拆分成相互独立的层次，从而提高系统的可扩展性\n * 开闭原则，不管新增控制层或实现层的代码都可以很容易实现，而且它们不会相互影响\n * 单一原则，控制层专注于控制层的逻辑处理，实现层专注于实现层的逻辑处理业务系统在调用时只与控制层交互，不用关心实现层的具体逻辑\n\n# 缺点\n\n * 对高内聚的类使用该模式可能会让代码更加复杂\n\n\n# 组合模式\n\n简介：你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们\n\n# 适用场景\n\n * 如果你需要实现树状对象结构， 可以使用组合模式\n * 如果你希望客户端代码以相同方式处理简单和复杂元素， 可以使用该模式\n\n# 实现方式\n\n 1. 定义一个接口，并在接口中定义要实现的功能\n 2. 叶子节点实现这个接口，并重写接口中的方法\n 3. 树枝节点中有一个集合或者数组，可以对接口对象进行管理。同时，树枝节点还要实现这个接口，在重写接口的方法时可以循环集合或数组得到接口对象，并对其进行调用\n\n# uml\n\n\n\npublic class test {\n    public static void main(string[] args) {\n\n        employee employeea = new employee(24);\n        employee employeeb = new employee(25);\n        employee employeec = new employee(22);\n        employee employeed = new employee(20);\n\n        department department1 = new department();\n        department department2 = new department();\n        department department3 = new department();\n        department1.add(employeea);\n        department1.add(employeeb);\n        department2.add(employeec);\n        department2.add(department3);\n        department3.add(employeed);\n\n        system.out.println("部门1员工总年龄:"+ department1.getage());// 49\n        system.out.println("部门2员工总年龄:"+ department2.getage());// 42\n        system.out.println("部门3员工总年龄:"+ department3.getage());// 20\n    }\n}\n\n\n# 优点\n\n * 你可以利用多态和递归机制更方便地使用复杂树结构\n * 开闭原则。 无需更改现有代码， 你就可以在应用中添加新元素， 使其成为对象树的一部分\n\n# 缺点\n\n * 对于功能差异较大的类， 提供公共接口或许会有困难。 在特定情况下， 你需要过度一般化组件接口， 使其变得令人难以理解\n\n\n# 装饰器模式\n\n简介：通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为\n\n# 适用场景\n\n * 如果你希望在无需修改代码的情况下即可使用对象， 且希望在运行时为对象新增额外的行为\n * 如果用继承来扩展对象行为的方案难以实现或者根本不可行， 你可以使用该模式\n\n# uml\n\n\n\npublic class test {\n    public static void main(string[] args) {\n        originaltext originaltext = new originaltext();\n        originaltext.settext("hello");\n        system.out.println(originaltext.gettext());\n       \n        // span装饰\n        spandecorator spandecorator = new spandecorator();\n        // 设置需要装饰的对象\n        spandecorator.setdecorator(originaltext);\n        // 开始装饰\n        spandecorator.begindecorator();\n        system.out.println(originaltext.gettext());\n        \n        // 加粗装饰\n        bolddecorator bolddecorator = new bolddecorator();\n        bolddecorator.setdecorator(originaltext);\n        bolddecorator.begindecorator();\n        system.out.println(originaltext.gettext());\n\n    }\n}\n/*\nhello\n<span>hello</span>\n<b><span>hello</span></b>\n*/\n\n\n# 优点\n\n * 你无需创建新子类即可扩展对象的行为\n * 你可以在运行时添加或删除对象的功能\n * 你可以用多个装饰封装对象来组合几种行为\n * 单一职责原则。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类\n\n# 缺点\n\n * 在封装器栈中删除特定封装器比较困难\n * 实现行为不受装饰栈顺序影响的装饰比较困难\n * 各层的初始化配置代码看上去可能会很糟糕\n\n# 外观模式\n\n简介：几个方法中共用的逻辑抽象成一个独立的方法，那么这个方法就可以理解成外观模式\n\n# 适用场景\n\n * 当调用者需要调用多个子系统来完成自己的逻辑时，可以考虑使用外观模式\n   \n   比如日志处理框架 slf4j，它对调用者提供接口。logback、log4j等各种日志框架作为子系统去实现这些接口\n\n * 需要为一个复杂的子系统提供一系列逻辑支持的时候，可以考虑使用外观模式\n\n# 实现方式\n\n 1. 抽象各个子系统的业务逻辑\n 2. 将抽象过的业务逻辑封装到门面类中\n 3. 调用者使用门面类中的方法完成自己的逻辑\n\n# 优点\n\n * 各个子系统提供统一的入口，调用者使用起来很简单\n * 各个子系统和调用者解耦，扩展性会更好。比如，想要增加一个子系统时，只需要按照外观模式的规范进行开发，调用者和外观类都不用修改\n\n# 缺点\n\n * 如果设计不合理，增加新的子系统时可能需要修改外观类或调用者的源代码，违背了_开闭原则_\n\n\n# 亨元模式\n\n简介：摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象\n\n在享元模式中，可以被共享的成员变量称为内在状态；不能被共享的成员变量称为外在状态\n\n# 适用场景\n\n * 仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式\n\n# 优点\n\n * 如果程序中有很多相似对象， 那么你将可以节省大量内存\n\n# 缺点\n\n * 你可能需要牺牲执行速度来换取内存， 因为他人每次调用享元方法时都需要重新计算部分情景数据\n * 代码会变得更加复杂。 团队中的新成员总是会问： “为什么要像这样拆分一个实体的状态？”\n\n\n# 代理模式\n\n简介：提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理\n\n# 适用场景\n\n * 需要在原有功能的前后添加自定义业务逻辑时\n * 在需要对已有功能增加业务逻辑，而又无法拿到源码时可以考虑使用代理模式\n * 在需要对一个很重的对象进行生命周期管理时，可以使用代理模式，比如数据库对象、spring容器对象\n\n# 实现方式\n\n * 静态代理\n   \n   1. 新建一个代理类实现接口，并把接口作为代理类的成员变量\n   2. 在代理类中提供一个带参数的构造器，并对成员变量进行初始化\n   3. 重写接口类的方法，添加自定义业务逻辑，并通过成员变量调用父类的方法\n\n * jdk动态代理\n   \n   1. 新建一个代理类接口\n   \n   2. 新建一个代理类并实现invocationhandler接口\n   \n   3. // wechatpay为被代理类 payment为代理类接口 xxxproxyhandle为代理类\n      wechatpay wechatpay = new wechatpay();\n              // 先记录日志后校验密码\n              payment payment = (payment) proxy.newproxyinstance(wechatpay.class.getclassloader(), new class[]{payment.class}, new pwdcheckproxyhandle(wechatpay));\n              payment payment1 = (payment) proxy.newproxyinstance(wechatpay.class.getclassloader(), new class[]{payment.class}, new logproxyhandle(payment));\n              payment1.pay();\n              system.out.println("------------------");\n              // 先校验密码后记录日志\n              payment payment2 = (payment) proxy.newproxyinstance(wechatpay.class.getclassloader(), new class[]{payment.class}, new logproxyhandle(wechatpay));\n              payment payment3 = (payment) proxy.newproxyinstance(wechatpay.class.getclassloader(), new class[]{payment.class}, new pwdcheckproxyhandle(payment2));\n              payment3.pay();\n      \n\n * cglib动态代理\n   \n   1. 查找目标类上的所有非final 的public类型的方法定义\n   \n   2. 将这些方法的定义转换成字节码\n   \n   3. 将组成的字节码转换成相应的代理的class对象\n   \n   4. 实现 methodinterceptor接口，用来处理对代理类上所有方法的请求\n   \n   5. enhancer enhancer = new enhancer();\n      enhancer.setsuperclass(wechatpay.class);\n      enhancer.setcallback(new loginterceptor());\n      wechatpay o = (wechatpay)enhancer.create();\n      \n\n# uml\n\n * 静态代理\n\n\n\npublic class test {\n    public static void main(string[] args) {\n        wechatpay wechatpay = new wechatpay();\n        logpayment logpayment = new logpayment();\n        pwdcheck pwdcheck = new pwdcheck();\n        // 先记录日志后校验密码\n        logpayment.setproxy(pwdcheck);\n        pwdcheck.setproxy(wechatpay);\n        logpayment.pay();\n        system.out.println("------------------");\n        \n        // 先校验密码后记录日志\n        pwdcheck.setproxy(logpayment);\n        logpayment.setproxy(wechatpay);\n        pwdcheck.pay();\n    }\n}\n\n\n# 优点\n\n * 可以在调用原对象的前后，添加自定义的业务逻辑\n * 降低耦合度，代理模式把原对象和调用者解耦， 使原对象更加专注自己本身的业务逻辑，非自身的逻辑可以交给代理对象处理\n\n# 缺点\n\n * 增加了代理类，方法调用链路变长，会增加响应时间\n * 代码结构会变得相对复杂，增加理解成本\n\n\n# 四、行为模式\n\n简介：负责对象间的⾼效沟通和职责委派\n\n\n# 责任链模式\n\n简介：请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者\n\n# 适用场景\n\n * 当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时，可以使用责任链模式\n * 当必须按顺序执行多个处理者时， 可以使用该模式\n * 如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式\n\n# uml\n\n\n\npublic class test {\n    public static void main(string[] args) {\n        request request = new request();\n        request.frequentok = true;\n        request.loggedon = false;\n\n        handle handle = new requestfrequenthandle(new loginhandle(null));\n        boolean process = handle.process(request);\n        if (process) {\n            system.out.println("登录成功");\n        }\n        system.out.println("登录失败");\n    }\n}\n/**\n访问频率正常\n未登录\n登录失败\n*/\n\n\n# 优点\n\n * 可以控制请求处理的顺序\n * 单一职责原则。 你可对发起操作和执行操作的类进行解耦\n * 开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者\n\n# 缺点\n\n * 部分请求可能未被处理\n\n\n# 命令模式\n\n简介：将请求转换为一个包含与请求相关的所有信息的独立对象。 该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中， 且能实现可撤销操作\n\n# 实现方式\n\n 1. 声明仅有一个执行方法的命令接口。\n 2. 抽取请求并使之成为实现命令接口的具体命令类。 每个类都必须有一组成员变量来保存请求参数和对于实际接收者对象的引用。 所有这些变量的数值都必须通过命令构造函数进行初始化。\n 3. 找到担任发送者职责的类。 在这些类中添加保存命令的成员变量。 发送者只能通过命令接口与其命令进行交互。 发送者自身通常并不创建命令对象， 而是通过客户端代码获取。\n 4. 修改发送者使其执行命令， 而非直接将请求发送给接收者。\n 5. 客户端必须按照以下顺序来初始化对象：\n    * 创建接收者。\n    * 创建命令， 如有需要可将其关联至接收者。\n    * 创建发送者并将其与特定命令关联\n\n# 优点\n\n * 单一职责原则。 你可以解耦触发和执行操作的类\n * 开闭原则。 你可以在不修改已有客户端代码的情况下在程序中创建新的命令\n * 你可以将一组简单命令组合成一个复杂命令\n\n# 缺点\n\n * 代码可能会变得更加复杂， 因为你在发送者和接收者之间增加了一个全新的层次\n\n\n# 迭代器模式\n\n简介：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示\n\n# 优点\n\n * 单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 你可对客户端代码和集合进行整理\n * 开闭原则。 你可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码\n * 你可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态\n\n# 缺点\n\n * 如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正\n * 对于某些特殊集合， 使用迭代器可能比直接遍历的效率低\n\n\n# 中介者模式\n\n简介：减少对象之间混乱无序的依赖关系。 该模式会限制对象之间的直接交互， 迫使它们通过一个中介者对象进行合作\n\n# 适用场景\n\n * 当一些对象和其他对象紧密耦合以致难以对其进行修改时\n * 当组件因过于依赖其他组件而无法在不同应用中复用时\n * 如果为了能在不同情景下复用一些基本行为， 导致你需要被迫创建大量组件子类时\n\n# uml\n\n\n\npublic class test {\n    public static void main(string[] args) {\n        mediator md = new concretemediator();\n        colleague c1, c2;\n        c1 = new concretecolleague1();\n        c2 = new concretecolleague2();\n        md.register(c1);\n        md.register(c2);\n        c1.send();\n        system.out.println("-------------");\n        c2.send();\n    }\n}\n/*\n具体同事类1发出请求。\n具体同事类2收到请求。\n-------------\n具体同事类2发出请求。\n具体同事类1收到请求。\n*/\n\n\n# 优点\n\n * 单一职责原则。 你可以将多个组件间的交流抽取到同一位置， 使其更易于理解和维护\n * 开闭原则。 你无需修改实际组件就能增加新的中介者\n * 你可以更方便地复用各个组件\n * 你可以减轻应用中多个组件间的耦合情况\n\n# 缺点\n\n * 一段时间后， 中介者可能会演化成为上帝对象\n\n\n# 备忘录模式\n\n简介：允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态\n\n# 适用场景\n\n * 当你需要创建对象状态快照来恢复其之前的状态时\n * 当直接访问对象的成员变量将导致封装被突破时\n\n# uml\n\n\n\n * originator(发起人)：负责创建一个备忘录memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复状态。originator可根据需求决定memento存储originator的哪些内部状态。\n\n * memento(备忘录)：负责存储originator对象的内部状态，并可防止originator以外的其他对象访问备忘录memento。备忘录有两个接口，caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。originator能够看到一个宽接口，允许它访问返回到先前状态所需的所有数据。\n\n * caretaker(管理者)：负责保存好备忘录memento，不能对备忘录的内容进行操作或检查。\n\npublic class test {\n    public static void main(string[] args) {\n        // 初始\n        originator originator = new originator();\n        originator.setstate("on");\n        originator.show();// state = on\n\n        // 备份\n        caretaker caretaker = new caretaker();\n        caretaker.setmemento(originator.creatememento());\n\n        originator.setstate("off");\n        originator.show();// state = off\n\n        // 恢复\n        originator.setmemento(caretaker.getmemento());\n        originator.show();// state = on\n    }\n}\n\n\n# 优点\n\n * 你可以在不破坏对象封装情况的前提下创建对象状态快照\n\n# 缺点\n\n * 如果客户端过于频繁地创建备忘录， 程序将消耗大量内存\n * 负责人必须完整跟踪原发器的生命周期， 这样才能销毁弃用的备忘录\n\n\n# 观察者模式\n\n简介：定义了对象之间的一对多的依赖，当一个对象改变状态，所以依赖者都会收到通知并更新\n\n# 适用场景\n\n * 当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式\n\n * 当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用\n\n# uml\n\n\n\npublic class test {\n    public static void main(string[] args) {\n        subject subject = new subject();\n        subject.addobserver(new observer1());\n        subject.addobserver(new observer2());\n        subject.publish();\n        // 发布者事件改变后\n        system.out.println("-----------------------");\n        subject.a = "vvv";\n        subject.publish();\n    }\n}\n/**\n观察者1开始做事\n观察者2开始做事\n-----------------------\n观察者1开始做事\n*/\n\n\n# 优点\n\n * 开闭原则。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）\n\n# 缺点\n\n * 订阅者的通知顺序是随机的\n\n\n# 状态模式\n\n简介：在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样\n\n策略模式与状态模式区别：\n\n * 策略模式，将不同的算法封装成不同的策略，然后在具体的策略中实现具体的行为，但是测试本身是被动被选择的，容器选择策略，调用过程发生在容器中，策略本身是入参；\n\n * 状态模式，将不同状态对应的行为封装，然后由具体的状态操作容器，整个过程更像是状态主动发起的，由状态执行其自己的方法，入参是容器\n\n# 适用场景\n\n * 行为随状态改变而改变的场景\n\n# uml\n\n\n\n# 优点\n\n * 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为\n * 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n\n# 缺点\n\n * 状态模式的使用必然会增加系统类和对象的个数\n * 状态模式对"开闭原则"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码\n\n\n# 策略模式\n\n简介：定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为策略的独立类\n\n# 适用场景\n\n * 当你想使用对象中各种不同的算法变体，并希望能在运行时切换算法时，可使用策略模式\n * 当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式\n\n# uml\n\n\n\npublic class test {\n\n    public static void main(string[] args) {\n        random random = new random();\n        int i = random.nextint(3);\n        int a = 10;\n        int b = 5;\n        context context = new context();\n\t\t\n        // 根据不同值选择不同策略\n        if (i == 0) {\n            context.setstrategy(new concretestrategyadd());\n        } else if (i == 1) {\n            context.setstrategy(new concretestrategysubtract());\n        } else if (i ==2) {\n            context.setstrategy((v1,v2) -> v1 * v2);\n        }\n\n        int result = context.executestrategy(a, b);\n        system.out.println(result);\n    }\n}\n\n\n# 优点\n\n * 可以使用组合来代替继承\n * 开闭原则。 你无需对上下文进行修改就能够引入新的策略\n\n# 缺点\n\n * 客户端必须知晓策略间的不同——它需要选择合适的策略\n * 如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂\n\n\n# 模板方法模式\n\n简介：超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤\n\n# 适用场景\n\n * 当你只希望客户端扩展某个特定算法步骤， 而不是整个算法或其结构时，可使用模板方法模式\n\n# uml\n\n\n\npublic class test {\n    public static void main(string[] args) {\n        template template = new a();\n        template.execute(template);\n        system.out.println("----------");\n        template = new b();\n        template.execute(template);\n    }\n}\n/**\na执行步骤1\na执行步骤2\n----------\nb执行步骤1\nb执行步骤2\n*/\n\n\n# 优点\n\n * 你可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小\n * 你可将重复代码提取到一个超类中\n\n# 缺点\n\n * 模板方法中的步骤越多， 其维护工作就可能会越困难\n\n\n# 访问者模式\n\n简介：将算法与其所作用的对象隔离开来\n\n与策略模式区别：\n\n * 策略模式于一个类，在运行时的不同情况执行不同策略，一对多\n\n * 访问者模式关注的是多个类，不同访问者访问这些类的时候会有不同的操作。多对多\n\n# 适用场景\n\n * 可使用访问者模式来清理辅助行为的业务逻辑\n * 类结构固定时\n\n# uml\n\n\n\n * **visitor：**接口或者抽象类，定义了对每个 element 访问的行为，它的参数就是被访问的元素，它的方法个数理论上与元素的个数是一样的，因此，访问者模式要求元素的类型要稳定，如果经常添加、移除元素类，必然会导致频繁地修改 visitor 接口，如果出现这种情况，则说明不适合使用访问者模式。\n\n * **concretevisitor：**具体的访问者，它需要给出对每一个元素类访问时所产生的具体行为。\n\n * **computerpart：**元素接口或者抽象类，它定义了一个接受访问者（accept）的方法，其意义是指每一个元素都要可以被访问者访问。\n\n * **keyboard、cpu：**具体的元素类，它提供接受访问的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。\n\npublic class test {\n\n    public static void main(string[] args) {\n        cpu cpu = new cpu();\n        cpu.price = new bigdecimal("300");\n        keyboard keyboard = new keyboard();\n        keyboard.price  = new bigdecimal("100");\n\n        studentvisitor studentvisitor = new studentvisitor();\n        companyvisitor companyvisitor = new companyvisitor();\n\t\t\n        // 7折\n        cpu.accept(studentvisitor);\n        // 8折\n        keyboard.accept(studentvisitor);\n        system.out.println("学生的cpu折后价格: " + cpu.price);// 学生的cpu折后价格: 210.0\n        system.out.println("学生的键盘折后价格: " + keyboard.price);// 学生的键盘折后价格: 80.0\n\n        cpu.price = new bigdecimal("300");\n        keyboard.price  = new bigdecimal("100");\n        // 半价\n        cpu.accept(companyvisitor);\n        // 半价\n        keyboard.accept(companyvisitor);\n        system.out.println("企业的cpu折后价格: " + cpu.price);// 企业的cpu折后价格: 150.0\n        system.out.println("企业的键盘折后价格: "+ keyboard.price);// 企业的键盘折后价格: 50.0\n    }\n}\n\n\n# 优点\n\n * 开闭原则。 你可以引入在不同类对象上执行的新行为， 且无需对这些类做出修改\n * 单一职责原则。 可将同一行为的不同版本移到同一个类中\n\n# 缺点\n\n * 每次在元素层次结构中添加或移除一个类时， 你都要更新所有的访问者\n * 在访问者同某个元素进行交互时， 它们可能没有访问元素私有成员变量和方法的必要权限',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"自用工具类",frontmatter:{title:"自用工具类",date:"2023-06-07T08:00:00.000Z",categories:["tool"],tags:["tool"],permalink:"/pages/4c6801/"},regularPath:"/05.%E5%B7%A5%E5%85%B7/01.%E5%B7%A5%E5%85%B7/02.util.html",relativePath:"05.工具/01.工具/02.util.md",key:"v-19ba87d7",path:"/pages/4c6801/",headers:[{level:2,title:"JAVA",slug:"java",normalizedTitle:"java",charIndex:2},{level:3,title:"TreeNode",slug:"treenode",normalizedTitle:"treenode",charIndex:11},{level:3,title:"MyBatisLog",slug:"mybatislog",normalizedTitle:"mybatislog",charIndex:2917},{level:3,title:"TemplateProcess",slug:"templateprocess",normalizedTitle:"templateprocess",charIndex:7445},{level:3,title:"ValidationExceptionHandler",slug:"validationexceptionhandler",normalizedTitle:"validationexceptionhandler",charIndex:8713},{level:3,title:"EasyExcel",slug:"easyexcel",normalizedTitle:"easyexcel",charIndex:10396},{level:3,title:"CustomApplicationContextInitializer",slug:"customapplicationcontextinitializer",normalizedTitle:"customapplicationcontextinitializer",charIndex:14594},{level:2,title:"LINUX",slug:"linux",normalizedTitle:"linux",charIndex:16550},{level:3,title:"ClearCatalinaLog",slug:"clearcatalinalog",normalizedTitle:"clearcatalinalog",charIndex:16560},{level:3,title:"TomcatDeploy",slug:"tomcatdeploy",normalizedTitle:"tomcatdeploy",charIndex:17037}],headersStr:"JAVA TreeNode MyBatisLog TemplateProcess ValidationExceptionHandler EasyExcel CustomApplicationContextInitializer LINUX ClearCatalinaLog TomcatDeploy",content:'# JAVA\n\n\n# TreeNode\n\n/**\n *\n * @author ：jiangmh\n * @create ：Created in 2023/6/17 7:04\n **/\npublic class NodeTreeUtils {\n    private static final String PARENT_ID_ROOT = "0";\n\n    /**\n     * 将所有数据按节点ID存进map\n     * @author J-Ming\n     * @date 2023/6/17 6:50\n     * @param allCosts 待转换为树形的数据，拥有节点nodeId、parentId以及存放子节点信息的List<CostInfo> children\n     * @return java.util.Map<java.lang.String, com.ming.demo.costinfo.entity.CostInfo>\n     */\n    private Map<String, CostInfo> toCostMap(List<CostInfo> allCosts) {\n        Map<String, CostInfo> costMap = new ConcurrentHashMap<>(allCosts.size());\n        for (CostInfo cost : allCosts) {\n            costMap.put(cost.getNodeId(), cost);\n        }\n        return costMap;\n    }\n\n    /**\n     * 拿到所有parentId为0的根节点\n     * @author J-Ming\n     * @date 2023/6/17 6:54\n     * @param costMap\n     * @return java.util.List<com.ming.demo.costinfo.entity.CostInfo>\n     */\n    private List<CostInfo> getRootCosts(Map<String, CostInfo> costMap) {\n        return costMap.values().stream()\n                .filter(cost -> PARENT_ID_ROOT.equals(cost.getParentId()))\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * 转换为树形\n     * @author J-Ming\n     * @date 2023/6/17 6:55\n     * @param costMap\n     */\n    private void buildCostTree(Map<String, CostInfo> costMap) {\n        for (CostInfo cost : costMap.values()) {\n            if (!PARENT_ID_ROOT.equals(cost.getParentId())) {\n                CostInfo parent = costMap.get(cost.getParentId());\n                if (parent != null && !parent.getNodeId().equals(cost.getNodeId())) {\n                    parent.addChildren(cost);\n                }\n            }\n        }\n    }\n\n    public List<CostInfo> getCostsTreeBy3(List<CostInfo> allCosts) {\n        StopWatch watch = new StopWatch();\n        watch.start("处理耗时");\n        Map<String, CostInfo> costMap = toCostMap(allCosts);\n        buildCostTree(costMap);\n        List<CostInfo> rootCosts = getRootCosts(costMap);\n        watch.stop();\n        System.out.println(watch.prettyPrint());\n        return rootCosts;\n    }\n\n    /**\n     * 获得树形的数据\n     * @author J-Ming\n     * @date 2023/6/15 2:51\n     * @param allCosts 需要变成树形的数据\n     * @return java.util.List<com.ming.demo.entity.Costs>\n     */\n    private List<CostInfo> getCostsTreeBy2(List<CostInfo> allCosts) {\n        StopWatch watch = new StopWatch();\n        watch.start("处理耗时");\n\n        Map<String, CostInfo> costMap = toCostMap(allCosts);\n        List<CostInfo> rootCosts = new ArrayList<>();\n        for (CostInfo cost : allCosts) {\n            CostInfo parent = costMap.get(cost.getParentId());\n            if (parent != null && !parent.getNodeId().equals(cost.getNodeId())) {\n                parent.addChildren(cost);\n                continue;\n            }\n            rootCosts.add(cost);\n        }\n        watch.stop();\n        System.out.println(watch.prettyPrint());\n        return rootCosts;\n    }\n\n\n\n# MyBatisLog\n\nimport com.baomidou.mybatisplus.extension.plugins.inner.InnerInterceptor;\nimport org.apache.ibatis.executor.Executor;\nimport org.apache.ibatis.mapping.BoundSql;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.ParameterMapping;\nimport org.apache.ibatis.mapping.ParameterMode;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.apache.ibatis.session.Configuration;\nimport org.apache.ibatis.session.ResultHandler;\nimport org.apache.ibatis.session.RowBounds;\nimport org.apache.ibatis.type.TypeHandlerRegistry;\n/**\n * 获取SQL语句\n * @author     ：jiangmh\n * @date       ：Created in 2023/6/12 19:17\n **/\npublic class SqlLogInterceptor implements InnerInterceptor {\n    @Override\n    public void beforeQuery(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n        String statement = ms.getId();\n        showSql(ms.getConfiguration(), boundSql, statement);\n    }\n\n    @Override\n    public void beforeUpdate(Executor executor, MappedStatement ms, Object parameter) {\n        Configuration configuration = ms.getConfiguration();\n        BoundSql boundSql = ms.getBoundSql(parameter);\n        showSql(configuration, boundSql, ms.getId());\n    }\n\n    private void showSql(Configuration configuration, BoundSql boundSql, String statement) {\n        // 获得参数值\n        Map<Integer, Object> parameterValues = buildParameterValues(configuration, boundSql);\n        // 语句赋值\n        String sqlWithValues = getSqlWithValues(boundSql.getSql(), parameterValues);\n        String logText = formatMessage(sqlWithValues, statement);\n        // 打印红色 SQL 日志\n        System.err.println(logText);\n    }\n\n    public static String getSqlWithValues(String statementQuery, Map<Integer, Object> parameterValues) {\n        final StringBuilder sb = new StringBuilder();\n\n        // iterate over the characters in the query replacing the parameter placeholders\n        // with the actual values\n        int currentParameter = 0;\n        for (int pos = 0; pos < statementQuery.length(); pos++) {\n            char character = statementQuery.charAt(pos);\n            if (statementQuery.charAt(pos) == \'?\' && currentParameter <= parameterValues.size()) {\n                // replace with parameter value\n                Object value = parameterValues.get(currentParameter);\n                sb.append(value != null ? value.toString() : "");\n                currentParameter++;\n            } else {\n                sb.append(character);\n            }\n        }\n\n        return sb.toString();\n    }\n\n    // com.baomidou.mybatisplus.core.MybatisParameterHandler#setParameters\n    private static Map<Integer, Object> buildParameterValues(Configuration configuration, BoundSql boundSql) {\n        Object parameterObject = boundSql.getParameterObject();\n        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n        if (parameterMappings != null) {\n            Map<Integer, Object> parameterValues = new HashMap<>();\n            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();\n            for (int i = 0; i < parameterMappings.size(); i++) {\n                ParameterMapping parameterMapping = parameterMappings.get(i);\n                if (parameterMapping.getMode() != ParameterMode.OUT) {\n                    Object value;\n                    String propertyName = parameterMapping.getProperty();\n                    if (boundSql.hasAdditionalParameter(propertyName)) { // issue #448 ask first for additional params\n                        value = boundSql.getAdditionalParameter(propertyName);\n                    } else if (parameterObject == null) {\n                        value = null;\n                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n                        value = parameterObject;\n                    } else {\n                        MetaObject metaObject = configuration.newMetaObject(parameterObject);\n                        value = metaObject.getValue(propertyName);\n                    }\n                    parameterValues.put(i, value);\n                }\n            }\n            return parameterValues;\n        }\n        return Collections.emptyMap();\n    }\n\n    public static String formatMessage(String sql, String statement) {\n        return StringUtils.hasText(sql) ? " ms " + " (" + statement + ")" +\n                "\\n Execute SQL：" + sql.replaceAll("[\\\\s]+", " ") + "\\n" : "";\n    }\n}\n\n\n\n# TemplateProcess\n\nimport cn.hutool.core.collection.CollectionUtil;\nimport cn.hutool.core.util.ReflectUtil;\nimport com.ming.common.annotation.Template;\n/**\n * 模板字符串处理工具类\n * @author     ：jiangmh\n * @date       ：Created in 2022/4/16 15:30\n **/\npublic class TemplateProcessUtils {\n\n    /**\n     * 解析模板实体\n     * @author J-Ming\n     * @date 2022/4/16 18:10\n     * @param o 需要替换模板的实体对象\n     * @return java.util.Map<java.lang.String,java.lang.Object>\n     */\n    public static Map<String, Object> templateHandle(Object o) {\n        Field[] fields = o.getClass().getDeclaredFields();\n        Field[] superFields = o.getClass().getSuperclass().getDeclaredFields();\n        ArrayList<Field> fields1 = CollectionUtil.toList(fields);\n        ArrayList<Field> fields2 = CollectionUtil.toList(superFields);\n        fields1.addAll(fields2);\n\n        Map<String,Object> map = new HashMap<>();\n        for (Field field : fields1) {\n            Template annotation = field.getDeclaredAnnotation(Template.class);\n            Object value = ReflectUtil.getFieldValue(o, field.getName());\n            if (annotation != null && StrUtil.isNotEmpty(annotation.key()) && value != null) {\n                map.put(annotation.key(),value);\n            }\n        }\n        return map;\n    }\n\n}\n\n\n\n# ValidationExceptionHandler\n\nimport com.bairuitech.anychat.facex.model.ResultModel;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n/**\n *\n * @author     ：jiangmh\n * @date       ：Created in 2022/6/29 10:04\n **/\n@ControllerAdvice\npublic class ValidationExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @Override\n    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\n        return new ResponseEntity<>(getError(ex.getBindingResult().getFieldErrors()),status);\n    }\n\n    @Override\n    protected ResponseEntity<Object> handleBindException(BindException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\n        List<FieldError> allErrors = ex.getFieldErrors();\n        return new ResponseEntity<>(getError(allErrors),status);\n    }\n\n    private ResultModel getError(final List<FieldError> errors) {\n        StringBuilder buffer = new StringBuilder();\n        for (FieldError error : errors) {\n            buffer.append(error.getField()).append(" ").append(error.getDefaultMessage()).append(";");\n        }\n        return ResultModel.fail("ERROR",buffer);\n    }\n}\n\n\n\n# EasyExcel\n\n/**\n * easyExcel初始化工具类\n * @author     ：jiangmh\n * @date       ：Created in 2023/6/19 19:04\n **/\npublic class ExcelService {\n    /**\n     * 获取excel读取对象\n     * @author J-Ming \n     * @date 2023/6/20 1:51\n     * @param file excel文件\n     * @param head 文件对应实体\n     * @param readListener 整个文件的监听器\n     * @return com.alibaba.excel.ExcelReader\n     */\n    public static <T> ExcelReader getExcelReader(File file, Class<T> head, ReadListener<T> readListener) {\n        return EasyExcel.read(file, head, readListener).build();\n    }\n    /**\n     *\n     * @author J-Ming \n     * @date 2023/6/20 1:51\n     * @param file excel文件\n     * @return com.alibaba.excel.ExcelReader\n     */\n    public static ExcelReader getExcelReader(File file) {\n        return EasyExcel.read(file).build();\n    }\n    /**\n     *\n     * @author J-Ming \n     * @date 2023/6/20 1:51\n     * @param file web上传的excel文件\n     * @return com.alibaba.excel.ExcelReader\n     */\n    public static ExcelReader getExcelReader(MultipartFile file) throws IOException {\n        return EasyExcel.read(file.getInputStream()).build();\n    }\n    /**\n     *\n     * @author J-Ming \n     * @date 2023/6/20 1:51\n     * @param file excel文件\n     * @param head 文件对应实体\n     * @param readListener 整个文件的监听器\n     * @return com.alibaba.excel.ExcelReader\n     */\n    public static <T> ExcelReader getExcelReader(MultipartFile file, Class<T> head, ReadListener<T> readListener) throws IOException {\n        return EasyExcel.read(file.getInputStream(), head, readListener).build();\n    }\n    /**\n     * 获取需要读的sheet页\n     * @author J-Ming \n     * @date 2023/6/20 1:56\n     * @param sheetNo sheet序号，从0开始\n     * @param headRowNumber 第几行开始读取，从1开始\n     * @return com.alibaba.excel.read.metadata.ReadSheet\n     */\n    public static ReadSheet getReadSheet(Integer sheetNo, Integer headRowNumber) {\n        return EasyExcel.readSheet(sheetNo).headRowNumber(headRowNumber).build();\n    }\n    /**\n     *\n     * @author J-Ming\n     * @date 2023/6/20 1:58\n     * @param sheetNo sheet序号，从0开始\n     * @param headRowNumber 第几行开始读取，从1开始\n     * @param head 对应sheet的实体对象\n     * @param listener 每个sheet页的单独监听器\n     * @return com.alibaba.excel.read.metadata.ReadSheet\n     */\n    public static <T> ReadSheet getReadSheet(Integer sheetNo, Integer headRowNumber, Class<T> head, ReadListener<T> listener) {\n        return EasyExcel.readSheet(sheetNo).headRowNumber(headRowNumber).head(head).registerReadListener(listener).build();\n    }\n}\n\n\n/**\n * easyExcel数据读取监听器\n * @author     ：jiangmh\n * @date       ：Created in 2023/6/19 19:01\n **/\npublic class ExcelDataListener<T> extends AnalysisEventListener<T> {\n    private static final int BATCH_COUNT = 100;\n    private List<T> cachedDataList = new ArrayList<>(BATCH_COUNT);\n    private Consumer<List<T>> consumer;\n    /**\n     * 回调函数\n     */\n    private BiConsumer<T, AnalysisContext> callBack;\n\n    public ExcelDataListener(Consumer<List<T>> consumer) {\n        this.consumer = consumer;\n    }\n    @Override\n    public void invokeHeadMap(Map<Integer, String> headMap, AnalysisContext context) {\n//        System.out.println(headMap);\n    }\n    @Override\n    public void invoke(T t, AnalysisContext analysisContext) {\n        if (callBack != null) {\n            callBack.accept(t, analysisContext);\n        }\n        cachedDataList.add(t);\n        if (cachedDataList.size() >= BATCH_COUNT) {\n            if (consumer != null) {\n                saveData(consumer);\n            }\n            // 存储完成清理 list\n            cachedDataList.clear();\n            cachedDataList = new ArrayList<>(BATCH_COUNT);\n        }\n    }\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext analysisContext) {\n        if (consumer != null) {\n            saveData(consumer);\n        }\n        // 防止携带上个sheet页数据\n        cachedDataList.clear();\n    }\n    /**\n     *\n     * @author J-Ming\n     * @date 2023/6/20 1:40\n     * @param consumer 对读取数据的处理函数\n     */\n    private void saveData(Consumer<List<T>> consumer) {\n        consumer.accept(cachedDataList);\n    }\n    public void setCallBack(BiConsumer<T, AnalysisContext> callBack) {\n        this.callBack = callBack;\n    }\n    public List<T> getList() {\n        return this.cachedDataList;\n    }\n}\n\n\n\n# CustomApplicationContextInitializer\n\n/**\n * 配置文件密文解析\n * @author     ：J-Ming\n * @date       ：Created in 2023/12/28 19:56\n **/\npublic class CustomApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        final String prefix = "EK(";\n        final String suffix = ")";\n        final String encKeyEnv = "data.enc.key";\n\n        ConfigurableEnvironment environment = applicationContext.getEnvironment();\n        String encKey = environment.getProperty(encKeyEnv);\n        if (encKey == null || encKey.length() == 0) {\n            System.out.println("encKey为空");\n        }\n        SymmetricCrypto aes = new SymmetricCrypto(SymmetricAlgorithm.AES, HexUtil.decodeHex(encKey));\n\n        Map<String, Object> updatedSource = new HashMap<>();\n        MutablePropertySources propertySources = environment.getPropertySources();\n        for (PropertySource<?> propertySource : propertySources) {\n            if (propertySource instanceof MapPropertySource) {\n                MapPropertySource mapPropertySource = (MapPropertySource) propertySource;\n                for (Map.Entry<String, Object> entry : mapPropertySource.getSource().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue().toString();\n                    if (value.startsWith(prefix) && value.endsWith(suffix)) {\n                        String decryptedValue;\n                        String res = value.substring(prefix.length(), value.length() - suffix.length());\n                        decryptedValue = aes.decryptStr(res, CharsetUtil.CHARSET_UTF_8);\n                        updatedSource.put(key, decryptedValue);\n                    }\n                }\n            }\n        }\n\n        propertySources.addFirst(new MapPropertySource("custom-property-source", updatedSource));\n    }\n}\n\n\n\n\n# LINUX\n\n\n# ClearCatalinaLog\n\n#!/bin/bash\n# 定义日志路径\nlog_path=/home/ops/work/logs/\ntomcat_path=/home/ops/tomcat/apache-tomcat-9.0.34/logs/catalina.out\n\n# 定义当前日期\nd=`date -d \'1 day ago\' +%Y-%m-%d`\n\n# 定义15天前的日期\nd15=`date -d\'15 day ago\' +%Y-%m-%d`\n\n# 跳转到tomcat日志文件夹，复制catalina.out到catalina.out.${d}.log\ncd ${log_path} && cp ${tomcat_path} ${log_path}/catalina.out.${d}.log\n\n# 清空cat文件alina.out\necho > catalina.out\n\n# 删除15天前的catalina.out.${d15}.log\nrm -rf ${log_path}/catalina.out.${d15}.log\n\n\n\n# TomcatDeploy\n\n#!/bin/bash\nproject_name=AnyChatPlatform\ntomcat_path=/home/ops/tomcat/apache-tomcat-9.0.34\nwork_path=/home/ops/work\n\nif [[ !(-f ${work_path}/war/${project_name}.war) ]]\nthen\n    echo "工作目录中，未检测到war包"\n    exit 1;\nfi\n######################################### kill启动过的tomcat #########################################\necho "1、kill之前启动过的${project_name}"\ntomcatPid=$(ps -ef | grep $tomcat_path/bin/bootstrap.jar | grep -v grep | awk \'{print $2}\')\nkill -9 $tomcatPid\necho "tomcat线程：$tomcatPid已杀死..."\nsleep 1\n######################################### 清除旧war #########################################\noldFile=${tomcat_path}/webapps\necho "3、备份旧${project_name}文件"\ncp ${oldFile}/${project_name}.war $work_path/bak\nsleep 1\n\necho "4、清除旧${project_name}文件"\nrm -rf "${oldFile}/${project_name} ${oldFile}/${project_name}.war"\nsleep 1\n\n######################################### 拷贝新war包至web目录 #########################################\necho "5、拷贝新war包至web目录"\ncp ${work_path}/war/${project_name}.war $tomcat_path/webapps/\nsleep 2\n\n######################################### 启动tomcat #########################################\necho "6、启动tomcat"\nsh $tomcat_path/bin/startup.sh\nread -n1 -p "是否查看日志[y/n]" answer\nif [ $answer="y" ] || [ $answer="Y" ]; then\n    tail -f -n1 $tomcat_path/logs/catalina.out\nelse\n echo "发布war结束"\nfi\n',normalizedContent:'# java\n\n\n# treenode\n\n/**\n *\n * @author ：jiangmh\n * @create ：created in 2023/6/17 7:04\n **/\npublic class nodetreeutils {\n    private static final string parent_id_root = "0";\n\n    /**\n     * 将所有数据按节点id存进map\n     * @author j-ming\n     * @date 2023/6/17 6:50\n     * @param allcosts 待转换为树形的数据，拥有节点nodeid、parentid以及存放子节点信息的list<costinfo> children\n     * @return java.util.map<java.lang.string, com.ming.demo.costinfo.entity.costinfo>\n     */\n    private map<string, costinfo> tocostmap(list<costinfo> allcosts) {\n        map<string, costinfo> costmap = new concurrenthashmap<>(allcosts.size());\n        for (costinfo cost : allcosts) {\n            costmap.put(cost.getnodeid(), cost);\n        }\n        return costmap;\n    }\n\n    /**\n     * 拿到所有parentid为0的根节点\n     * @author j-ming\n     * @date 2023/6/17 6:54\n     * @param costmap\n     * @return java.util.list<com.ming.demo.costinfo.entity.costinfo>\n     */\n    private list<costinfo> getrootcosts(map<string, costinfo> costmap) {\n        return costmap.values().stream()\n                .filter(cost -> parent_id_root.equals(cost.getparentid()))\n                .collect(collectors.tolist());\n    }\n\n    /**\n     * 转换为树形\n     * @author j-ming\n     * @date 2023/6/17 6:55\n     * @param costmap\n     */\n    private void buildcosttree(map<string, costinfo> costmap) {\n        for (costinfo cost : costmap.values()) {\n            if (!parent_id_root.equals(cost.getparentid())) {\n                costinfo parent = costmap.get(cost.getparentid());\n                if (parent != null && !parent.getnodeid().equals(cost.getnodeid())) {\n                    parent.addchildren(cost);\n                }\n            }\n        }\n    }\n\n    public list<costinfo> getcoststreeby3(list<costinfo> allcosts) {\n        stopwatch watch = new stopwatch();\n        watch.start("处理耗时");\n        map<string, costinfo> costmap = tocostmap(allcosts);\n        buildcosttree(costmap);\n        list<costinfo> rootcosts = getrootcosts(costmap);\n        watch.stop();\n        system.out.println(watch.prettyprint());\n        return rootcosts;\n    }\n\n    /**\n     * 获得树形的数据\n     * @author j-ming\n     * @date 2023/6/15 2:51\n     * @param allcosts 需要变成树形的数据\n     * @return java.util.list<com.ming.demo.entity.costs>\n     */\n    private list<costinfo> getcoststreeby2(list<costinfo> allcosts) {\n        stopwatch watch = new stopwatch();\n        watch.start("处理耗时");\n\n        map<string, costinfo> costmap = tocostmap(allcosts);\n        list<costinfo> rootcosts = new arraylist<>();\n        for (costinfo cost : allcosts) {\n            costinfo parent = costmap.get(cost.getparentid());\n            if (parent != null && !parent.getnodeid().equals(cost.getnodeid())) {\n                parent.addchildren(cost);\n                continue;\n            }\n            rootcosts.add(cost);\n        }\n        watch.stop();\n        system.out.println(watch.prettyprint());\n        return rootcosts;\n    }\n\n\n\n# mybatislog\n\nimport com.baomidou.mybatisplus.extension.plugins.inner.innerinterceptor;\nimport org.apache.ibatis.executor.executor;\nimport org.apache.ibatis.mapping.boundsql;\nimport org.apache.ibatis.mapping.mappedstatement;\nimport org.apache.ibatis.mapping.parametermapping;\nimport org.apache.ibatis.mapping.parametermode;\nimport org.apache.ibatis.reflection.metaobject;\nimport org.apache.ibatis.session.configuration;\nimport org.apache.ibatis.session.resulthandler;\nimport org.apache.ibatis.session.rowbounds;\nimport org.apache.ibatis.type.typehandlerregistry;\n/**\n * 获取sql语句\n * @author     ：jiangmh\n * @date       ：created in 2023/6/12 19:17\n **/\npublic class sqlloginterceptor implements innerinterceptor {\n    @override\n    public void beforequery(executor executor, mappedstatement ms, object parameter, rowbounds rowbounds, resulthandler resulthandler, boundsql boundsql) throws sqlexception {\n        string statement = ms.getid();\n        showsql(ms.getconfiguration(), boundsql, statement);\n    }\n\n    @override\n    public void beforeupdate(executor executor, mappedstatement ms, object parameter) {\n        configuration configuration = ms.getconfiguration();\n        boundsql boundsql = ms.getboundsql(parameter);\n        showsql(configuration, boundsql, ms.getid());\n    }\n\n    private void showsql(configuration configuration, boundsql boundsql, string statement) {\n        // 获得参数值\n        map<integer, object> parametervalues = buildparametervalues(configuration, boundsql);\n        // 语句赋值\n        string sqlwithvalues = getsqlwithvalues(boundsql.getsql(), parametervalues);\n        string logtext = formatmessage(sqlwithvalues, statement);\n        // 打印红色 sql 日志\n        system.err.println(logtext);\n    }\n\n    public static string getsqlwithvalues(string statementquery, map<integer, object> parametervalues) {\n        final stringbuilder sb = new stringbuilder();\n\n        // iterate over the characters in the query replacing the parameter placeholders\n        // with the actual values\n        int currentparameter = 0;\n        for (int pos = 0; pos < statementquery.length(); pos++) {\n            char character = statementquery.charat(pos);\n            if (statementquery.charat(pos) == \'?\' && currentparameter <= parametervalues.size()) {\n                // replace with parameter value\n                object value = parametervalues.get(currentparameter);\n                sb.append(value != null ? value.tostring() : "");\n                currentparameter++;\n            } else {\n                sb.append(character);\n            }\n        }\n\n        return sb.tostring();\n    }\n\n    // com.baomidou.mybatisplus.core.mybatisparameterhandler#setparameters\n    private static map<integer, object> buildparametervalues(configuration configuration, boundsql boundsql) {\n        object parameterobject = boundsql.getparameterobject();\n        list<parametermapping> parametermappings = boundsql.getparametermappings();\n        if (parametermappings != null) {\n            map<integer, object> parametervalues = new hashmap<>();\n            typehandlerregistry typehandlerregistry = configuration.gettypehandlerregistry();\n            for (int i = 0; i < parametermappings.size(); i++) {\n                parametermapping parametermapping = parametermappings.get(i);\n                if (parametermapping.getmode() != parametermode.out) {\n                    object value;\n                    string propertyname = parametermapping.getproperty();\n                    if (boundsql.hasadditionalparameter(propertyname)) { // issue #448 ask first for additional params\n                        value = boundsql.getadditionalparameter(propertyname);\n                    } else if (parameterobject == null) {\n                        value = null;\n                    } else if (typehandlerregistry.hastypehandler(parameterobject.getclass())) {\n                        value = parameterobject;\n                    } else {\n                        metaobject metaobject = configuration.newmetaobject(parameterobject);\n                        value = metaobject.getvalue(propertyname);\n                    }\n                    parametervalues.put(i, value);\n                }\n            }\n            return parametervalues;\n        }\n        return collections.emptymap();\n    }\n\n    public static string formatmessage(string sql, string statement) {\n        return stringutils.hastext(sql) ? " ms " + " (" + statement + ")" +\n                "\\n execute sql：" + sql.replaceall("[\\\\s]+", " ") + "\\n" : "";\n    }\n}\n\n\n\n# templateprocess\n\nimport cn.hutool.core.collection.collectionutil;\nimport cn.hutool.core.util.reflectutil;\nimport com.ming.common.annotation.template;\n/**\n * 模板字符串处理工具类\n * @author     ：jiangmh\n * @date       ：created in 2022/4/16 15:30\n **/\npublic class templateprocessutils {\n\n    /**\n     * 解析模板实体\n     * @author j-ming\n     * @date 2022/4/16 18:10\n     * @param o 需要替换模板的实体对象\n     * @return java.util.map<java.lang.string,java.lang.object>\n     */\n    public static map<string, object> templatehandle(object o) {\n        field[] fields = o.getclass().getdeclaredfields();\n        field[] superfields = o.getclass().getsuperclass().getdeclaredfields();\n        arraylist<field> fields1 = collectionutil.tolist(fields);\n        arraylist<field> fields2 = collectionutil.tolist(superfields);\n        fields1.addall(fields2);\n\n        map<string,object> map = new hashmap<>();\n        for (field field : fields1) {\n            template annotation = field.getdeclaredannotation(template.class);\n            object value = reflectutil.getfieldvalue(o, field.getname());\n            if (annotation != null && strutil.isnotempty(annotation.key()) && value != null) {\n                map.put(annotation.key(),value);\n            }\n        }\n        return map;\n    }\n\n}\n\n\n\n# validationexceptionhandler\n\nimport com.bairuitech.anychat.facex.model.resultmodel;\nimport org.springframework.http.httpheaders;\nimport org.springframework.http.httpstatus;\nimport org.springframework.http.responseentity;\nimport org.springframework.validation.bindexception;\nimport org.springframework.validation.fielderror;\nimport org.springframework.web.bind.methodargumentnotvalidexception;\nimport org.springframework.web.bind.annotation.controlleradvice;\nimport org.springframework.web.context.request.webrequest;\nimport org.springframework.web.servlet.mvc.method.annotation.responseentityexceptionhandler;\n/**\n *\n * @author     ：jiangmh\n * @date       ：created in 2022/6/29 10:04\n **/\n@controlleradvice\npublic class validationexceptionhandler extends responseentityexceptionhandler {\n\n    @override\n    protected responseentity<object> handlemethodargumentnotvalid(methodargumentnotvalidexception ex, httpheaders headers, httpstatus status, webrequest request) {\n        return new responseentity<>(geterror(ex.getbindingresult().getfielderrors()),status);\n    }\n\n    @override\n    protected responseentity<object> handlebindexception(bindexception ex, httpheaders headers, httpstatus status, webrequest request) {\n        list<fielderror> allerrors = ex.getfielderrors();\n        return new responseentity<>(geterror(allerrors),status);\n    }\n\n    private resultmodel geterror(final list<fielderror> errors) {\n        stringbuilder buffer = new stringbuilder();\n        for (fielderror error : errors) {\n            buffer.append(error.getfield()).append(" ").append(error.getdefaultmessage()).append(";");\n        }\n        return resultmodel.fail("error",buffer);\n    }\n}\n\n\n\n# easyexcel\n\n/**\n * easyexcel初始化工具类\n * @author     ：jiangmh\n * @date       ：created in 2023/6/19 19:04\n **/\npublic class excelservice {\n    /**\n     * 获取excel读取对象\n     * @author j-ming \n     * @date 2023/6/20 1:51\n     * @param file excel文件\n     * @param head 文件对应实体\n     * @param readlistener 整个文件的监听器\n     * @return com.alibaba.excel.excelreader\n     */\n    public static <t> excelreader getexcelreader(file file, class<t> head, readlistener<t> readlistener) {\n        return easyexcel.read(file, head, readlistener).build();\n    }\n    /**\n     *\n     * @author j-ming \n     * @date 2023/6/20 1:51\n     * @param file excel文件\n     * @return com.alibaba.excel.excelreader\n     */\n    public static excelreader getexcelreader(file file) {\n        return easyexcel.read(file).build();\n    }\n    /**\n     *\n     * @author j-ming \n     * @date 2023/6/20 1:51\n     * @param file web上传的excel文件\n     * @return com.alibaba.excel.excelreader\n     */\n    public static excelreader getexcelreader(multipartfile file) throws ioexception {\n        return easyexcel.read(file.getinputstream()).build();\n    }\n    /**\n     *\n     * @author j-ming \n     * @date 2023/6/20 1:51\n     * @param file excel文件\n     * @param head 文件对应实体\n     * @param readlistener 整个文件的监听器\n     * @return com.alibaba.excel.excelreader\n     */\n    public static <t> excelreader getexcelreader(multipartfile file, class<t> head, readlistener<t> readlistener) throws ioexception {\n        return easyexcel.read(file.getinputstream(), head, readlistener).build();\n    }\n    /**\n     * 获取需要读的sheet页\n     * @author j-ming \n     * @date 2023/6/20 1:56\n     * @param sheetno sheet序号，从0开始\n     * @param headrownumber 第几行开始读取，从1开始\n     * @return com.alibaba.excel.read.metadata.readsheet\n     */\n    public static readsheet getreadsheet(integer sheetno, integer headrownumber) {\n        return easyexcel.readsheet(sheetno).headrownumber(headrownumber).build();\n    }\n    /**\n     *\n     * @author j-ming\n     * @date 2023/6/20 1:58\n     * @param sheetno sheet序号，从0开始\n     * @param headrownumber 第几行开始读取，从1开始\n     * @param head 对应sheet的实体对象\n     * @param listener 每个sheet页的单独监听器\n     * @return com.alibaba.excel.read.metadata.readsheet\n     */\n    public static <t> readsheet getreadsheet(integer sheetno, integer headrownumber, class<t> head, readlistener<t> listener) {\n        return easyexcel.readsheet(sheetno).headrownumber(headrownumber).head(head).registerreadlistener(listener).build();\n    }\n}\n\n\n/**\n * easyexcel数据读取监听器\n * @author     ：jiangmh\n * @date       ：created in 2023/6/19 19:01\n **/\npublic class exceldatalistener<t> extends analysiseventlistener<t> {\n    private static final int batch_count = 100;\n    private list<t> cacheddatalist = new arraylist<>(batch_count);\n    private consumer<list<t>> consumer;\n    /**\n     * 回调函数\n     */\n    private biconsumer<t, analysiscontext> callback;\n\n    public exceldatalistener(consumer<list<t>> consumer) {\n        this.consumer = consumer;\n    }\n    @override\n    public void invokeheadmap(map<integer, string> headmap, analysiscontext context) {\n//        system.out.println(headmap);\n    }\n    @override\n    public void invoke(t t, analysiscontext analysiscontext) {\n        if (callback != null) {\n            callback.accept(t, analysiscontext);\n        }\n        cacheddatalist.add(t);\n        if (cacheddatalist.size() >= batch_count) {\n            if (consumer != null) {\n                savedata(consumer);\n            }\n            // 存储完成清理 list\n            cacheddatalist.clear();\n            cacheddatalist = new arraylist<>(batch_count);\n        }\n    }\n    @override\n    public void doafterallanalysed(analysiscontext analysiscontext) {\n        if (consumer != null) {\n            savedata(consumer);\n        }\n        // 防止携带上个sheet页数据\n        cacheddatalist.clear();\n    }\n    /**\n     *\n     * @author j-ming\n     * @date 2023/6/20 1:40\n     * @param consumer 对读取数据的处理函数\n     */\n    private void savedata(consumer<list<t>> consumer) {\n        consumer.accept(cacheddatalist);\n    }\n    public void setcallback(biconsumer<t, analysiscontext> callback) {\n        this.callback = callback;\n    }\n    public list<t> getlist() {\n        return this.cacheddatalist;\n    }\n}\n\n\n\n# customapplicationcontextinitializer\n\n/**\n * 配置文件密文解析\n * @author     ：j-ming\n * @date       ：created in 2023/12/28 19:56\n **/\npublic class customapplicationcontextinitializer implements applicationcontextinitializer<configurableapplicationcontext> {\n\n    @override\n    public void initialize(configurableapplicationcontext applicationcontext) {\n        final string prefix = "ek(";\n        final string suffix = ")";\n        final string enckeyenv = "data.enc.key";\n\n        configurableenvironment environment = applicationcontext.getenvironment();\n        string enckey = environment.getproperty(enckeyenv);\n        if (enckey == null || enckey.length() == 0) {\n            system.out.println("enckey为空");\n        }\n        symmetriccrypto aes = new symmetriccrypto(symmetricalgorithm.aes, hexutil.decodehex(enckey));\n\n        map<string, object> updatedsource = new hashmap<>();\n        mutablepropertysources propertysources = environment.getpropertysources();\n        for (propertysource<?> propertysource : propertysources) {\n            if (propertysource instanceof mappropertysource) {\n                mappropertysource mappropertysource = (mappropertysource) propertysource;\n                for (map.entry<string, object> entry : mappropertysource.getsource().entryset()) {\n                    string key = entry.getkey();\n                    string value = entry.getvalue().tostring();\n                    if (value.startswith(prefix) && value.endswith(suffix)) {\n                        string decryptedvalue;\n                        string res = value.substring(prefix.length(), value.length() - suffix.length());\n                        decryptedvalue = aes.decryptstr(res, charsetutil.charset_utf_8);\n                        updatedsource.put(key, decryptedvalue);\n                    }\n                }\n            }\n        }\n\n        propertysources.addfirst(new mappropertysource("custom-property-source", updatedsource));\n    }\n}\n\n\n\n\n# linux\n\n\n# clearcatalinalog\n\n#!/bin/bash\n# 定义日志路径\nlog_path=/home/ops/work/logs/\ntomcat_path=/home/ops/tomcat/apache-tomcat-9.0.34/logs/catalina.out\n\n# 定义当前日期\nd=`date -d \'1 day ago\' +%y-%m-%d`\n\n# 定义15天前的日期\nd15=`date -d\'15 day ago\' +%y-%m-%d`\n\n# 跳转到tomcat日志文件夹，复制catalina.out到catalina.out.${d}.log\ncd ${log_path} && cp ${tomcat_path} ${log_path}/catalina.out.${d}.log\n\n# 清空cat文件alina.out\necho > catalina.out\n\n# 删除15天前的catalina.out.${d15}.log\nrm -rf ${log_path}/catalina.out.${d15}.log\n\n\n\n# tomcatdeploy\n\n#!/bin/bash\nproject_name=anychatplatform\ntomcat_path=/home/ops/tomcat/apache-tomcat-9.0.34\nwork_path=/home/ops/work\n\nif [[ !(-f ${work_path}/war/${project_name}.war) ]]\nthen\n    echo "工作目录中，未检测到war包"\n    exit 1;\nfi\n######################################### kill启动过的tomcat #########################################\necho "1、kill之前启动过的${project_name}"\ntomcatpid=$(ps -ef | grep $tomcat_path/bin/bootstrap.jar | grep -v grep | awk \'{print $2}\')\nkill -9 $tomcatpid\necho "tomcat线程：$tomcatpid已杀死..."\nsleep 1\n######################################### 清除旧war #########################################\noldfile=${tomcat_path}/webapps\necho "3、备份旧${project_name}文件"\ncp ${oldfile}/${project_name}.war $work_path/bak\nsleep 1\n\necho "4、清除旧${project_name}文件"\nrm -rf "${oldfile}/${project_name} ${oldfile}/${project_name}.war"\nsleep 1\n\n######################################### 拷贝新war包至web目录 #########################################\necho "5、拷贝新war包至web目录"\ncp ${work_path}/war/${project_name}.war $tomcat_path/webapps/\nsleep 2\n\n######################################### 启动tomcat #########################################\necho "6、启动tomcat"\nsh $tomcat_path/bin/startup.sh\nread -n1 -p "是否查看日志[y/n]" answer\nif [ $answer="y" ] || [ $answer="y" ]; then\n    tail -f -n1 $tomcat_path/logs/catalina.out\nelse\n echo "发布war结束"\nfi\n',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"mybatis",frontmatter:{title:"mybatis",date:"2021-11-05T03:25:00.000Z",categories:["数据库"],tags:["mybatis"],permalink:"/pages/4af2ba/"},regularPath:"/04.%E6%95%B0%E6%8D%AE%E5%BA%93/01.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mybatis.html",relativePath:"04.数据库/01.数据库/03.mybatis.md",key:"v-798802d6",path:"/pages/4af2ba/",headers:[{level:2,title:"一、批量修改等",slug:"一、批量修改等",normalizedTitle:"一、批量修改等",charIndex:2},{level:3,title:"批量插入",slug:"批量插入",normalizedTitle:"批量插入",charIndex:60},{level:3,title:"批量修改",slug:"批量修改",normalizedTitle:"批量修改",charIndex:4},{level:3,title:"批量删除",slug:"批量删除",normalizedTitle:"批量删除",charIndex:1524},{level:2,title:"二、MyBatis分页查询",slug:"二、mybatis分页查询",normalizedTitle:"二、mybatis分页查询",charIndex:2085},{level:2,title:"三、SQL知识点",slug:"三、sql知识点",normalizedTitle:"三、sql知识点",charIndex:3453},{level:3,title:"①SQL删除重复数据",slug:"_1sql删除重复数据",normalizedTitle:"①sql删除重复数据",charIndex:3466},{level:3,title:"②MySQL提示1040 TooMany Connections",slug:"_2mysql提示1040-toomany-connections",normalizedTitle:"②mysql提示1040 toomany connections",charIndex:4554}],headersStr:"一、批量修改等 批量插入 批量修改 批量删除 二、MyBatis分页查询 三、SQL知识点 ①SQL删除重复数据 ②MySQL提示1040 TooMany Connections",content:'# 一、批量修改等\n\n数据库连接地址后记得加上**&allowMultiQueries=true**不然会报错\n\n\n# 批量插入\n\n<insert id="batchInsertTbProject">\n        insert into\n        tb_project(\n        id,\n        name,\n        type,\n        easy_id,\n        parent_id\n        )\n        values\n        <foreach collection="batchInsertTbProjectList" item="insertTbProject" separator="," close=";">\n            (\n            #{insertTbProject.id},\n            #{insertTbProject.name},\n            #{insertTbProject.type},\n            #{insertTbProject.easyId},\n            #{insertTbProject.parentId}\n            )\n        </foreach>\n    </insert>\n\n\n\n# 批量修改\n\n<update id="batchUpdateTbProject">\n        <foreach collection="batchUpdateTbProjectList" item="batchUpdateTbProject" index="index" open="" close=""\n                 separator=";">\n            update tb_project\n            <set>\n                <if test="batchUpdateTbProject.name != null">\n                    name = #{batchUpdateTbProject.name},\n                </if>\n                <if test="batchUpdateTbProject.type != null">\n                    type = #{batchUpdateTbProject.type},\n                </if>\n                <if test="batchUpdateTbProject.easyId != null">\n                    easy_id = #{batchUpdateTbProject.easyId},\n                </if>\n                <if test="batchUpdateTbProject.parentId != null">\n                    parent_id = #{batchUpdateTbProject.parentId},\n                </if>\n            </set>\n            where id = #{batchUpdateTbProject.id}\n        </foreach>\n    </update>\n\n\n\n# 批量删除\n\n<delete id="batchDeleteTbSyncBuild" parameterType="java.util.List">\n        DELETE FROM tb_sync_build WHERE build_id IN\n        <foreach item="item" collection="batchDeleteTbSyncBuildList" open="(" separator="," close=")">\n            #{item}\n        </foreach>\n    </delete>\n\n<delete id="deleteBatchRelation">\n        DELETE FROM pms_attr_attrgroup_relation WHERE\n        <foreach collection="relationEntities" item="item" separator=" OR ">\n            (attr_id=#{item.attrId} AND attr_group_id=#{item.attrGroupId})\n        </foreach>\n    </delete>\n\n\n\n# 二、MyBatis分页查询\n\npublic Msg getHourseName(TbSynHouseQuery query) {\n        String projectId = query.getProjectId();\n        QueryprojectdataPo queryprojectdataPo = \t\t\t         queryProjectDateReadMapper.queryById(projectId);\n        if (queryprojectdataPo ==null) {\n            return Msg.error().message("projectId不存在！！");\n        }\n        projectId = queryprojectdataPo.getEasyid();\n        query.setProjectId(projectId);\n\n        // 分页，传入页码以及每页大小\n        PageHelper.startPage(query.getPage(),query.getSize());\n    \t// 房屋信息\n        List<TbSynHouseVo> hoursePoList = tbSyncHourseReadMapper.queryHouses(query); \n\n        // 使用PageInfo包装查询后的结果\n         com.github.pagehelper.PageInfo page = new com.github.pagehelper.PageInfo(hoursePoList);\n\n        List<TbSynHouseVo> houses = page.getList();\n\n        Map<String,Object> map = new HashMap<>();\n        long total = page.getTotal();// 总记录数\n        int pageNum = page.getPageNum();// 当前页\n        int pageSize = page.getPageSize();// 每页大小\n        int currentSize = page.getSize();// 当前页大小\n        map.put("total",total);\n        map.put("pageNum",pageNum);\n        map.put("pageSize",pageSize);\n        map.put("currentSize",currentSize);\n        map.put("houses",houses);\n\n        return Msg.ok().add(map);\n\n    }\n\n\n注意： // 分页，传入页码以及每页大小 PageHelper.startPage(query.getPage(),query.getSize()); 执行完这句后后面需要紧跟查询语句否则分页不会起效\n\n\n# 三、SQL知识点\n\n\n# ①SQL删除重复数据\n\n-- 查询出所有重复数据的唯一id（不包括最小的id）\nSELECT id,name\nFROM stu s\nWHERE (s.name) in (SELECT name FROM stu GROUP BY name HAVING count(*) > 1)\n\t\t\tAND id not in (SELECT min(id) FROM stu GROUP BY name HAVING count(*) > 1);\n\t\t\t\n-- 删除重复数据\nDELETE\nFROM stu\nWHERE \n\t\t1=1\n\t\tAND name in (SELECT * FROM (SELECT name FROM stu GROUP BY name HAVING count(*) > 1) as s1)\n\t\tAND id not in (SELECT * FROM (SELECT min(id) id FROM stu GROUP BY name HAVING count(*) > 1) as s2);\n\t\t\n-- 优化版\nSELECT id,name\nFROM stu s\nWHERE\t\n\t\tEXISTS\n\t\t(SELECT s1.id FROM stu s1 JOIN (SELECT min(id) id,name FROM stu GROUP BY name HAVING count(*)>1) as s2\n\t\tWHERE s1.name = s2.name AND s1.id <> s2.id AND s.id = s1.id)\n\t\t\nDELETE s\nFROM stu s\nWHERE\t\n\tEXISTS(SELECT s1.id FROM stu s1 JOIN (SELECT min(id) id,name FROM stu GROUP BY name HAVING count(*)>1) as s2\n\t\tWHERE s1.name = s2.name AND s1.id <> s2.id and s.id = s1.id)\t\n\nDELETE \nFROM stu\nWHERE\t\n\tid in (SELECT * FROM (SELECT s1.id FROM stu s1 JOIN (SELECT min(id) id,name FROM stu GROUP BY name HAVING count(*)>1) as s2\n\t\tWHERE s1.name = s2.name AND s1.id <> s2.id) a)\n\t\t\n\n\n\n# ②MySQL提示1040 TooMany Connections\n\n##当前修改只在当前进程有效重启mysql服务后失效。如需永久修改这需要修改配置文件\n#重启mysql服务器\n1.service mysqld restart\n2.mysql -u root -p 回车输入密码进入mysql\n#查看最大连接数\n3.show variables like "max_connections";\n#修改最大连接数\n4.set GLOBAL max_connections=1000; \n5.退出mysql服务，exit\n',normalizedContent:'# 一、批量修改等\n\n数据库连接地址后记得加上**&allowmultiqueries=true**不然会报错\n\n\n# 批量插入\n\n<insert id="batchinserttbproject">\n        insert into\n        tb_project(\n        id,\n        name,\n        type,\n        easy_id,\n        parent_id\n        )\n        values\n        <foreach collection="batchinserttbprojectlist" item="inserttbproject" separator="," close=";">\n            (\n            #{inserttbproject.id},\n            #{inserttbproject.name},\n            #{inserttbproject.type},\n            #{inserttbproject.easyid},\n            #{inserttbproject.parentid}\n            )\n        </foreach>\n    </insert>\n\n\n\n# 批量修改\n\n<update id="batchupdatetbproject">\n        <foreach collection="batchupdatetbprojectlist" item="batchupdatetbproject" index="index" open="" close=""\n                 separator=";">\n            update tb_project\n            <set>\n                <if test="batchupdatetbproject.name != null">\n                    name = #{batchupdatetbproject.name},\n                </if>\n                <if test="batchupdatetbproject.type != null">\n                    type = #{batchupdatetbproject.type},\n                </if>\n                <if test="batchupdatetbproject.easyid != null">\n                    easy_id = #{batchupdatetbproject.easyid},\n                </if>\n                <if test="batchupdatetbproject.parentid != null">\n                    parent_id = #{batchupdatetbproject.parentid},\n                </if>\n            </set>\n            where id = #{batchupdatetbproject.id}\n        </foreach>\n    </update>\n\n\n\n# 批量删除\n\n<delete id="batchdeletetbsyncbuild" parametertype="java.util.list">\n        delete from tb_sync_build where build_id in\n        <foreach item="item" collection="batchdeletetbsyncbuildlist" open="(" separator="," close=")">\n            #{item}\n        </foreach>\n    </delete>\n\n<delete id="deletebatchrelation">\n        delete from pms_attr_attrgroup_relation where\n        <foreach collection="relationentities" item="item" separator=" or ">\n            (attr_id=#{item.attrid} and attr_group_id=#{item.attrgroupid})\n        </foreach>\n    </delete>\n\n\n\n# 二、mybatis分页查询\n\npublic msg gethoursename(tbsynhousequery query) {\n        string projectid = query.getprojectid();\n        queryprojectdatapo queryprojectdatapo = \t\t\t         queryprojectdatereadmapper.querybyid(projectid);\n        if (queryprojectdatapo ==null) {\n            return msg.error().message("projectid不存在！！");\n        }\n        projectid = queryprojectdatapo.geteasyid();\n        query.setprojectid(projectid);\n\n        // 分页，传入页码以及每页大小\n        pagehelper.startpage(query.getpage(),query.getsize());\n    \t// 房屋信息\n        list<tbsynhousevo> hoursepolist = tbsynchoursereadmapper.queryhouses(query); \n\n        // 使用pageinfo包装查询后的结果\n         com.github.pagehelper.pageinfo page = new com.github.pagehelper.pageinfo(hoursepolist);\n\n        list<tbsynhousevo> houses = page.getlist();\n\n        map<string,object> map = new hashmap<>();\n        long total = page.gettotal();// 总记录数\n        int pagenum = page.getpagenum();// 当前页\n        int pagesize = page.getpagesize();// 每页大小\n        int currentsize = page.getsize();// 当前页大小\n        map.put("total",total);\n        map.put("pagenum",pagenum);\n        map.put("pagesize",pagesize);\n        map.put("currentsize",currentsize);\n        map.put("houses",houses);\n\n        return msg.ok().add(map);\n\n    }\n\n\n注意： // 分页，传入页码以及每页大小 pagehelper.startpage(query.getpage(),query.getsize()); 执行完这句后后面需要紧跟查询语句否则分页不会起效\n\n\n# 三、sql知识点\n\n\n# ①sql删除重复数据\n\n-- 查询出所有重复数据的唯一id（不包括最小的id）\nselect id,name\nfrom stu s\nwhere (s.name) in (select name from stu group by name having count(*) > 1)\n\t\t\tand id not in (select min(id) from stu group by name having count(*) > 1);\n\t\t\t\n-- 删除重复数据\ndelete\nfrom stu\nwhere \n\t\t1=1\n\t\tand name in (select * from (select name from stu group by name having count(*) > 1) as s1)\n\t\tand id not in (select * from (select min(id) id from stu group by name having count(*) > 1) as s2);\n\t\t\n-- 优化版\nselect id,name\nfrom stu s\nwhere\t\n\t\texists\n\t\t(select s1.id from stu s1 join (select min(id) id,name from stu group by name having count(*)>1) as s2\n\t\twhere s1.name = s2.name and s1.id <> s2.id and s.id = s1.id)\n\t\t\ndelete s\nfrom stu s\nwhere\t\n\texists(select s1.id from stu s1 join (select min(id) id,name from stu group by name having count(*)>1) as s2\n\t\twhere s1.name = s2.name and s1.id <> s2.id and s.id = s1.id)\t\n\ndelete \nfrom stu\nwhere\t\n\tid in (select * from (select s1.id from stu s1 join (select min(id) id,name from stu group by name having count(*)>1) as s2\n\t\twhere s1.name = s2.name and s1.id <> s2.id) a)\n\t\t\n\n\n\n# ②mysql提示1040 toomany connections\n\n##当前修改只在当前进程有效重启mysql服务后失效。如需永久修改这需要修改配置文件\n#重启mysql服务器\n1.service mysqld restart\n2.mysql -u root -p 回车输入密码进入mysql\n#查看最大连接数\n3.show variables like "max_connections";\n#修改最大连接数\n4.set global max_connections=1000; \n5.退出mysql服务，exit\n',charsets:{cjk:!0},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4},{title:"Home",frontmatter:{home:!0,heroImage:"/img/pikachu.jpg",heroText:"Everything will be ok!",tagline:"Everything will be ok!",actionText:"开始使用 →",actionLink:"/pages/42d66a/",bannerBg:"none",postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-f75d6a90",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/06/11, 17:58:30",lastUpdatedTimestamp:171809991e4}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"前端",link:"/pages/5bf4bd/",items:[{text:"VUE2",link:"/pages/5bf4bd/"},{text:"VUE3",link:"/pages/76f6e5/"}]},{text:"后端",link:"/pages/42d66a/",items:[{text:"设计模式",link:"/pages/42d66a/"},{text:"JUC",link:"/pages/7ac60e/"},{text:"Nginx",link:"/pages/a18ea7/"},{text:"RabbitMQ",link:"/pages/b4e263/"},{text:"Redis",link:"/pages/9d202d/"}]},{text:"操作系统",items:[{text:"linux",link:"/pages/e414ca/"}]},{text:"数据库",link:"/pages/43d728/",items:[{text:"SQL",link:"/pages/43d728/"},{text:"MyBatis",link:"/pages/4af2ba/"}]},{text:"工具",link:"/pages/b70403/",items:[{text:"软件使用",link:"/pages/b70403/"},{text:"工具类",link:"/pages/4c6801/"},{text:"在线工具",items:[{text:"githubHosts",link:"https://raw.hellogithub.com/hosts"},{text:"正则表达式",link:"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html"},{text:"文件转换器",link:"https://convertio.co/zh/"},{text:"代码在线运行",link:"https://tool.lu/coderunner/"}]}]}],sidebarDepth:2,logo:"/img/pikachu.jpg",repo:"jmh9966",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.前端/":[{title:"前端",collapsable:!1,children:[["01.前端/01.vue_base.md","vue_base","/pages/5bf4bd/"],["01.前端/02.vue3_base.md","vue3_base","/pages/76f6e5/"]]}],catalogue:{},"/02.后端/":[{title:"后端",collapsable:!1,children:[["01.后端/01.design.md","designPattern","/pages/42d66a/"],["01.后端/02.JUC.md","JUC","/pages/7ac60e/"],["01.后端/03.Nginx.md","Nginx","/pages/a18ea7/"],["01.后端/04.RabbitMQ.md","RabbitMQ","/pages/b4e263/"],["01.后端/05.Redis2.md","redis","/pages/9d202d/"]]}],"/03.操作系统/":[{title:"linux",collapsable:!1,children:[["01.linux/01.linux.md","与Linux相关的知识点","/pages/e414ca/"]]}],"/04.数据库/":[{title:"数据库",collapsable:!1,children:[["01.数据库/02.SQL.md","sql","/pages/43d728/"],["01.数据库/03.mybatis.md","mybatis","/pages/4af2ba/"]]}],"/05.工具/":[{title:"工具",collapsable:!1,children:[["01.工具/01.tool.md","软件工具说明","/pages/b70403/"],["01.工具/02.util.md","自用工具类","/pages/4c6801/"]]}]},updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,author:{name:"J-Ming",href:"https://github.com/jmh9966"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:894072666@qq.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/xugaoyi"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=755597173"}]},footer:{createYear:2024,copyrightInfo:"Evan Xu | MIT License"},htmlModules:{}}};var _l=t(93),kl=t(94),Tl=t(11);var $l={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Tl.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Tl.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Tl.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,o=n.length;r<o;r++){const{frontmatter:{categories:o,tags:a}}=n[r];"array"===Object(Tl.n)(o)&&o.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(Tl.n)(a)&&a.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Qt.component(_l.default),Qt.component(kl.default);function Sl(n){return n.toString().padStart(2,"0")}t(243);Qt.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,348))),Qt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,93))),Qt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,94)));t(244);var jl=[({Vue:n,options:e,router:t,siteData:r,isServer:o})=>{o||t.afterEach(()=>{var n;n=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content");n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://jsd.cdn.zzko.cn/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(n,1):document.addEventListener("DOMContentLoaded",n),setTimeout(()=>{const n=document.querySelector(".page-wwads");if(!n)return;const e=n.querySelector(".wwads-hide");e&&(e.onclick=()=>{n.style.display="none"}),"none"===n.style.display&&(n.style.display="flex")},900)})},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${Sl(n.getUTCMonth()+1)}-${Sl(n.getUTCDate())} ${Sl(n.getUTCHours())}:${Sl(n.getUTCMinutes())}:${Sl(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin($l)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],Cl=[];class El extends class{constructor(){this.store=new Qt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Qt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(El.prototype,{getPageAsyncComponent:ss,getLayoutAsyncComponent:ls,getAsyncComponent:cs,getVueComponent:us});var Il={install(n){const e=new El;n.$vuepress=e,n.prototype.$vuepress=e}};function zl(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Ol={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ds("pageKey",e),Qt.component(e)||Qt.component(e,ss(e)),Qt.component(e)?n(e):n("")}},ql={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Al={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Pl=(t(245),t(246),Object(yl.a)(Al,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Rl={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Qt.config.productionTip=!1,Qt.use(Hi),Qt.use(Il),Qt.mixin(function(n,e,t=Qt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),a={};return Object.keys(o).reduce((n,e)=>(e.startsWith("$")&&(n[e]=o[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},wl)),Qt.component("Content",Ol),Qt.component("ContentSlotsDistributor",ql),Qt.component("OutboundLink",Pl),Qt.component("ClientOnly",Rl),Qt.component("Layout",ls("Layout")),Qt.component("NotFound",ls("NotFound")),Qt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.9",hash:"1fd8ffa"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:wl.routerBase||wl.base,t=new Hi({base:e,mode:"history",fallback:!1,routes:xl,scrollBehavior:(n,e,t)=>t||(n.hash?!Qt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(zl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";zl(n,t)?r(t):r()}else r();else{const t=e.path+"/",o=e.path+".html";zl(n,o)?r(o):zl(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(jl.filter(n=>"function"==typeof n).map(e=>e({Vue:Qt,options:r,router:t,siteData:wl,isServer:n})))}catch(n){console.error(n)}return{app:new Qt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Cl.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);